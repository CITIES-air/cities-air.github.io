{"version":3,"file":"static/js/125.df3bf335.chunk.js","mappings":"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","sources":["Graphs/Subchart/SeriesSelector.jsx","Graphs/GoogleChartHelper.jsx","Graphs/Subchart/GoogleChartStyleWrapper.jsx","Graphs/Subchart/SubChart.jsx","Graphs/ChartComponent.jsx","Graphs/ChartSubstituteComponents/AirQualityIndexTable.jsx","Graphs/ChartSubstituteComponents/ChartSubstituteComponentLoader.jsx","Components/AirQualityHelper.jsx","Components/DatasetDownload/DatasetCalendar.jsx","Components/DatasetDownload/DatasetDownloadDialog.jsx","Components/ScreenDialog.jsx","Pages/Dashboard/SchoolSelector.jsx","Utils/AirQualityExplanation.jsx","Pages/Project/Project.jsx","Pages/Dashboard/Dashboard.jsx","Graphs/ChartSubstituteComponents|lazy|/^/.//.*$/|groupOptions: {}|namespace object"],"sourcesContent":["/* eslint-disable */\nimport { useState, useEffect } from 'react';\nimport { Stack, Grid, MenuItem, FormControl, Select, Chip, Radio, Checkbox, Typography, Switch } from \"@mui/material\";\nimport { useTheme } from '@mui/material/styles';\n\nimport VisibilityIcon from '@mui/icons-material/Visibility';\n\nconst SELECT_ALL = 'Display All Series';\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\n\nexport default function SeriesSelector(props) {\n  const { items: itemsFromChart, selectorID, allowMultiple, onSeriesSelection } = props;\n\n  const theme = useTheme();\n\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: ITEM_HEIGHT * 5.55 + ITEM_PADDING_TOP,\n        overflow: 'visible !important',\n        background: theme.palette.customAlternateBackground\n      }\n    },\n    anchorOrigin: {\n      vertical: -6,\n      horizontal: \"left\"\n    },\n    transformOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"left\"\n    },\n    getContentAnchorEl: null\n  };\n\n  const [items, setItems] = useState(itemsFromChart);\n  const [selectAll, setSelectAll] = useState(allowMultiple); // default: all is selected if multiSelect is true\n\n  useEffect(() => {\n    setItems(itemsFromChart);\n  }, [itemsFromChart]);\n\n  useEffect(() => {\n    setSelectAll(items.every(item => item.selected)); // set selectAll if all items are selected\n  }, [items]);\n\n  const handleChange = (event) => {\n    // Get the array of the currently selected value(s)\n    const {\n      target: { value }\n    } = event;\n\n    // If the current selection has SELECT_ALL\n    // Behavior:\n    // - If SELECT_ALL is being selected now, then set all items to selected\n    // - IF SELECT_ALL is being de-selected now, then set all items but the first one to be unselected \n    // (to make sure there's always at least 1 item being selected)\n    if (value.includes(SELECT_ALL)) {\n      const updatedItems = items.map((item, index) => ({ ...item, selected: index == 0 ? true : !selectAll }));\n      onSeriesSelection(updatedItems);\n      setSelectAll(!selectAll);\n    }\n    // Else, if an ordinary item is selected/de-selected:\n    else {\n      const selectedItems = items.filter(item => value.includes(item.label));\n      const updatedItems = items.map(item => ({\n        ...item,\n        selected: selectedItems.some(selectedItem => selectedItem.label === item.label)\n      }));\n      onSeriesSelection(updatedItems);\n      setSelectAll(false);\n    }\n  };\n\n  const handleItemToggle = (item) => {\n    const updatedItems = items.map(existingItem =>\n      existingItem.label === item.label ? { ...existingItem, selected: !existingItem.selected } : existingItem\n    );\n    onSeriesSelection(updatedItems);\n  };\n\n  const renderedLabel = (selected) => {\n    return (\n      <Stack direction=\"row\" alignItems=\"center\" spacing={0.5}>\n        <VisibilityIcon fontSize=\"1.5rem\" sx={{ color: theme.palette.text.secondary }} />\n        <Typography variant=\"caption\" color=\"text.secondary\">\n          { /* show # of series selected if multiSelect. show cur selected serie if singleSelect */}\n          {allowMultiple ? `${selected.length} series displayed${selectAll ? ` (all)` : \"\"}`\n            : selected\n          }\n        </Typography>\n      </Stack>\n    )\n  };\n\n  return (\n    <Stack spacing={1} direction=\"row\" alignItems=\"center\">\n      <FormControl sx={{\n        [theme.breakpoints.down('sm')]: { width: '100%' },\n        minWidth: '200px',\n        '& .MuiInputBase-root': { mt: 1, borderRadius: theme.spacing(1) }\n      }} size=\"small\">\n        <Select\n          labelId={`${selectorID}-label`}\n          id={selectorID}\n          multiple={allowMultiple}\n          value={items.filter(item => item.selected).map(item => item.label)}\n          onChange={handleChange}\n          MenuProps={MenuProps}\n          renderValue={(selected) => renderedLabel(selected)}\n          sx={{ fontSize: '0.75em' }}\n        >\n          {/* Display all available items, together with checkbox for each item to select from */}\n          {items.map((item) => (\n            <MenuItem\n              disabled={\n                // If there is only 1 selected item and this is the selected item\n                // Then, prevent user from de-select this item too\n                // To ensure at least there is 1 selected item at all times\n                (items.filter(item => item.selected).length === 1 && item.selected) ? true : false\n              }\n              key={item.label}\n              value={item.label}\n              sx={{\n                backgroundColor: 'unset !important',\n                \"&:hover\": {\n                  backgroundColor: 'inherit !important',\n                }\n              }}\n            >\n              { /* checkboxes for MultiSelect, radioButtons for singleSelect*/}\n              {allowMultiple ? <Checkbox\n                checked={item.selected}\n                onClick={() => handleItemToggle(item)}\n\n                sx={{ p: 0.25, transform: 'scale(0.8)' }} />\n                : <Radio\n                  checked={item.selected}\n                  onChange={() => handleChange(item)}\n\n                  sx={{ p: 0.25, transform: 'scale(0.8)' }} />\n              }\n              <Typography variant='caption'>{item.label}</Typography>\n            </MenuItem>\n          ))}\n\n          {/* Show the option to select all if multiSelect is true*/}\n          {allowMultiple && <MenuItem key={SELECT_ALL} value={SELECT_ALL} sx={{\n            borderTop: 'solid 0.5px', borderColor: theme.palette.text.secondary,\n            position: 'sticky', bottom: 0, zIndex: 99999, marginBottom: theme.spacing(-1),\n            background: theme.palette.customAlternateBackground,\n            \"&:hover\": {\n              background: theme.palette.customAlternateBackground\n            }\n          }}>\n            <Stack direction='row' width='100%' alignItems='center' justifyContent='space-between'>\n              <Typography fontWeight={500} variant='caption' sx={{ pl: 1 }}>{SELECT_ALL}</Typography>\n              <Switch\n                checked={selectAll}\n                onClick={() => handleItemToggle(SELECT_ALL)}\n                sx={{ transform: 'scale(0.8)' }}\n              />\n            </Stack>\n          </MenuItem>\n          }\n        </Select>\n      </FormControl>\n\n      {/* Display only selected items in the Grids, and only in landscape mode and if multiSelect is true*/}\n      {allowMultiple && <Grid container spacing={1}\n        sx={{\n          [theme.breakpoints.down('sm')]: {\n            display: 'none'\n          },\n        }}\n      >\n        {items.filter(item => item.selected).map((item) => (\n          <Grid item key={item.label}>\n            <Chip\n              label={<Typography variant='caption'>{item.label}</Typography>}\n              size=\"small\"\n              {...(items.filter(item => item.selected).length !== 1 && { onDelete: () => handleItemToggle(item) })}\n            />\n          </Grid>\n        ))}\n      </Grid>}\n\n\n    </Stack>\n  );\n}\n","/* eslint-disable */\n\nexport const ChartControlType = {\n  CategoryFilter: { position: 'top', stackDirection: 'column' },\n  DateRangeFilter: { position: 'bottom', stackDirection: 'column-reverse' },\n  ChartRangeFilter: { position: 'bottom', stackDirection: 'column-reverse' },\n  NumberRangeFilter: { position: 'top', stackDirection: 'column' }\n}\n// Async function to fetch data from sheet using Google Visualization query language\nexport const fetchDataFromSheet = ({ chartData, subchartIndex }) => {\n  const urlParams =\n    subchartIndex == null\n      ? {\n        headers: chartData.headers || 1,\n        query: chartData.query,\n        gid: chartData.gid,\n      }\n      : {\n        headers:\n          chartData.headers\n          || chartData.subcharts[subchartIndex].headers\n          || null,\n        query:\n          chartData.query\n          || chartData.subcharts[subchartIndex].query\n          || null,\n        gid:\n          chartData.gid\n          || chartData.subcharts[subchartIndex].gid\n          || null,\n      };\n\n  const url = `https://docs.google.com/spreadsheets/d/${chartData.sheetId}/gviz/tq?gid=${urlParams.gid}&headers=${urlParams.headers}&tqx${urlParams.query ? `&tq=${encodeURIComponent(urlParams.query)}` : ''}`;\n  const query = new google.visualization.Query(url);\n\n  return new Promise((resolve, reject) => {\n    query.send(response => {\n      if (response.isError()) {\n        reject(response.getMessage() + ' ' + response.getDetailedMessage());\n      } else {\n        resolve(response);\n      }\n    });\n  });\n};\n\n// Function to generate a random ID for the google chart container\nexport const generateRandomID = () => {\n  return Math.random().toString(36).substr(2, 9); // Generates a random string of length 9\n}\n\n// -------- Chart options --------\n\nconst hideAnnotations = {\n  stem: {\n    length: 0,\n  },\n  textStyle: {\n    opacity: 0,\n  },\n  boxStyle: null,\n};\n\nconst returnResponsiveFontSizeInPixels = ({ isPortrait, isSmaller }) => {\n  return (\n    isSmaller ? (isPortrait ? 6 : 8) : (isPortrait ? 8 : 10)\n  );\n}\n\nexport const returnGenericOptions = (props) => {\n  const { chartData, subchartIndex, isPortrait, isHomepage, theme } = props;\n\n  // Define some shared styling rules for the chart\n  const axisTitleTextStyle = {\n    italic: false,\n    bold: true,\n    color: theme.palette.chart.axisTitle,\n    fontSize: returnResponsiveFontSizeInPixels({ isPortrait })\n  };\n  const axisTextStyle = {\n    color: theme.palette.chart.axisText,\n    fontSize: returnResponsiveFontSizeInPixels({ isPortrait })\n  };\n\n  // ---- Formulate the options for this specific chart:\n  // 1. Populate first with subchart's options (if any)\n  let options = chartData.subcharts?.[subchartIndex].options\n    ? { ...chartData.subcharts[subchartIndex].options }\n    : {};\n\n  // 2. Append own chart's options and then populate with universal options for all charts\n  options = {\n    ...options,\n    ...chartData.options,\n    theme: 'material',\n    curveType: options.curveType || chartData.options?.curveType || 'function',\n    crosshair: { orientation: 'both', trigger: 'focus', opacity: 0.5 },\n    backgroundColor: { fill: 'transparent' },\n    chartArea: {\n      ...chartData.options?.chartArea,\n      width: isPortrait ? (chartData.options?.chartArea?.width?.portrait || '80%') : (chartData.options?.chartArea?.width?.landscape || '75%'),\n      height: isPortrait ? (chartData.options?.chartArea?.height?.portrait || '60%') : (chartData.options?.chartArea?.height?.landscape || '70%'),\n    },\n    width: isPortrait ? (chartData.options?.width?.portrait || '100%') : (chartData.options?.width?.landscape || '100%'),\n    // if there is a filter, we make space for the chartFilter from the chart's height.\n    // value is divided in 2 because the calculation is applied twice due to\n    // how react-google-charts nest components\n    height: chartData.height || '100%',\n    tooltip: {\n      isHtml: true,\n      showColorCode: false\n    },\n    legend: {\n      alignment: isPortrait ? 'center' : 'start',\n      position:\n        chartData.options?.legend?.position\n        ?? (isPortrait ? 'top' : 'right'),\n      scrollArrows: {\n        activeColor: theme.palette.chart.axisTitle,\n        inactiveColor: theme.palette.text.secondary,\n      },\n      pagingTextStyle: {\n        fontSize: 10,\n        color: theme.palette.chart.axisTitle,\n        bold: true,\n      }\n    }\n  };\n\n  // 3. Append to vAxis and hAxis properties\n  options.vAxis = {\n    ...options.vAxis,\n    format: options.vAxis?.format ?? 'decimal',\n    title: options.vAxis?.title ?? '',\n    viewWindow: {\n      min: options.vAxis?.viewWindow?.min ?? 0,\n    },\n  };\n  options.hAxis = {\n    ...options.hAxis,\n    title: options.hAxis?.title ?? '',\n  };\n  // 3.1. If in portrait mode, slant the text of the hAxis\n  if (isPortrait) {\n    options.hAxis = {\n      ...options.hAxis,\n      slantedText: true,\n      slantedTextAngle: 30,\n    };\n  }\n\n  // 4. Override with custom colors:\n  // 4.1. Color scheme of all the series of this chart\n  if (typeof options.colors === 'string' || !options.colors) options.colors = theme.palette.chart.optionsColors[options.colors || 'multiColor'];\n  // 4.2. Individual color of a single serie (if given)\n  if (options.series) {\n    Object.values(options.series).forEach((_serie) => {\n      const serie = _serie;\n      if (serie.color === 'default') {\n        serie.color = theme.palette.primary.main;\n      }\n    });\n  }\n  // 4.3. Color of the trendline\n  if (options.trendlines) {\n    options.trendlines.forEach((_item) => {\n      const item = _item;\n      item.color = theme.palette.primary.main;\n    });\n  }\n  // 4.4. Color axis of the Calendar chart\n  if (options.colorAxis) {\n    switch (options.colorAxis.colors) {\n      case 'matchingColor':\n        options.colorAxis.colors = [\n          theme.palette.chart.colorAxisFirstColor,\n          theme.palette.chart.optionsColors.multiColor[options.colorAxis.colorIndex],\n        ];\n        break;\n      case 'default':\n        options.colorAxis.colors = [\n          theme.palette.chart.colorAxisFirstColor,\n          theme.palette.NYUpurple,\n        ];\n        break;\n      case 'aqi':\n        options.colorAxis = theme.palette.chart.aqiColorAxis;\n        break;\n      default:\n        break;\n    }\n  }\n  // 4.5. Colors of other elements of the chart (typographies and gridlines)\n  options.vAxis = {\n    ...options.vAxis,\n    titleTextStyle: axisTitleTextStyle,\n    textStyle: axisTextStyle,\n    gridlines: {\n      ...options.vAxis?.gridlines,\n      color: options.vAxis?.gridlines?.color || theme.palette.chart.gridlines\n    },\n    minorGridlines: { count: 0 },\n  };\n  options.hAxis = {\n    ...options.hAxis,\n    titleTextStyle: axisTitleTextStyle,\n    textStyle: axisTextStyle,\n    gridlines: {\n      ...options.hAxis?.gridlines,\n      color: options.hAxis?.gridlines?.color || theme.palette.chart.gridlines\n    },\n    minorGridlines: {\n      ...options.hAxis?.minorGridlines,\n      color: options.hAxis?.gridlines?.color || theme.palette.chart.gridlines,\n    },\n  };\n  options.legend = {\n    ...options.legend,\n    textStyle: axisTextStyle,\n  };\n  options.annotations = {\n    ...options.annotations,\n    highContrast: true,\n    textStyle: {\n      color: theme.palette.primary.contrastText,\n      fontSize: returnResponsiveFontSizeInPixels({ isPortrait, isSmaller: true }),\n      opacity: 0.8\n    },\n    stem: {\n      ...options.annotations?.stem,\n      color: theme.palette.chart.axisTitle,\n      thickness: 2\n    },\n    boxStyle: {\n      rx: theme.shape.borderRadius, // rounded corners\n      ry: theme.shape.borderRadius,\n      fill: theme.palette.chart.annotationBoxFill,\n      fillOpacity: 0.5\n    },\n  };\n\n  // 5. If the chart is displayed on the homepage, override the options with:\n  if (isHomepage) {\n    options = {\n      ...options,\n      chartArea: {\n        ...options.chartArea,\n        width: '80%',\n        height: '80%'\n      },\n      seriesSelector: false,\n      pointSize: 0,\n      enableInteractivity: false,\n      annotations: hideAnnotations,\n      legend: 'none',\n      vAxis: {\n        ...options.vAxis,\n        textPosition: 'none',\n        titleTextStyle: {\n          ...options.vAxis.titleTextStyle,\n          bold: false\n        },\n        gridlines: { color: 'transparent', count: 0 },\n        viewWindowMode: 'maximized'\n      },\n      hAxis: {\n        ...options.hAxis,\n        textPosition: 'none',\n        gridlines: { color: 'transparent', count: 0 },\n        titleTextStyle: {\n          ...options.hAxis.titleTextStyle,\n          bold: false\n        }\n      },\n    };\n  }\n\n  return options;\n}\n\nexport const returnCalendarChartOptions = (existingOptions) => {\n  const calendarDimensions = calculateCalendarDimensions({ cellSizeMin: 14, cellSizeMax: 18 });\n  return {\n    ...existingOptions,\n    width: calendarDimensions.chartWidth,\n    calendar: {\n      cellSize: calendarDimensions.cellSize,\n      yearLabel: {\n        fontSize: calendarDimensions.yearLabelFontSize\n      }\n    },\n    noDataPattern: {\n      backgroundColor: 'none',\n      color: 'none',\n    },\n  }\n}\n\nexport const returnChartControlUI = (props) => {\n  const { chartControl, mainChartData, mainChartOptions, subchartIndex, theme, isPortrait } = props;\n  let chartControlUI = {\n    ...chartControl.options?.ui,\n    snapToData: true\n  };\n\n  // Assign the appropriate UI for chartControl based on controlType (if existed)\n  if (chartControl.controlType === 'ChartRangeFilter') {\n    chartControlUI = {\n      ...chartControlUI,\n      chartType: mainChartData.chartType,\n      chartView: {\n        columns:\n          mainChartData.columns\n          || (mainChartData.subcharts\n            && mainChartData.subcharts[subchartIndex].columns)\n          || null\n          || null,\n      },\n      chartOptions: {\n        ...mainChartOptions,\n        ...chartControl.options?.ui?.chartOptions,\n        hAxis: {\n          ...chartControl.options?.ui?.chartOptions?.hAxis,\n          textPosition: 'out',\n          textStyle: { color: theme.palette.chart.axisText, fontSize: returnResponsiveFontSizeInPixels({ isPortrait, isSmaller: true }) }\n        },\n        vAxis: {\n          ...chartControl.options?.ui?.chartOptions?.vAxis,\n          title: null\n        },\n        annotations: hideAnnotations,\n        legend: null,\n      }\n    };\n  }\n  return chartControlUI;\n}\n\nconst calculateCalendarDimensions = ({ cellSizeMin, cellSizeMax }) => {\n  const cellSize = Math.min(Math.max((window.innerWidth * 0.9) / 58, cellSizeMin), cellSizeMax);\n  return {\n    chartWidth: cellSize * 56, // fixed ratio\n    cellSize,\n    yearLabelFontSize: cellSize * 2\n  };\n};\n\nexport const addTouchEventListenerForChartControl = ({ controlWrapper, chartID }) => {\n  const touchHandler = (event) => {\n    var touches = event.changedTouches,\n      first = touches[0],\n      type = '';\n\n    switch (event.type) {\n      case 'touchstart':\n        type = 'mousedown';\n        break;\n      case 'touchmove':\n        type = 'mousemove';\n        break;\n      case 'touchend':\n        type = 'mouseup';\n        break;\n      default:\n        return;\n    }\n\n    var simulatedEvent = new MouseEvent(type, {\n      bubbles: true,\n      cancelable: true,\n      view: window,\n      detail: 1,\n      screenX: first.screenX,\n      screenY: first.screenY,\n      clientX: first.clientX,\n      clientY: first.clientY,\n      button: 0, // left button\n      relatedTarget: null,\n    });\n\n    first.target.dispatchEvent(simulatedEvent);\n    event.preventDefault();\n  }\n\n  let isMounted = true; // Flag to track component's mount status\n  if (!controlWrapper) return;\n\n  const controlDOM = document.querySelector(`#control-${chartID}`);\n  if (!controlDOM) return;\n\n  ['touchstart', 'touchmove', 'touchend', 'touchcancel']\n    .forEach((touchEvent) => {\n      controlDOM.addEventListener(touchEvent, touchHandler, { capture: true });\n    });\n\n  return () => {\n    isMounted = false; // Component is unmounting\n\n    ['touchstart', 'touchmove', 'touchend', 'touchcancel'].forEach((touchEvent) => {\n      controlDOM.removeEventListener(touchEvent, touchHandler, { capture: true });\n    });\n  };\n}","import { Box } from '@mui/material/';\nimport { styled } from '@mui/material/styles';\n\nconst GoogleChartStyleWrapper = styled(Box)(({ theme, isPortrait }) => ({\n  // CSS for HTML tooltip\n  '& .google-visualization-tooltip': {\n    width: 'unset !important',\n    maxWidth: '350px',\n    height: 'unset',\n    padding: '1em',\n    fontSize: `${isPortrait ? 9 : 12}px`,\n    color: theme.palette.chart.tooltip.text,\n    background: theme.palette.chart.tooltip.background,\n    borderRadius: theme.spacing(1 / 2),\n    '& ul': {\n      margin: '0 !important',\n      '& li': {\n        margin: '0 !important',\n        padding: '0 !important',\n        '& span': {\n          fontSize: `${isPortrait ? 9 : 12}px !important`,\n          color: `${theme.palette.chart.tooltip.text} !important`,\n        }\n      }\n    }\n  },\n\n  // -------- chartControl's additional stylings\n  '& .goog-menuitem-highlight, .goog-menuitem-hover': {\n    backgroundColor: `${theme.palette.primary} !important`\n  },\n\n  // CategoryFilter\n  '& .google-visualization-controls-categoryfilter': {\n    fontSize: '0.85rem',\n    marginTop: '0.75rem',\n    marginBottom: '-0.75rem',\n\n    '& .goog-inline-block > .goog-menu-button': {\n      marginTop: 0\n    },\n\n    '& .goog-menu-button-hover .goog-menu-button-outer-box, .goog-menu-button-hover .goog-menu-button-inner-box': {\n      borderColor: 'inherit !important'\n    },\n\n    '& .google-visualization-controls-label': {\n      color: theme.palette.text.secondary,\n      fontWeight: 500,\n      verticalAlign: 'middle',\n      marginBottom: '0.25rem'\n    },\n    '& .goog-menu-button-outer-box': {\n      backgroundColor: theme.palette.background.paper,\n      border: 'unset',\n\n      '& .goog-menu-button-inner-box': {\n        paddingTop: theme.spacing(0.5),\n        paddingBottom: theme.spacing(0.5),\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2),\n        border: 'solid',\n        borderWidth: '0.5px',\n        borderRadius: theme.spacing(0.5),\n        borderColor: theme.palette.text.secondary,\n\n        '& .goog-menu-button-caption': {\n          color: theme.palette.text.secondary\n        }\n      }\n    }\n  },\n\n  // DateRangeFilter\n  '& .google-visualization-controls-rangefilter': {\n    width: '100%',\n    fontSize: '0.75rem',\n    '& .goog-inline-block': {\n      width: '100%',\n    },\n    '& .google-visualization-controls-slider-horizontal': {\n      width: '90%',\n      margin: '0 5%',\n    },\n    '& .google-visualization-controls-rangefilter-thumblabel:nth-of-type(1)': {\n      position: 'absolute',\n      top: '1.5em',\n      left: '5%'\n    },\n    '& .google-visualization-controls-rangefilter-thumblabel:nth-of-type(2)': {\n      position: 'absolute',\n      top: '1.5em',\n      right: '5%'\n    },\n    '& .google-visualization-controls-slider-handle': {\n      background: theme.palette.primary.main\n    },\n    '& .google-visualization-controls-rangefilter-thumblabel': {\n      color: theme.palette.text.secondary,\n      padding: 0,\n      fontWeight: 500\n    },\n    '& .google-visualization-controls-slider-thumb': {\n      background: theme.palette.primary.main,\n      border: 'unset',\n      borderRadius: '4px'\n    }\n  },\n\n  // These are the paths showing on top of the line chart\n  // and the stroke around the bar/column chart\n  // when the user hovers on the legend to make the serie stand out\n  // by Google Chart's default doesn't change color based on light/dark theme, but we modify here:\n  '& path[stroke-opacity=\"0.3\"], path[stroke-opacity=\"0.1\"], path[stroke-opacity=\"0.05\"], rect[stroke-opacity]': {\n    stroke: theme.palette.text.primary,\n    strokeWidth: 3\n  },\n\n  // Cursor of series in legends\n  '& [column-id]:not(:empty)': {\n    cursor: 'pointer',\n    ':hover': {\n      fontWeight: 600\n    }\n  }\n}));\n\nexport default GoogleChartStyleWrapper;\n","/* eslint-disable */\n\nimport { useState, useEffect, useContext } from 'react';\n\nimport { GoogleContext } from '../../ContextProviders/GoogleContext';\n\nimport { Box, Stack } from '@mui/material/';\n\nimport { useTheme } from '@mui/material/styles';\nimport SeriesSelector from './SeriesSelector';\n\nimport { fetchDataFromSheet, generateRandomID, returnGenericOptions, returnCalendarChartOptions, returnChartControlUI, ChartControlType, addTouchEventListenerForChartControl } from '../GoogleChartHelper';\n\nimport GoogleChartStyleWrapper from './GoogleChartStyleWrapper';\n\nimport LoadingAnimation from '../../Components/LoadingAnimation';\n\nimport ChartSubstituteComponentLoader from '../ChartSubstituteComponents/ChartSubstituteComponentLoader';\n\nexport default function SubChart(props) {\n  // Props\n  const { chartData, subchartIndex, windowSize, isPortrait, isHomepage, height, maxHeight } = props;\n  // Early return if this doesn't contain a normal Google Chart but a chartSubstituteComponent\n  const chartSubstituteComponentName = chartData.subcharts?.[subchartIndex].chartSubstituteComponentName;\n  if (chartSubstituteComponentName) {\n    return <ChartSubstituteComponentLoader chartSubstituteComponentName={chartSubstituteComponentName} />;\n  }\n\n  // Formulate the className\n  const className = chartData.customClassName ? `${chartData.chartType} ${chartData.customClassName}` : chartData.chartType;\n\n  // Use GoogleContext for loading and manipulating the Google Charts\n  const [google, _] = useContext(GoogleContext);\n\n  // States of the Google Charts\n  const [dataTable, setDataTable] = useState();\n  const [chartWrapper, setChartWrapper] = useState();\n  const [dashboardWrapper, setDashboardWrapper] = useState();\n  const [controlWrapper, setControlWrapper] = useState();\n\n  // Get the current theme\n  const theme = useTheme();\n\n  // To determine the first time the chart renders to show/hide the LoadingAnimation\n  const [isFirstRender, setIsFirstRender] = useState(true);\n\n  // Keep track of the columns (series) of the chart\n  const [allInitialColumns, setAllInitialColumns] = useState();\n  const [dataColumns, setDataColumns] = useState();\n  const [initialVAxisRange, setInitialVAxisRage] = useState();\n\n  // Define the DOM container's ID for drawing the google chart inside\n  const [chartID, __] = useState(generateRandomID());\n\n  // Calendar chart's properties\n  const [chartTotalHeight, setChartTotalHeight] = useState(200);\n\n  // Get the options object for chart\n  let options = returnGenericOptions({ ...props, theme });\n  if (chartData.chartType === 'Calendar') options = returnCalendarChartOptions(options);\n\n  // Properties for chart control (if existed)\n  let hasChartControl = false;\n  let chartControlOptions;\n  // Only show the chart control if:\n  // It exists in the database (either for all subcharts or just for a particular subchart)\n  // And if the chart is currently not shown on homePage\n  let chartControl = chartData.control || chartData.subcharts?.[subchartIndex].control;\n  if (chartControl && (isHomepage !== true)) {\n    hasChartControl = true;\n\n    // Get the options for chartControl if hasChartControl\n    chartControlOptions = {\n      ...chartControl.options,\n      ui: returnChartControlUI({\n        chartControl,\n        mainChartData: chartData,\n        mainChartOptions: options,\n        subchartIndex,\n        theme,\n        isPortrait\n      })\n    };\n\n    // Swap touch events for mouse events on ChartRangeControl\n    // as it doesn't support touch events on mobile\n    if (chartControl.controlType === 'ChartRangeFilter') {\n      useEffect(() => {\n        const cleanupTouchEventListener = addTouchEventListenerForChartControl({ controlWrapper, chartID });\n        return cleanupTouchEventListener;\n      }, [controlWrapper]);\n    }\n  }\n\n  // Properties for selecting (showing or hiding) the serie(s)\n  const seriesSelector = options.seriesSelector || false;\n\n  // Set new options prop and re-render the chart if theme or isPortrait changes\n  useEffect(() => {\n    if (seriesSelector) handleSeriesSelection(dataColumns); // this function set new options, too\n    else {\n      chartWrapper?.setOptions({\n        ...options,\n        ...(chartData.chartType === 'Calendar' && { height: chartTotalHeight })\n      });\n\n      chartWrapper?.draw();\n      if (hasChartControl) {\n        controlWrapper?.setOptions(chartControlOptions);\n        controlWrapper?.draw();\n      }\n    }\n  }, [theme, isPortrait, windowSize, chartTotalHeight]);\n\n  // Set new initialColumnsColors if the theme changes\n  // This only applies to when seriesSelector.method == \"setViewColumn\"\n  useEffect(() => {\n    if (!dataColumns) return;\n    if (seriesSelector && seriesSelector.method == \"setViewColumn\") {\n      setInitialColumnsColors({ dataColumns: dataColumns });\n      handleSeriesSelection(dataColumns);\n    }\n  }, [theme]);\n\n  const getInitialColumns = ({ chartWrapper, dataTable, seriesSelector }) => {\n    // Update the initial DataView's columns (often, all of the series are displayed initially)\n    var initialView = chartWrapper.getView();\n    // If (optional) columns is not specified in database\n    // Assign it from DataTable\n    if (initialView.columns == null) {\n      const viewFromDataTable = new google.visualization.DataView(dataTable);\n      chartWrapper.setView({\n        columns: viewFromDataTable.columns\n      });\n      initialView = chartWrapper.getView();\n    }\n\n    let shouldAssignDomainRoleToFistColumn = true; // variable to only assign type: 'domain' to the very first column\n    let dataSeriesIndex = 0;\n    const allInitialColumns = initialView.columns.map((col, index) => {\n      // A column can either be a number (that denotes the index of the sourceColumn) or an object\n      // The code below harmonize all columns to be an object to store crucial data to toggle their visibility\n      if (typeof col === 'number') col = {\n        role: shouldAssignDomainRoleToFistColumn ? 'domain' : 'data',\n        sourceColumn: col\n      }\n      col.label = dataTable.getColumnLabel(col.sourceColumn);\n      col.indexInAllInitialColumns = index;\n\n      shouldAssignDomainRoleToFistColumn = shouldAssignDomainRoleToFistColumn && false;\n\n      // Set the visibility of data column, \n      if (col.role === 'data') {\n        // initially, all data columns are selected if multiple series are selectable\n        if (seriesSelector?.allowMultiple) {\n          col.selected = true;\n        } else {\n          // else for single serie selector, only first data column is selected\n          if (dataSeriesIndex === 0) {\n            col.selected = true;\n          } else {\n            col.selected = false;\n          }\n        }\n        col.seriesIndex = dataSeriesIndex;\n        dataSeriesIndex++;\n      }\n      return col;\n    });\n    setAllInitialColumns(allInitialColumns);\n    const initialVAxisRange = getInitialVAxisRange({ dataTable: dataTable, allInitialColumns: allInitialColumns });\n    setInitialVAxisRage(initialVAxisRange);\n    // To track selection, only get the columns that are:\n    // role === 'data'\n    // visibleInLegend !== false\n    const dataColumns = allInitialColumns.filter((col) => {\n      return col.role === 'data' && options.series?.[col.seriesIndex]?.visibleInLegend !== false;\n    });\n\n    if (seriesSelector.method === \"setViewColumn\") setInitialColumnsColors({ dataColumns: dataColumns });\n\n    setDataColumns(dataColumns);\n    return dataColumns;\n  };\n\n  const setInitialColumnsColors = ({ dataColumns }) => {\n    dataColumns.forEach((col) => {\n      // Assign inherit color to this data column\n      col.color = options.colors[col.seriesIndex % options.colors.length];\n      // Assign other inherit attributes from its serie object (if existed)\n      col.serieAttribute = options.series?.[col.seriesIndex];\n    });\n  }\n\n  const getInitialVAxisRange = ({ dataTable, allInitialColumns }) => {\n    let vAxisMin, vAxisMax;\n    allInitialColumns.forEach((col, index) => {\n      if (index === 0) return; // the first column is the domain (hAxis)\n      const range = dataTable.getColumnRange(col.sourceColumn);\n      if (!isNaN(range.min) && range.min) vAxisMin = vAxisMin ? Math.min(vAxisMin, range.min) : range.min;\n      if (!isNaN(range.max) && range.max) vAxisMax = vAxisMax ? Math.max(vAxisMax, range.max) : range.max;\n    });\n    return { min: vAxisMin, max: vAxisMax };\n  }\n\n  const handleSeriesSelection = (newDataColumns, _chartWrapper = chartWrapper) => {\n    if (!allInitialColumns) return;\n\n    setDataColumns(newDataColumns);\n\n    if (seriesSelector.method === \"toggleVisibility\" || seriesSelector.method === null) {\n      const hiddenSeriesObject = {};\n      newDataColumns.forEach((col) => {\n        if (!col.selected)\n          hiddenSeriesObject[col.seriesIndex] = {\n            color: 'transparent',\n            enableInteractivity: false,\n            visibleInLegend: false\n          }; // 'hide' the serie by making it transparent\n      });\n\n      _chartWrapper?.setOptions({\n        ...options,\n        series: {\n          ...options.series,\n          ...hiddenSeriesObject\n        }\n      });\n    }\n    else if (seriesSelector.method === \"setViewColumn\") {\n      let newViewColumns = [];\n      newViewColumns.push(0); // this is the domain column\n      newDataColumns.forEach((dataColumn) => {\n        if (dataColumn.selected) {\n          newViewColumns.push(dataColumn);\n          // Find this dataColumn's supporting columns (whose role !== 'data')\n          // A dataColumn has its supporting columns (can be many) follow it immediately\n          for (let i = dataColumn.indexInAllInitialColumns + 1; i < allInitialColumns.length; i++) {\n            if (allInitialColumns[i].role !== 'data') {\n              newViewColumns.push(allInitialColumns[i]);\n            }\n            // If this loop encounter the next dataColumn, break the loop, all supporting columns for this dataColumn have been discovered\n            else {\n              break;\n            }\n          }\n        }\n      });\n      _chartWrapper?.setView({ columns: newViewColumns });\n\n      const newOptions = { ...options };\n      // Preserve the initial vAxis range so that the vAxis doesn't shift based on the visible serie(s)\n      // newOptions.vAxis.viewWindow = {\n      //   min: (options.vAxis.viewWindow.min == null) ? initialVAxisRange.min : options.vAxis.viewWindow.min,\n      //   max: (options.vAxis.viewWindow.max == null) ? initialVAxisRange.max : options.vAxis.viewWindow.max,\n      // }\n      // Set the new color array\n      newOptions.colors = newDataColumns.filter((col) => col.selected).map((col) => col.color);\n      // Set the new series object (if any)\n      // this contains other series' attributes (lineWidth, seriesType...)\n      const series = {};\n      let selectedSeriesCount = 0;\n      newDataColumns.forEach((col) => {\n        if (!col.selected) return;\n        if (col.serieAttribute != null) {\n          series[selectedSeriesCount] = col.serieAttribute;\n        }\n        selectedSeriesCount++;\n      })\n      newOptions.series = series;\n      _chartWrapper?.setOptions(newOptions);\n    }\n\n    // Call draw to apply the new DataView and 'refresh' the chart\n    _chartWrapper?.draw();\n\n    if (hasChartControl) {\n      controlWrapper?.draw();\n    }\n  };\n\n  const reconstructFunctionFromJSONstring = (columns) => {\n    if (!columns) return;\n\n    const evaluatedColumns = [];\n    for (const column of columns) {\n      if (typeof column === 'number') {\n        // If it's a number, add it as-is\n        evaluatedColumns.push(column);\n      } else if (typeof column === 'object') {\n        if (column.calc && column.calc !== 'stringify') {\n          // If it's an object with a 'calc' property, evaluate the 'calc' function\n          // using new Function() and add the result to the evaluatedColumns array\n          const calcFunction = new Function(\"dataTable\", \"rowNum\", column.calc);\n          evaluatedColumns.push({\n            ...column,\n            calc: calcFunction,\n          });\n        } else {\n          // If it's an object without a 'calc' property, or with calc = 'stringify', add it as-is\n          evaluatedColumns.push(column);\n        }\n      }\n    }\n    return evaluatedColumns;\n  }\n\n\n  // Call this function to fetch the data and draw the initial chart\n  useEffect(() => {\n    if (google && chartData) {\n      // Get and set the dataArray \n      const dataArray = chartData.dataArray\n        || (chartData.subcharts\n          && chartData.subcharts[subchartIndex].dataArray)\n        || null\n        || null;\n      if (!dataArray) return; // early return if there is no data to render\n\n      const thisDataTable = google.visualization.arrayToDataTable(dataArray);\n      setDataTable(thisDataTable);\n\n      // Get dataColumn views\n      const columns = chartData.columns\n        || (chartData.subcharts\n          && chartData.subcharts[subchartIndex].columns)\n        || null\n        || null;\n      const reconstructedColumns = reconstructFunctionFromJSONstring(columns);\n\n      // Create chartWrapper\n      const thisChartWrapper = new google.visualization.ChartWrapper({\n        chartType: chartData.chartType,\n        dataTable: (!hasChartControl) ? thisDataTable : undefined,\n        options: options,\n        view: {\n          columns: reconstructedColumns\n        },\n        containerId: chartID\n      });\n      setChartWrapper(thisChartWrapper);\n\n      if (hasChartControl) {\n        const thisDashboardWrapper = new google.visualization.Dashboard(\n          document.getElementById(`dashboard-${chartID}`));\n        setDashboardWrapper(thisDashboardWrapper);\n\n        google.visualization.events.addListener(thisDashboardWrapper, 'ready', onChartReady);\n\n        const thisControlWrapper = new google.visualization.ControlWrapper({\n          controlType: chartControl.controlType,\n          options: chartControlOptions,\n          containerId: `control-${chartID}`\n        });\n        setControlWrapper(thisControlWrapper);\n\n        // Establish dependencies\n        thisDashboardWrapper.bind(thisControlWrapper, thisChartWrapper);\n\n        thisDashboardWrapper.draw(thisDataTable);\n      }\n      else {\n        google.visualization.events.addListener(thisChartWrapper, 'ready', onChartReady);\n        thisChartWrapper.draw();\n      }\n\n      // Run the seriesSelector for the first time\n      if (seriesSelector) {\n        const initColumns = getInitialColumns({ chartWrapper: thisChartWrapper, dataTable: thisDataTable, seriesSelector: seriesSelector });\n        handleSeriesSelection(initColumns, thisChartWrapper);\n      }\n    }\n  }, [google, chartData]);\n\n  const renderChart = () => {\n    if (hasChartControl) {\n      return (\n        <Stack\n          id={`dashboard-${chartID}`}\n          direction={ChartControlType[chartControl.controlType]?.stackDirection || 'column-reverse'}\n          sx={{ height: '100%' }}\n        >\n          <Box\n            id={`control-${chartID}`}\n            sx={{\n              height: `calc(${height} / 8)`,\n              opacity: 0.8,\n              filter: 'saturate(0.3)'\n            }}\n          />\n          <Box id={chartID} sx={{ height: height, maxHeight: maxHeight }} />\n        </Stack>\n      )\n    }\n    else return <Box id={chartID} sx={{ height: height, maxHeight: maxHeight }} />;\n  }\n\n  const onChartReady = () => {\n    if (chartData.chartType === 'Calendar') {\n      // querySelector is used to select the first 'g' element in the svg\n      // this is to get the height of the non-responsive element\n      // to set the CalendarChart's height to make it resonsive\n      const chartDOMContainer = document.getElementById(chartID).querySelector('svg > g:nth-of-type(1)');\n      let renderedHeight = chartDOMContainer.getBBox().height;\n      if (options.legend.position === 'none') renderedHeight += 50;\n      setChartTotalHeight(renderedHeight);\n    }\n\n    if (!isFirstRender) return;\n    // Hide the circleProgress when chart finishes rendering the first time\n    setIsFirstRender(false);\n  };\n\n  return (\n    <GoogleChartStyleWrapper\n      isPortrait={isPortrait}\n      className={className}\n      position=\"relative\"\n      height=\"100%\"\n      minHeight={chartData.chartType === 'Calendar' && '200px'}\n    >\n      {/* Conditionally display loading animation here */}\n      {isFirstRender && (\n        <Box sx={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}>\n          <LoadingAnimation />\n        </Box>\n      )}\n\n      {/* Conditionally display seriesSelector here */}\n      {(seriesSelector && !isFirstRender) && (\n        <SeriesSelector\n          items={dataColumns}\n          allowMultiple={seriesSelector.allowMultiple}\n          selectorID={`${chartData.title}-selector`}\n          onSeriesSelection={handleSeriesSelection}\n        />\n      )}\n\n      {/* Display chart here */}\n      {renderChart()}\n    </GoogleChartStyleWrapper>\n  );\n}","import { useState, useEffect, useContext } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Box, Tabs, Tab, useMediaQuery } from '@mui/material/';\nimport { TabContext } from '../ContextProviders/TabContext';\n\nimport SubChart from './Subchart/SubChart';\n\nconst debounceMilliseconds = 100;\n\nconst ChartStyleWrapper = styled(Box)(({ theme }) => ({\n  // CSS for dark theme only\n  ...(theme.palette.mode === 'dark' && {\n    // De-saturate a bit\n    filter: 'saturate(0.85)',\n    // Invert iframe\n    '& .heat-map-iframe': {\n      filter: 'invert(0.848) hue-rotate(180deg)',\n    }\n  }),\n  // Special CSS for historical-snapshot-aqi chart\n  '& .historical-snapshot-aqi svg [clip-path*=\"ABSTRACT_RENDERER\"] > g:nth-of-type(1), .historical-snapshot-aqi [id*=\"googlechart-control\"] svg [clip-path*=\"ABSTRACT_RENDERER\"] > g:nth-of-type(2)': {\n    opacity: 0.6\n  },\n  // Center Calendar chart in wrapper\n  '& .Calendar [dir]:not(:empty)': {\n    margin: 'auto'\n  },\n\n  // add horizontal scrollbar to Calendar charts\n  '& .Calendar > div > div:last-of-type > div': {\n    overflowX: 'auto',\n    overflowY: 'hidden',\n    scrollbarGutter: 'stable'\n  }\n}));\n\nconst StyledTabs = styled(Tabs)(({ theme }) => ({\n  '& .MuiTabScrollButton-root': {\n    color: theme.palette.text.primary\n  },\n  '& .MuiTab-root': {\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '0.75rem',\n      paddingLeft: theme.spacing(1),\n      paddingRight: theme.spacing(1)\n    },\n  }\n}));\n\n// eslint-disable-next-line max-len\nfunction ChartComponent({ chartData: passedChartData, chartHeight: passedChartHeight, isHomepage }) {\n  const isSmallWidth = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n\n  const [isPortrait, setIsPortrait] = useState(window.matchMedia('(orientation: portrait)').matches);\n  const [windowSize, setWindowSize] = useState([\n    window.innerWidth,\n    window.innerHeight,\n  ]);\n\n  let chartMaxHeight;\n  let chartHeight = passedChartHeight;\n  const chartData = passedChartData;\n\n  // Props for tab panels (multiple data visualizations in the same chart area,\n  // navigate with tab panels)\n  const [indexValue, setIndexValue] = useState(0); // start with the first elem\n\n  // eventListener for window resize\n  // redraw \"Calendar\" charts and charts with a time filter upon window resize.\n  // Filter & Calendar charts are not automatically respnsive, so we have to redraw them.\n  // redraw other charts when device orientation changes\n  useEffect(() => {\n    setIndexValue(0); // set tab back to 0 if chartData changes (changed school)\n\n    let timeoutID = null;\n\n    const handleWindowResize = () => {\n      clearTimeout(timeoutID);\n\n      // debounce before triggering re-render. as user is resizing window, the state could\n      // change multiple times causing many expensive rerenders. we try to rerender at the\n      // end of the resize.\n      timeoutID = setTimeout(() => {\n        // Redraw all charts on device orientation change, as the chartWrapperHeights\n        // have changed.\n        setIsPortrait(window.matchMedia('(orientation: portrait)').matches);\n\n        // Redraw all charts on window resized\n        setWindowSize([window.innerWidth, window.innerHeight]);\n      }, debounceMilliseconds);\n    };\n\n    // listen to window resize events\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, [chartData]);\n\n  if (chartData.chartType !== 'Calendar' && !chartHeight) {\n    chartHeight = isPortrait ? '80vw' : '35vw';\n    chartMaxHeight = isPortrait ? '800px' : '500px';\n  }\n\n  const handleChange = (__, newValue) => {\n    setIndexValue(newValue);\n  };\n\n  return (\n    <ChartStyleWrapper height=\"100%\">\n      {chartData.subcharts ?\n        <>\n          <StyledTabs\n            value={indexValue}\n            onChange={handleChange}\n            variant={isSmallWidth ? 'fullWidth' : 'standard'}\n          >\n            {chartData.subcharts.map((element, index) => (\n              <Tab\n                key={index}\n                value={index}\n                label={chartData.subcharts[index].subchartTitle}\n              />\n            ))}\n          </StyledTabs>\n          <Box position=\"relative\">\n            {chartData.subcharts.map((__, index) => (\n              <Box\n                key={index}\n                width=\"100%\"\n                height=\"100%\"\n                role=\"tabpanel\"\n                sx={{\n                  transition: '0.35s',\n                  position: (index === 0) ? '' : 'absolute',\n                  opacity: indexValue === index ? '1' : '0',\n                  pointerEvents: indexValue === index ? 'auto' : 'none',\n                  top: (index === 0) ? '' : 0\n                }}\n              >\n                <SubChart\n                  chartData={chartData}\n                  subchartIndex={index}\n                  isPortrait={isPortrait}\n                  isHomepage={isHomepage}\n                  windowSize={windowSize}\n                  height={chartData.height ? chartData.height : chartHeight}\n                  maxHeight={\n                    ['Calendar'].includes(chartData.chartType)\n                      ? ''\n                      : chartMaxHeight\n                  }\n                />\n              </Box>\n            ))}\n          </Box>\n        </>\n        :\n        <SubChart\n          chartData={chartData}\n          isPortrait={isPortrait}\n          isHomepage={isHomepage}\n          windowSize={windowSize}\n          height={chartData.height ? chartData.height : chartHeight}\n        />\n      }\n    </ChartStyleWrapper>\n  );\n}\n\nexport default ChartComponent;\n","import { Box, Table, TableBody, TableCell, TableHead, TableRow, styled } from '@mui/material';\nimport parse from 'html-react-parser';\nimport { replacePlainHTMLWithMuiComponents } from '../../Utils/Utils';\nimport ChartComponent from '../ChartComponent';\nimport AQIdatabase from '../../Utils/AirQualityIndexHelper';\nimport ThemePreferences from '../../Themes/ThemePreferences';\n\nexport const StyledTable = styled(Table)(({ theme, isTiny }) => ({\n  minWidth: isTiny || 700,\n  '& th, td': {\n    fontSize: isTiny ? '0.625rem' : '0.6875rem',\n    color: theme.palette.text.secondary,\n    [theme.breakpoints.down('sm')]: {\n      fontSize: isTiny ? '0.5rem' : '0.6875rem',\n    },\n  },\n  '& th': {\n    fontWeight: 500,\n    color: theme.palette.text.primary,\n    lineHeight: '1rem'\n  }\n}));\n\nfunction AirQualityIndexTable(props) {\n  const { isTiny, hideAQIDescription, themePreference } = props;\n\n  const renderAQIchart = ({ shouldRender }) => {\n    if (!shouldRender) {\n      return null;\n    }\n    else {\n      const dataArray = [[\"category\"], [\"US AQI\"]];\n      for (let category of AQIdatabase) {\n        dataArray[0].push(category.category);\n        dataArray[1].push(Math.ceil((category.aqiUS.high - category.aqiUS.low) / 50) * 50);\n      }\n      return (\n        <ChartComponent\n          chartHeight=\"4rem\"\n          chartData={\n            {\n              dataArray: dataArray,\n              chartType: 'BarChart',\n              options: {\n                enableInteractivity: false,\n                legend: { position: 'none' },\n                hAxis: {\n                  ticks: [0, 50, 100, 150, 200, 300, 500]\n                },\n                chartArea:\n                {\n                  width: { portrait: '98%', landscape: '50%' },\n                  height: { portrait: '20%', landscape: '30%' }\n                },\n                isStacked: true,\n                colors: 'aqi',\n                bar: { groupWidth: '100%' }\n              }\n            }\n          }\n        />\n      )\n    }\n  }\n\n  return (\n    <>\n      <Box overflow=\"auto\">\n        <StyledTable size=\"small\" isTiny={isTiny}>\n          <TableHead>\n            <TableRow>\n              <TableCell sx={{ pr: 0 }}>\n                <Box sx={{ width: '1em', height: '1em' }} />\n              </TableCell>\n              <TableCell sx={{ pl: 1 }}>\n                Category\n              </TableCell>\n              <TableCell align=\"right\">US AQI</TableCell>\n              <TableCell align=\"right\">\n                PM2.5 Concentration\n                (µg/m\n                <sup>3</sup>\n                )\n              </TableCell>\n              {!hideAQIDescription && <TableCell align=\"left\">Description</TableCell>}\n              {!hideAQIDescription && <TableCell align=\"left\">CITIESair&apos; Suggested Actions</TableCell>}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {AQIdatabase.map((element, index) => (\n              <TableRow\n                key={index}\n                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n              >\n                <TableCell sx={{ pr: 0 }}>\n                  <Box sx={{ width: '1em', height: '1em', backgroundColor: themePreference === ThemePreferences.light ? element.lightThemeColor : element.darkThemeColor }} />\n                </TableCell>\n                <TableCell sx={{ pl: 1 }}>\n                  {element.category}\n                </TableCell>\n                <TableCell align=\"right\">\n                  {element.aqiUS.low}\n                  &nbsp;\n                  -\n                  &nbsp;\n                  {element.aqiUS.high}\n                </TableCell>\n                <TableCell align=\"right\">\n                  {element.rawPM2_5.low}\n                  &nbsp;\n                  -\n                  &nbsp;\n                  {element.rawPM2_5.high}\n                </TableCell>\n                {!hideAQIDescription && <TableCell align=\"left\">{element.description}</TableCell>}\n                {!hideAQIDescription\n                  && (\n                    <TableCell align=\"left\">\n                      {\n                        parse(element.healthSuggestions.outdoors, {\n                          replace: replacePlainHTMLWithMuiComponents,\n                        })\n                      }\n                    </TableCell>\n                  )}\n              </TableRow>\n            ))}\n          </TableBody>\n        </StyledTable>\n      </Box>\n      {renderAQIchart({ shouldRender: !hideAQIDescription })}\n    </>\n\n  );\n}\n\nexport default AirQualityIndexTable;\n","import { lazy, Suspense } from 'react';\nimport LoadingAnimation from '../../Components/LoadingAnimation';\n\nexport default function ChartSubstituteComponentLoader({ chartSubstituteComponentName }) {\n  return (\n    <Suspense fallback={<LoadingAnimation />}>\n      {(() => {\n        const ChartSubstituteComponent = lazy(\n          () => import(`./${chartSubstituteComponentName}`)\n        );\n        return <ChartSubstituteComponent />;\n      })()}\n    </Suspense>\n  );\n}\n","import { useState } from 'react';\nimport { isMobile } from 'react-device-detect';\n\nimport { Fab, Fade, Popper, Paper, Typography, Stack } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport AirIcon from '@mui/icons-material/Air';\nimport { FadeInButtonForSpeedDial } from './Header/FadeInButtonForSpeedDial';\n\nimport * as Tracking from '../Utils/Tracking';\nimport AirQualityIndexTable from '../Graphs/ChartSubstituteComponents/AirQualityIndexTable';\n\nexport default function AirQualityIndexLegendQuickGlance(props) {\n  const { themePreference } = props;\n  // Mechanism for opening and closing the Quick Glance on hover\n  const [anchorEl, setAnchorEl] = useState(null);\n  const handlePopperOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n    Tracking.sendEventAnalytics(Tracking.Events.airQualityIndexLegendQuickGlance);\n  };\n  const handlePopperClose = () => {\n    setAnchorEl(null);\n  };\n  const open = Boolean(anchorEl);\n\n  return (\n    <>\n      <FadeInButtonForSpeedDial {...props} distanceFromBottomOfWindow=\"5.5rem\">\n        <Fab\n          sx={{ mt: 1 }}\n          aria-owns={open ? Tracking.Events.airQualityIndexLegendQuickGlance : undefined}\n          aria-haspopup=\"true\"\n          onMouseEnter={handlePopperOpen}\n          onMouseLeave={handlePopperClose}\n          onClick={(event) => isMobile && (open ? handlePopperClose() : handlePopperOpen(event))}\n          aria-label={Tracking.Events.airQualityIndexLegendQuickGlance}\n          color=\"primary\"\n        >\n          <Stack direction=\"column\" alignItems=\"center\">\n            <AirIcon fontSize=\"1rem\" />\n            <Typography variant=\"body2\" fontWeight=\"500\">\n              AQI\n            </Typography>\n          </Stack>\n        </Fab>\n      </FadeInButtonForSpeedDial>\n\n      <Popper\n        id={Tracking.Events.airQualityIndexLegendQuickGlance}\n        sx={{\n          pointerEvents: 'none',\n          mt: -1\n        }}\n        open={open}\n        anchorEl={anchorEl}\n        placement=\"top-end\"\n        onClose={handlePopperClose}\n        keepMounted\n        disableRestoreFocus\n        transition\n      >\n        {({ TransitionProps }) => (\n          <Fade {...TransitionProps} timeout={350}>\n            <Paper elevation={8} sx={{ py: 0.5, mb: 1 }}>\n              <Typography sx={{ mx: 2, mt: 1 }} color=\"text.disabled\" variant=\"body1\" fontWeight={500}>\n                AQI at quick glance\n              </Typography>\n              <AirQualityIndexTable isTiny hideAQIDescription themePreference />\n            </Paper>\n          </Fade>\n        )}\n\n      </Popper>\n    </>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport dayjs from 'dayjs';\nimport { styled } from '@mui/material/styles';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { PickersDay } from '@mui/x-date-pickers/PickersDay';\nimport { DateCalendar } from '@mui/x-date-pickers/DateCalendar';\nimport { DayCalendarSkeleton } from '@mui/x-date-pickers/DayCalendarSkeleton';\nimport Card from '@mui/material/Card';\nimport ClickAwayListener from '@mui/base/ClickAwayListener';\n\nconst HighlightedDay = styled(PickersDay)(({ theme }) => ({\n  // styles for dot\n  '&:after, :hover::after': {\n    content: '\".\"',\n    fontSize: '1.5rem',\n    bottom: '-0.5rem',\n    position: 'absolute',\n    color: theme.palette.primary.main,\n    opacity: 0.5\n  },\n  '&:hover::after': {\n    opacity: 1\n  }\n}));\n\nfunction isValidDate(date, validDates) {\n  return validDates.indexOf(dayjs(date).format('YYYY-MM-DD')) >= 0;\n}\n\nfunction CustomDayComponent(props) {\n  const { versionDates = [], day, ...other } = props;\n\n  const isHighlighted = versionDates.indexOf(dayjs(day).format('YYYY-MM-DD')) >= 0;\n\n  return (\n    isHighlighted\n      ? <HighlightedDay {...other} day={day} />\n      : <PickersDay {...other} day={day} />\n  );\n}\n\nexport default function DatasetCalendar(props) {\n  const { smallScreen, onChange, versions } = props;\n\n  const versionDates = versions\n    .filter((version) => version.version.length === 10) // valid date\n    .map((version) => version.version);\n\n  return (\n    <ClickAwayListener onClickAway={() => onChange('close')}>\n      <Card\n        sx={!smallScreen && { position: 'absolute', right: 0, zIndex: 9999 }}\n        raised\n      >\n        <LocalizationProvider dateAdapter={AdapterDayjs}>\n          <DateCalendar\n            loading={!versionDates}\n            format=\"YYYY-MM-DD\"\n            renderLoading={() => <DayCalendarSkeleton />}\n            slots={{\n              day: CustomDayComponent,\n            }}\n            onChange={(value, selectionState) => {\n              if (selectionState === 'finish') {\n                return onChange(dayjs(value).format('YYYY-MM-DD'));\n              }\n              return null;\n            }}\n            slotProps={{\n              day: {\n                versionDates\n              }\n            }}\n            // disable the date if its not a valid date\n            shouldDisableDate={(day) => !isValidDate(day, versionDates)}\n            disableHighlightToday\n            minDate={dayjs(versionDates.slice(-1)[0])}\n            maxDate={dayjs(versionDates[0])}\n          />\n        </LocalizationProvider>\n      </Card>\n    </ClickAwayListener>\n  );\n}\n","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useContext } from 'react';\nimport { Container, Avatar, Modal, Tooltip, Box, Link, Typography, Stack, Select, FormControl, MenuItem, Grid, Chip, Dialog, Button, DialogActions, DialogContent, useMediaQuery, Table, TableBody, TableCell, TableHead, TableRow } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\nimport { RawDatasetsMetadataContext } from '../../ContextProviders/RawDatasetsMetadataContext';\n\nimport DownloadIcon from '@mui/icons-material/Download';\nimport DataObjectIcon from '@mui/icons-material/DataObject';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport EventIcon from '@mui/icons-material/Event';\nimport PublishedWithChangesIcon from '@mui/icons-material/PublishedWithChanges';\n\nimport * as Tracking from '../../Utils/Tracking';\nimport { fetchDataFromURL } from './DatasetFetcher';\nimport DatasetCalendar from './DatasetCalendar';\n\nexport default function DatasetDownloadDialog(props) {\n  const { project } = props;\n  const rawDatasetsMetadata = useContext(RawDatasetsMetadataContext);\n  const [datasets, setDatasets] = useState();\n\n  useEffect(() => {\n    if (!project || !rawDatasetsMetadata) return;\n    setDatasets(rawDatasetsMetadata[project?.id]); // get all the dataset(s) of this project\n  }, [project, rawDatasetsMetadata]);\n\n  const theme = useTheme();\n  const smallScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  function getOwnerString(owners) {\n    if (!owners || owners.length === 0) {\n      return 'the relevant owners';\n    } else if (owners.length === 1) {\n      return owners[0];\n    } else if (owners.length === 2) {\n      return owners.join(' and ');\n    } else {\n      const lastOwner = owners.pop();\n      const oxfordCommaOwners = owners.join(', ');\n      return `${oxfordCommaOwners}, and ${lastOwner}`;\n    }\n  }\n\n  return (\n    <>\n      <Button\n        onClick={() => {\n          handleOpen();\n          Tracking.sendEventAnalytics(Tracking.Events.rawDatasetButtonClicked, {\n            project_id: project.id\n          });\n        }}\n        variant=\"contained\"\n      >\n        <DataObjectIcon sx={{ fontSize: '1rem' }} />&nbsp;Raw Dataset\n      </Button>\n\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        maxWidth=\"lg\"\n        fullWidth\n        fullScreen={smallScreen}\n        keepMounted\n      >\n        {(\n          smallScreen &&\n          <DialogActions justifyContent=\"flex-start\">\n            <Button autoFocus onClick={handleClose}>\n              <ChevronLeftIcon sx={{ fontSize: '1rem' }} />Back\n            </Button>\n          </DialogActions>\n        )}\n\n        <DialogContent sx={{\n          px: smallScreen ? 2 : 3,\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'start',\n          height: '100%'\n        }}>\n          <Chip label={project.title} size=\"small\" sx={{ mb: 1 }} />\n          <Typography variant=\"h6\" >\n            Preview and download raw dataset(s)\n          </Typography>\n\n          <DatasetSelectorAndPreviewer datasets={datasets} smallScreen={smallScreen} project={project} />\n          {\n            datasets &&\n            <Typography variant=\"caption\" sx={{ my: 3, fontStyle: 'italic' }} >\n              This dataset is provided by the CITIES Dashboard with the support of {getOwnerString(project.owners)}. Should you intend to utilize this dataset for your project, research, or publication, we kindly request that you notify us at <Link href='mailto:nyuad.cities@nyu.edu'>nyuad.cities@nyu.edu</Link> to discuss citation requirements.\n            </Typography>\n          }\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\nconst DatasetSelectorAndPreviewer = (props) => {\n  const { datasets, smallScreen, project } = props;\n  const [previewingDataset, setPreviewingDataset] = useState();\n  const [previewingDatasetId, setPreviewingDatasetId] = useState();\n\n  // Preview the first version of the first dataset initially\n  useEffect(() => {\n    if (datasets?.length > 0) {\n      setPreviewingDataset(datasets[0]?.versions[0]);\n      setPreviewingDatasetId(datasets[0]?.id);\n      fetchDataFromURL(datasets[0]?.versions[0]?.rawLink, 'csv').then((data) => {\n        setPreviewingDataset({ ...datasets[0]?.versions[0], fetchedDataset: data });\n      });\n    }\n  }, [datasets]);\n\n  return (\n    <Grid container justifyContent=\"center\" alignItems=\"start\" spacing={3}>\n      <Grid item sm={12} md={6}>\n        <DatasetsTable\n          datasets={datasets}\n          smallScreen={smallScreen}\n          previewingDataset={previewingDataset}\n          setPreviewingDataset={setPreviewingDataset}\n          previewingDatasetId={previewingDatasetId}\n          setPreviewingDatasetId={setPreviewingDatasetId}\n        />\n      </Grid>\n      <Grid item sm={12} md={6} maxWidth={smallScreen ? '100%' : 'unset'} sx={{ mt: 1 }}>\n        <PreviewDataset\n          previewingDataset={previewingDataset}\n          previewingDatasetId={previewingDatasetId}\n          project={project}\n          smallScreen={smallScreen}\n        />\n      </Grid>\n    </Grid>\n  )\n};\n\nconst DatasetsTable = (props) => {\n  const { datasets, smallScreen, previewingDataset, setPreviewingDataset, previewingDatasetId, setPreviewingDatasetId } = props;\n  return (\n    <Table\n      size=\"small\"\n      sx={{\n        tableLayout: 'fixed',\n        '& td, div, .MuiMenuItem-root': {\n          fontSize: smallScreen ? '0.625rem' : '0.8rem'\n        }\n      }}\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell sx={{ pl: 1 }}>\n            Dataset\n          </TableCell>\n          <TableCell sx={{ width: smallScreen ? '9.5rem' : '11rem' }}>Version</TableCell>\n          <TableCell sx={{ width: smallScreen ? '5rem' : '6rem' }}>\n            Size\n          </TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {datasets?.map((dataset) => (\n          <Dataset\n            smallScreen={smallScreen}\n            dataset={dataset}\n            previewingDataset={previewingDataset}\n            setPreviewingDataset={setPreviewingDataset}\n            isPreviewing={dataset.id === previewingDatasetId}\n            setPreviewingDatasetId={setPreviewingDatasetId}\n          />\n        ))}\n      </TableBody>\n    </Table>\n  )\n}\n\nconst Dataset = (props) => {\n  const { smallScreen, dataset, setPreviewingDataset, isPreviewing, previewingDatasetId, setPreviewingDatasetId } = props;\n\n  const [fetchedDatasets, setFetchedDatasets] = useState({});\n  const NUM_RECENT_VERSIONS = 3;\n\n  const latestVersionOfThisDataset = dataset?.versions[0] || {};\n  const [showCalendar, setShowCalendar] = useState(false);\n  const [selectedVersionOfThisDataset, setSelectedVersionOfThisDataset] = useState(latestVersionOfThisDataset);\n\n  // only show NUM_RECENT_VERSIONS rows in Dropdown\n  const visibleVersions = dataset?.versions.slice(0, NUM_RECENT_VERSIONS);\n  // if currently selected version is not in first NUM_RECENT_VERSION rows,\n  // add it to the list\n  if (!visibleVersions.find((version) => version == selectedVersionOfThisDataset)) {\n    visibleVersions.push({ ...selectedVersionOfThisDataset, isOlderVersion: true });\n  }\n\n  // only show Calendar option if there are more than NUM_RECENT_VERSIONS versions\n  const shouldShowCalendar = dataset?.versions.length > NUM_RECENT_VERSIONS;\n\n  const handleVersionChange = (event) => {\n    const selectedVal = event.target.value;\n    if (selectedVal === 'Calendar') {\n      setShowCalendar(true);\n      return;\n    }\n    // Loop through the array (allVersionsOfThisDataset) to find the one with the selected version\n    const selectedVersion = dataset?.versions.find(aDatasetVersion => {\n      return aDatasetVersion.version === selectedVal;\n    });\n    setSelectedVersionOfThisDataset(selectedVersion);\n    setPreviewingDatasetId(dataset.id);\n    setPreviewingDataset(selectedVersion);\n\n    fetchThisDataset(selectedVersion);\n  };\n\n  const handleCalendarChange = (event) => {\n    // close calendar after selecting\n    setShowCalendar(false)\n    if (event === 'close') { // click outside of card\n      return\n    }\n\n    handleVersionChange({ target: { value: event } });\n  }\n\n  const fetchThisDataset = (selectedVersion) => {\n    // If this dataset version hasn't been fetched yet,\n    // fetch it and append it into the object fetchedDatasets\n    if (!fetchedDatasets[selectedVersion.version]) {\n      fetchDataFromURL(selectedVersion.rawLink, 'csv').then((data) => {\n        const selectedVersionWithFetchedDataset = { ...selectedVersion, fetchedDataset: data };\n        setPreviewingDataset(selectedVersionWithFetchedDataset);\n        setFetchedDatasets({\n          ...fetchedDatasets,\n          [selectedVersionWithFetchedDataset.version]: selectedVersionWithFetchedDataset\n        });\n      });\n    }\n    // If it has been fetched before, simply get it from memory \n    else {\n      setPreviewingDataset(fetchedDatasets[selectedVersion.version]);\n    }\n  }\n\n  const setThisDatasetToPreview = () => {\n    if (previewingDatasetId !== dataset.id) {\n      setPreviewingDatasetId(dataset.id);\n      setPreviewingDataset(selectedVersionOfThisDataset);\n      fetchThisDataset(selectedVersionOfThisDataset);\n    }\n  }\n\n  const theme = useTheme();\n\n  const formatFileSize = (sizeInBytes) => {\n    if (!sizeInBytes) return;\n\n    if (sizeInBytes < 1024 * 1024) {\n      return (sizeInBytes / 1024).toFixed(1) + \" KB\";\n    } else {\n      return (sizeInBytes / (1024 * 1024)).toFixed(1) + \" MB\";\n    }\n  }\n\n  return (\n    <>\n      <TableRow key={dataset.id}>\n        <TableCell\n          sx={{\n            pl: 1,\n            cursor: 'pointer',\n            background: isPreviewing && theme.palette.background.NYUpurpleLight\n          }}\n          onClick={setThisDatasetToPreview}>\n          {selectedVersionOfThisDataset?.name}\n        </TableCell>\n\n        <TableCell sx={{ position: 'relative', background: isPreviewing && theme.palette.background.NYUpurpleLight }}>\n          {showCalendar &&\n            (smallScreen ? <Modal\n              open={showCalendar}\n              sx={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center'\n              }}\n            >\n              <DatasetCalendar\n                onChange={handleCalendarChange}\n                smallScreen={smallScreen}\n                versions={dataset?.versions}\n              />\n            </Modal>\n              : <DatasetCalendar\n                onChange={handleCalendarChange}\n                versions={dataset?.versions}\n              />)}\n          <FormControl size=\"small\">\n            <Select\n              value={selectedVersionOfThisDataset?.version}\n              onClick={() => {\n                if (dataset.versions.length <= 1) setThisDatasetToPreview();\n              }}\n              onChange={handleVersionChange}\n              variant=\"standard\"\n              MenuProps={{ disablePortal: true }}\n            >\n              {visibleVersions.map((aDatasetVersion, index) => (\n                <MenuItem\n                  key={aDatasetVersion.version}\n                  value={aDatasetVersion.version}\n                  sx={[\n                    (index === visibleVersions.length - 1) && {\n                      mb: -0.75\n                    },\n                    aDatasetVersion.isOlderVersion && {\n                      marginTop: '1rem',\n                      '&::before': {\n                        content: '\"\"',\n                        borderTop: `2px dotted ${theme.palette.text.secondary}`,\n                        width: '1rem',\n                        height: '1rem',\n                        position: 'absolute',\n                        top: 0,\n                        left: '50%',\n                        transform: 'translate(-50%, -50%)'\n                      }\n                    }\n                  ]}\n                >\n                  <Stack direction=\"row\" alignItems=\"center\">\n                    {aDatasetVersion.version}\n                    { /* 'LATEST' chip for latest version */}\n                    {aDatasetVersion === latestVersionOfThisDataset &&\n                      <Tooltip title=\"Latest version\" enterDelay={0} leaveDelay={200}>\n                        <Avatar sx={{\n                          ml: 0.5,\n                          width: '1rem',\n                          height: '1rem',\n                          background: theme.palette.success.main\n                        }}>\n                          <PublishedWithChangesIcon sx={{ width: '0.8rem', height: '0.8rem' }} />\n                        </Avatar>\n                      </Tooltip>\n                    }\n                  </Stack>\n                </MenuItem>\n              ))}\n\n              {shouldShowCalendar && <MenuItem\n                key=\"Calendar\"\n                value=\"Calendar\"\n                sx={{ pt: 1, mt: 1, mb: -0.75, borderTop: '0.5px solid' }}\n              >\n                <Stack direction=\"row\" alignItems=\"center\">\n                  Older Versions\n                  <EventIcon fontSize='small' sx={{ ml: 0.5 }} />\n                </Stack>\n              </MenuItem>\n              }\n            </Select>\n          </FormControl>\n        </TableCell>\n        <TableCell sx={{ background: isPreviewing && theme.palette.background.NYUpurpleLight }}>\n          {formatFileSize(selectedVersionOfThisDataset?.sizeInBytes)}\n        </TableCell>\n      </TableRow >\n    </>\n  )\n}\n\nconst PreviewDataset = (props) => {\n  const { previewingDataset, previewingDatasetId, project, smallScreen } = props;\n  const downloadDatasetName = `[${project.id}] ${previewingDataset?.name}-${previewingDataset?.version}.csv`;\n\n  const theme = useTheme();\n\n  const downloadPreviewingDataset = () => {\n    if (!previewingDataset?.fetchedDataset) return;\n\n    const blob = new Blob([previewingDataset?.fetchedDataset], { type: 'application/octet-stream' }); // create a Blob with the raw data\n    const url = URL.createObjectURL(blob); // create a download link for the Blob\n    const downloadLink = document.createElement('a');\n    downloadLink.href = url;\n    downloadLink.download = downloadDatasetName;\n    document.body.appendChild(downloadLink);\n    downloadLink.click(); // simulate a click on the download link\n    URL.revokeObjectURL(url); // clean up by revoking the object URL\n    document.body.removeChild(downloadLink);\n  };\n\n  const [formattedData, setFormattedData] = useState('');\n  const [rowIndices, setRowIndices] = useState('');\n  const numFirstLastRowsToPreview = 5;\n\n  useEffect(() => {\n    if (!previewingDataset?.fetchedDataset) return;\n\n    const csvData = previewingDataset?.fetchedDataset;\n    const lines = csvData.split('\\n');\n    const numRows = lines.length;\n\n    if (numRows <= numFirstLastRowsToPreview * 2) {\n      setFormattedData(csvData);\n      setRowIndices(Array.from({ length: numRows }, (_, index) => index + 1).join('\\n')); // +1 because rowNumber starts at 1 while index starts at 0\n    } else {\n\n      const firstRows = lines.slice(0, numFirstLastRowsToPreview);\n      const lastRows = lines.slice(numRows - numFirstLastRowsToPreview);\n\n      const numOfHiddenRows = numRows - 2 * numFirstLastRowsToPreview;\n\n      const middleRow = [`... [${numOfHiddenRows} rows hidden] ...`];\n\n      setFormattedData(firstRows.concat(middleRow).concat(lastRows).join('\\n'));\n      setRowIndices(\n        Array.from({\n          length: numFirstLastRowsToPreview * 2 + 1 // +1 to account for the middleRow\n        },\n          (_, index) => {\n            const rowIndex = index + 1; // +1 because rowNumber starts at 1 while index starts at 0\n            // Indices for the first rows\n            if (rowIndex < numFirstLastRowsToPreview + 1) {\n              return rowIndex;\n            }\n            // No index for the middle row\n            else if (rowIndex == numFirstLastRowsToPreview + 1) {\n              return '';\n            }\n            // Indices for the last rows\n            else {\n              return numOfHiddenRows + rowIndex - 1;\n            }\n          })\n          .join('\\n'));\n    }\n\n  }, [previewingDataset]);\n\n  return (\n    <Stack spacing={1}>\n      <Box sx={{ '& *': { fontFamily: \"monospace !important\" } }}>\n        <Stack direction=\"row\">\n          <Typography variant='body2' gutterBottom fontWeight={500}>\n            {previewingDataset ?\n              `Previewing: ${previewingDataset.name} (${previewingDataset?.version})`\n              : 'Not previewing any dataset'}\n          </Typography>\n        </Stack>\n\n        <Box\n          component=\"pre\"\n          sx={{\n            overflowX: 'auto',\n            color: theme.palette.text.secondary,\n            backgroundColor: theme.palette.customBackground,\n            p: 2,\n            pt: 1.5,\n            borderRadius: theme.spacing(1),\n            borderTopLeftRadius: 0,\n            minHeight: \"5rem\",\n            width: smallScreen ? '100%' : 'unset',\n            marginTop: 0\n          }}\n        >\n          <Stack direction=\"row\" sx={{ fontSize: smallScreen ? '0.625rem !important' : '0.8rem !important' }}>\n            <Box sx={{ mr: 2, userSelect: 'none' }}>\n              {rowIndices}\n            </Box>\n            <Box>\n              {formattedData}\n            </Box>\n          </Stack>\n        </Box>\n      </Box>\n      <Box textAlign=\"center\" >\n        <Button\n          variant=\"contained\"\n          sx={{\n            textTransform: 'none',\n            textAlign: 'left',\n            lineHeight: 1.1,\n            px: 1.5,\n            py: 1\n          }}\n          onClick={() => {\n            downloadPreviewingDataset();\n            Tracking.sendEventAnalytics(Tracking.Events.rawDatasetDownloaded, {\n              project_id: project.id,\n              dataset_id: previewingDatasetId,\n              dataset_name: previewingDataset.name,\n              dataset_version: previewingDataset.version\n            });\n          }}\n          disabled={!previewingDataset}\n        >\n          <DownloadIcon sx={{ fontSize: '1.25rem', mr: 0.5 }} />\n          {previewingDataset ? downloadDatasetName : \"No dataset available to download\"}\n        </Button>\n      </Box>\n    </Stack >\n  )\n}","// disable eslint for this file\n/* eslint-disable */\nimport { Button, Box } from \"@mui/material\";\nimport { Link } from 'react-router-dom';\nimport TvIcon from '@mui/icons-material/Tv';\nimport HoverMenu from 'material-ui-popup-state/HoverMenu';\nimport PopupState, { bindHover, bindFocus, bindMenu } from 'material-ui-popup-state';\nimport MenuItemAsNavLink from \"./Header/MenuItemAsNavLink\";\nimport NavLinkBehavior from \"./Header/NavLinkBehavior\";\n\nconst ScreenDialog = ({ schoolID, screens }) => {\n  if (!Array.isArray(screens)) return null;\n\n  if (screens.length <= 1) return <LinkButtonToScreen url={`/screen/${schoolID}`} />\n  else return <DialogToScreen schoolID={schoolID} screens={screens} />\n};\n\nconst DialogToScreen = ({ schoolID, screens }) => {\n  return (\n    <PopupState variant=\"popover\" popupId=\"tv-screens-list\">\n      {(popupState) => (\n        <>\n          <Button\n            variant=\"contained\"\n            {...bindHover(popupState)}\n            {...bindFocus(popupState)}\n          >\n            <TvIcon sx={{ fontSize: '1rem' }} />&nbsp;TV Screens List\n          </Button>\n          <HoverMenu\n            {...bindMenu(popupState)}\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n            onClick={popupState.close}\n          >\n            {\n              screens.map((screen, index) => (\n                <MenuItemAsNavLink\n                  key={index}\n                  behavior={NavLinkBehavior.toNewPage}\n                  to={`/screen/${schoolID}/${screen.screen_name}`}\n                  label={screen.location_long}\n                  sx={{ fontSize: '0.8rem' }}\n                />\n              ))}\n          </HoverMenu>\n        </>\n      )}\n    </PopupState>\n  )\n}\n\nconst LinkButtonToScreen = ({ url }) => {\n  return (\n    <Button\n      variant=\"contained\"\n      component={Link}\n      to={url}\n    >\n      <TvIcon sx={{ fontSize: '1rem' }} />&nbsp;TV Screen\n    </Button>\n  )\n}\n\nexport default ScreenDialog;","// disable eslint for this file\n/* eslint-disable */\n\nimport { useState } from \"react\";\nimport { Menu, MenuItem, MenuList, FormControl, Select, InputLabel } from \"@mui/material\";\nimport { CustomChip } from \"../Project/Project\";\n\nimport PlaceIcon from '@mui/icons-material/Place';\n\nexport const SchoolSelector = (props) => {\n  const { currentSchoolID, currentSchoolName, allowedSchoolsData, fetchDashboardData } = props;\n  if (!Array.isArray(allowedSchoolsData) || allowedSchoolsData.length <= 1)\n    return (\n      <CustomChip\n        icon={<PlaceIcon />}\n        label={currentSchoolName}\n        tooltipTitle={\"School\"}\n      />\n    );\n\n  const [schoolID, setSchoolID] = useState('');\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleItemSelect = (schoolID) => () => {\n    if (currentSchoolID !== schoolID) {\n      setSchoolID(schoolID);\n      fetchDashboardData(schoolID);\n    }\n    handleClose();\n  };\n\n  return (\n    <>\n      <CustomChip\n        icon={<PlaceIcon />}\n        label={currentSchoolName}\n        tooltipTitle={\"Click to Select School\"}\n        clickable\n        onClick={handleClick}\n        aria-controls={open ? 'basic-menu' : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={open ? 'true' : undefined}\n      />\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n        MenuListProps={{\n          'aria-labelledby': 'basic-button',\n        }}\n      >\n        <MenuList dense>\n          {allowedSchoolsData.map((school, index) => (\n            <MenuItem\n              key={index}\n              onClick={handleItemSelect(school.school_id)}\n            >\n              {school.name}\n            </MenuItem>\n          ))}\n        </MenuList>\n      </Menu>\n    </>\n  );\n};\n\n","const AirQualityExplanation = {\n  title: \"Explanation of the US Air Quality Index (AQI)\",\n  subtitle: \"CITIESair uses the <a href='https://www.airnow.gov/aqi/aqi-basics/'>Air Quality Index (AQI)</a> developed by the United States Environmental Protection Agency (EPA) to effectively communicate different levels of PM2.5 air pollution. To calculate the AQI from the raw measurement of PM2.5 concentration (µg/m³), different breakpoints and piecewise linear function are utilized (read more <a href='https://en.wikipedia.org/wiki/Air_quality_index#United_States'>here</a>). Higher AQI values correspond to poorer air quality and greater heath risks to humans.<br><br>The US EPA sets thresholds for PM2.5 concentration: <sup>[1]</sup><ul><li><b>Annual average</b>: 12.0 µg/m³, corresponding to US AQI <b>50</b></li><li><b>24-hour average</b>: 35.0 µg/m³, corresponding to US AQI <b>100</b></li></ul>In 2021, the World's Heath Organization (WHO) proposed a new guideline for PM2.5<sup>[2]</sup> with stricter thresholds than those of the US EPA:<ul><li><b>Annual average</b>: 5.0 µg/m³, corresponding to US AQI <b>21</b></li><li><b>24-hour average</b>: 15.0 µg/m³, corresponding to US AQI <b>56</b></li></ul>\",\n  reference: \"[1] \\\"National Ambient Air Quality Standards (NAAQS) for PM.\\\" EPA, Environmental Protection Agency, https://www.epa.gov/pm-pollution/national-ambient-air-quality-standards-naaqs-pm.<br>[2] World Health Organization. \\\"WHO global air quality guidelines: particulate matter (PM2. 5 and PM10), ozone, nitrogen dioxide, sulfur dioxide and carbon monoxide: executive summary.\\\" (2021).\",\n}\n\nexport default AirQualityExplanation;","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useContext } from 'react';\nimport { LinkContext } from '../../ContextProviders/LinkContext';\nimport { TabContext } from '../../ContextProviders/TabContext';\nimport parse from 'html-react-parser';\nimport ChartComponent from '../../Graphs/ChartComponent';\nimport UppercaseTitle from '../../Components/UppercaseTitle';\nimport { Box, Typography, Container, Divider, Chip, Grid, Tooltip, Stack } from '@mui/material';\n\nimport { useTheme } from '@mui/material/styles';\n\nimport ThemePreferences from '../../Themes/ThemePreferences';\n\nimport AirQualityIndexLegendQuickGlance from '../../Components/AirQualityHelper';\n\nimport jsonData from '../../section_data.json';\n\nimport PersonIcon from '@mui/icons-material/Person';\nimport EmailIcon from '@mui/icons-material/Email';\nimport PublishedWithChangesIcon from '@mui/icons-material/PublishedWithChanges';\nimport BarChartIcon from '@mui/icons-material/BarChart';\n\nimport { replacePlainHTMLWithMuiComponents } from '../../Utils/Utils';\nimport DatasetDownloadDialog from '../../Components/DatasetDownload/DatasetDownloadDialog';\nimport ScreenDialog from '../../Components/ScreenDialog';\n\nimport { scrollToSection } from '../../Components/Header/MenuItemAsNavLink';\nimport FullWidthBox from '../../Components/FullWidthBox';\n\nimport * as Tracking from '../../Utils/Tracking';\n\nimport ChartSubstituteComponentLoader from '../../Graphs/ChartSubstituteComponents/ChartSubstituteComponentLoader';\n\nimport CurrentAQIGrid from '../../Components/CurrentAQIGrid';\nimport { SchoolSelector } from \"../Dashboard/SchoolSelector\";\n\nimport AirQualityIndexTable from '../../Graphs/ChartSubstituteComponents/AirQualityIndexTable';\nimport ExpandableSection from './ExpandableSection';\nimport AirQualityExplanation from '../../Utils/AirQualityExplanation';\n\n// Custom Chip component to display metadata\nexport const CustomChip = (props) => {\n  const { tooltipTitle, ...otherProps } = props;\n  return (\n    <Tooltip title={tooltipTitle} enterDelay={0} leaveDelay={200}>\n      <Chip\n        size=\"small\"\n        {...otherProps}\n      />\n    </Tooltip>\n  );\n}\n\nconst Project = ({ themePreference, currentSchoolData, dashboardData, allowedSchoolsData, fetchDashboardData, temperatureUnitPreference }) => {\n  const [_, __, chartsTitlesList, setChartsTitlesList] = useContext(LinkContext);\n\n  const [loading, setLoading] = useState(false);\n  const [tab, setTab] = useContext(TabContext);\n\n  let lastUpdate;\n\n  // Update the chart title list for quick navigation\n  useEffect(() => {\n    if (!dashboardData?.charts) return;\n\n    const chartsTitles = dashboardData?.charts.map((element, index) => ({ chartTitle: element.title, chartID: `chart-${index + 1}` }));\n    setChartsTitlesList(chartsTitles);\n  }, [dashboardData]);\n\n  const theme = useTheme();\n\n  return (\n    <>\n      <Box width=\"100%\">\n        <AirQualityIndexLegendQuickGlance themePreference={themePreference} />\n\n        <FullWidthBox backgroundColor='customAlternateBackground'>\n          <Container sx={{ pt: 5, pb: 3 }}>\n            <UppercaseTitle text={dashboardData?.title} />\n\n            <Grid container spacing={1} sx={{ mt: -3, pb: 3 }}>\n              <Grid item>\n                <SchoolSelector\n                  currentSchoolID={currentSchoolData?.school_id}\n                  currentSchoolName={currentSchoolData?.name}\n                  allowedSchoolsData={allowedSchoolsData}\n                  fetchDashboardData={fetchDashboardData}\n                />\n              </Grid>\n\n              <Grid item>\n                <CustomChip\n                  icon={<PersonIcon />}\n                  label={currentSchoolData?.contactPerson}\n                  tooltipTitle=\"Contact Person\"\n                />\n              </Grid>\n\n              <Grid item>\n                <CustomChip\n                  icon={<EmailIcon />}\n                  label={currentSchoolData?.contactEmail}\n                  tooltipTitle=\"Contact Email\"\n                  component=\"a\"\n                  href={`mailto:${currentSchoolData?.contactEmail}`}\n                  clickable\n                />\n              </Grid>\n\n              <Grid item>\n                <CustomChip\n                  icon={<BarChartIcon />}\n                  label={`${dashboardData?.charts?.length} Chart${dashboardData?.charts?.length > 1 ? \"s\" : \"\"}`}\n                  tooltipTitle=\"Number of Charts\"\n                  onClick={() => {\n                    scrollToSection(jsonData.charts.id);\n                    // Tracking.sendEventAnalytics(Tracking.Events.internalNavigation,\n                    //   {\n                    //     destination_id: jsonData.charts.id,\n                    //     destination_label: jsonData.dashboardData?.toString(),\n                    //     origin_id: 'chip'\n                    //   })\n                  }}\n                />\n              </Grid>\n\n              {\n                lastUpdate &&\n                <Grid item>\n                  <CustomChip\n                    icon={<PublishedWithChangesIcon />}\n                    label={`Last update: ${lastUpdate}`}\n                    tooltipTitle=\"Last Update\" />\n                </Grid>\n              }\n            </Grid>\n\n            <Box textAlign=\"center\" sx={{ mb: 2 }}>\n              <CurrentAQIGrid\n                currentSensorsData={currentSchoolData?.sensors}\n                isScreen={false}\n                temperatureUnitPreference={temperatureUnitPreference}\n              />\n            </Box>\n            <Typography\n              component=\"div\"\n              variant=\"body1\"\n              color=\"text.secondary\"\n              sx={{\n                textAlign: 'justify', pb: 2, mb: 0, \"& table *\": {\n                  color: `${theme.palette.text.secondary}`\n                }\n              }}\n              gutterBottom\n            >\n              {parse(dashboardData?.description || '', {\n                replace: replacePlainHTMLWithMuiComponents,\n              })}\n            </Typography>\n            <Stack direction=\"row\" spacing={2}>\n              <ScreenDialog schoolID={currentSchoolData?.school_id} screens={currentSchoolData?.screens} />\n\n              {/* <DatasetDownloadDialog project={project} /> */}\n\n            </Stack>\n            <ExpandableSection\n              title={AirQualityExplanation.title}\n              content={(\n                <>\n                  <AirQualityIndexTable themePreference={themePreference} />\n                  <Typography\n                    component=\"div\"\n                    variant=\"body1\"\n                    color=\"text.secondary\"\n                    sx={{ mt: 2 }}\n                  >\n                    {parse(AirQualityExplanation.subtitle, {\n                      replace: replacePlainHTMLWithMuiComponents,\n                    })}\n                  </Typography>\n                  <ExpandableSection\n                    title={\"Reference\"}\n                    content={(\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        {parse(AirQualityExplanation.reference, {\n                          replace: replacePlainHTMLWithMuiComponents,\n                        })}\n                      </Typography>\n                    )}\n                  />\n                </>\n              )}\n            />\n\n          </Container>\n        </FullWidthBox>\n\n        <Box id={jsonData.charts.id}>\n          {dashboardData?.charts?.map((element, index) => (\n            <FullWidthBox\n              key={index}\n              backgroundColor={\n                index % 2 != 0 && 'customAlternateBackground'\n              }\n            >\n              <Container\n                sx={{ pt: 4, pb: 4 }}\n                height=\"auto\"\n                className={themePreference === ThemePreferences.dark ? 'dark' : ''}\n                id={`chart-${index + 1}`}\n              >\n                <Typography variant=\"h6\" color=\"text.primary\">\n                  {index + 1}. {element.title}\n                </Typography>\n\n                {/* Either display the regular ChartComponent, or substitute with a customized component in ../../Graphs/ChartSubstituteComponents/ (if specified) */}\n                {element.chartSubstituteComponentName ?\n                  <ChartSubstituteComponentLoader chartSubstituteComponentName={element.chartSubstituteComponentName} />\n                  : (\n                    <ChartComponent\n                      chartData={{\n                        chartIndex: index,\n                        ...element,\n                      }}\n                    />\n                  )}\n\n                <Box sx={{ my: 3 }}>\n                  <Typography\n                    component=\"div\"\n                    variant=\"body1\"\n                    color=\"text.secondary\"\n                  >\n                    {element.subtitle && parse(element.subtitle, {\n                      replace: replacePlainHTMLWithMuiComponents,\n                    })}\n                    {Object.keys(tab)[index] == index &&\n                      element.subcharts &&\n                      element.subcharts[Object.values(tab)[index]]\n                        .subchartSubtitle &&\n                      parse(\n                        element.subcharts[Object.values(tab)[index]]\n                          .subchartSubtitle, {\n                        replace: replacePlainHTMLWithMuiComponents,\n                      }\n                      )}\n                  </Typography>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    {element.reference && parse(element.reference, {\n                      replace: replacePlainHTMLWithMuiComponents,\n                    })}\n                    {Object.keys(tab)[index] == index &&\n                      element.subcharts &&\n                      element.subcharts[Object.values(tab)[index]].reference &&\n                      parse(\n                        element.subcharts[Object.values(tab)[index]].reference, {\n                        replace: replacePlainHTMLWithMuiComponents,\n                      }\n                      )}\n                  </Typography>\n                </Box>\n              </Container>\n            </FullWidthBox>\n          ))}\n        </Box>\n\n        <Divider />\n      </Box>\n    </>\n  );\n};\n\nexport default Project;\n","// disable eslint for this file\n/* eslint-disable */\n\nimport { useState, useEffect, useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { fetchDataFromURL } from \"../../Components/DatasetDownload/DatasetFetcher\";\nimport Project from \"../Project/Project\";\nimport { processCurrentSensorsData } from \"../../Utils/ApiUtils\";\nimport { LinkContext } from \"../../ContextProviders/LinkContext\";\n\nimport { UserContext } from \"../../ContextProviders/UserContext\";\n\nconst Dashboard = ({ themePreference, temperatureUnitPreference, title }) => {\n  // Update the page's title\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n\n  const [_, setCurrentPage, __, ___] = useContext(LinkContext);\n  useEffect(() => {\n    setCurrentPage('dashboard');\n  }, []);\n\n  const { user } = useContext(UserContext);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (user.checkedAuthentication === true && user.authenticated === false) {\n      navigate('/login');\n    }\n  }, [user])\n\n  const [dashboardData, setDashboardData] = useState({});\n  const [currentSchoolData, setCurrentSchoolData] = useState({\n    school_id: null,\n    name: null,\n    contactPerson: null,\n    contactEmail: null,\n    sensors: null\n  });\n  const [allowedSchoolsData, setAllowedSchoolsData] = useState([]);\n\n  const fetchDashboardData = (optionalSchoolID) => {\n    let url;\n    if (optionalSchoolID) url = `https://api.citiesair.com/dashboard/${optionalSchoolID}`;\n    else url = 'https://api.citiesair.com/dashboard';\n\n    fetchDataFromURL(url, 'json', true)\n      .then(data => {\n        if (data.currentSchool?.sensors) {\n          const processedCurrentSensorData = processCurrentSensorsData(data.currentSchool?.sensors);\n          setCurrentSchoolData({\n            ...data.currentSchool, sensors: processedCurrentSensorData\n          });\n        }\n        else {\n          setCurrentSchoolData(data.currentSchool);\n        }\n\n        setDashboardData(data.dashboard);\n        setAllowedSchoolsData(data.allowedSchools || []);\n      })\n  }\n\n  useEffect(() => {\n    fetchDashboardData();\n  }, []);\n\n  return (\n    <>\n      <Project\n        themePreference={themePreference}\n        currentSchoolData={currentSchoolData}\n        dashboardData={dashboardData}\n        allowedSchoolsData={allowedSchoolsData}\n        fetchDashboardData={fetchDashboardData}\n        temperatureUnitPreference={temperatureUnitPreference}\n      />\n    </>\n  )\n};\n\nexport default Dashboard;","var map = {\n\t\"./AirQualityIndexTable\": 692,\n\t\"./AirQualityIndexTable.jsx\": 692,\n\t\"./ChartSubstituteComponentLoader\": 5276,\n\t\"./ChartSubstituteComponentLoader.jsx\": 5276\n};\n\nfunction webpackAsyncContext(req) {\n\treturn Promise.resolve().then(function() {\n\t\tif(!__webpack_require__.o(map, req)) {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t}\n\n\t\tvar id = map[req];\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 6598;\nmodule.exports = webpackAsyncContext;"],"names":["SELECT_ALL","SeriesSelector","props","itemsFromChart","items","selectorID","allowMultiple","onSeriesSelection","theme","useTheme","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","overflow","background","palette","customAlternateBackground","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","useState","setItems","selectAll","setSelectAll","useEffect","every","item","selected","handleChange","event","value","target","includes","updatedItems","map","index","selectedItems","filter","label","some","selectedItem","handleItemToggle","existingItem","Stack","spacing","direction","alignItems","FormControl","sx","breakpoints","down","width","mt","borderRadius","size","Select","labelId","id","multiple","onChange","renderValue","Visibility","fontSize","color","text","secondary","Typography","variant","length","renderedLabel","MenuItem","disabled","backgroundColor","Checkbox","checked","onClick","p","transform","Radio","borderTop","borderColor","position","bottom","zIndex","marginBottom","justifyContent","fontWeight","pl","Switch","Grid","container","display","Chip","onDelete","ChartControlType","CategoryFilter","stackDirection","DateRangeFilter","ChartRangeFilter","NumberRangeFilter","hideAnnotations","stem","textStyle","opacity","boxStyle","returnResponsiveFontSizeInPixels","isPortrait","isSmaller","returnChartControlUI","chartControl","mainChartData","mainChartOptions","subchartIndex","chartControlUI","options","ui","snapToData","controlType","chartType","chartView","columns","subcharts","chartOptions","hAxis","textPosition","chart","axisText","vAxis","title","annotations","legend","calculateCalendarDimensions","cellSizeMin","cellSizeMax","cellSize","Math","min","max","window","innerWidth","chartWidth","yearLabelFontSize","styled","Box","maxWidth","height","padding","tooltip","margin","primary","marginTop","verticalAlign","paper","border","paddingTop","paddingBottom","paddingLeft","paddingRight","borderWidth","top","left","right","main","stroke","strokeWidth","cursor","SubChart","chartData","windowSize","isHomepage","chartSubstituteComponentName","ChartSubstituteComponentLoader","className","customClassName","useContext","GoogleContext","google","setDataTable","chartWrapper","setChartWrapper","setDashboardWrapper","controlWrapper","setControlWrapper","isFirstRender","setIsFirstRender","allInitialColumns","setAllInitialColumns","dataColumns","setDataColumns","setInitialVAxisRage","random","toString","substr","chartID","chartTotalHeight","setChartTotalHeight","axisTitleTextStyle","italic","bold","axisTitle","axisTextStyle","curveType","crosshair","orientation","trigger","fill","chartArea","portrait","landscape","isHtml","showColorCode","alignment","scrollArrows","activeColor","inactiveColor","pagingTextStyle","format","viewWindow","slantedText","slantedTextAngle","colors","optionsColors","series","Object","values","forEach","_serie","serie","trendlines","_item","colorAxis","colorAxisFirstColor","multiColor","colorIndex","NYUpurple","aqiColorAxis","titleTextStyle","gridlines","minorGridlines","count","highContrast","contrastText","thickness","rx","shape","ry","annotationBoxFill","fillOpacity","seriesSelector","pointSize","enableInteractivity","viewWindowMode","returnGenericOptions","existingOptions","calendarDimensions","calendar","yearLabel","noDataPattern","returnCalendarChartOptions","chartControlOptions","hasChartControl","control","cleanupTouchEventListener","touchHandler","first","changedTouches","type","simulatedEvent","MouseEvent","bubbles","cancelable","view","detail","screenX","screenY","clientX","clientY","button","relatedTarget","dispatchEvent","preventDefault","controlDOM","document","querySelector","touchEvent","addEventListener","capture","removeEventListener","addTouchEventListenerForChartControl","handleSeriesSelection","setOptions","draw","method","setInitialColumnsColors","col","seriesIndex","serieAttribute","getInitialVAxisRange","vAxisMin","vAxisMax","dataTable","range","getColumnRange","sourceColumn","isNaN","newDataColumns","_chartWrapper","hiddenSeriesObject","visibleInLegend","newViewColumns","push","dataColumn","i","indexInAllInitialColumns","role","setView","newOptions","selectedSeriesCount","dataArray","thisDataTable","visualization","arrayToDataTable","reconstructedColumns","evaluatedColumns","column","calc","calcFunction","Function","reconstructFunctionFromJSONstring","thisChartWrapper","ChartWrapper","undefined","containerId","thisDashboardWrapper","Dashboard","getElementById","events","addListener","onChartReady","thisControlWrapper","ControlWrapper","bind","initColumns","initialView","getView","viewFromDataTable","DataView","shouldAssignDomainRoleToFistColumn","dataSeriesIndex","getColumnLabel","initialVAxisRange","getInitialColumns","renderedHeight","getBBox","minHeight","LoadingAnimation","renderChart","ChartStyleWrapper","mode","overflowX","overflowY","scrollbarGutter","StyledTabs","Tabs","chartMaxHeight","passedChartData","passedChartHeight","chartHeight","isSmallWidth","useMediaQuery","matchMedia","matches","setIsPortrait","innerHeight","setWindowSize","indexValue","setIndexValue","timeoutID","handleWindowResize","clearTimeout","setTimeout","__","newValue","element","Tab","subchartTitle","transition","pointerEvents","StyledTable","Table","isTiny","minWidth","lineHeight","hideAQIDescription","themePreference","pr","align","AQIdatabase","ThemePreferences","lightThemeColor","darkThemeColor","category","aqiUS","low","high","rawPM2_5","description","parse","healthSuggestions","outdoors","replace","replacePlainHTMLWithMuiComponents","shouldRender","ceil","ticks","isStacked","bar","groupWidth","renderAQIchart","Suspense","fallback","ChartSubstituteComponent","lazy","AirQualityIndexLegendQuickGlance","anchorEl","setAnchorEl","handlePopperOpen","currentTarget","Tracking","handlePopperClose","open","Boolean","FadeInButtonForSpeedDial","distanceFromBottomOfWindow","Fab","onMouseEnter","onMouseLeave","isMobile","Air","Popper","placement","onClose","keepMounted","disableRestoreFocus","TransitionProps","Fade","timeout","Paper","elevation","py","mb","mx","AirQualityIndexTable","PickersDay","content","DialogToScreen","schoolID","screens","popupId","popupState","bindHover","bindFocus","Tv","HoverMenu","bindMenu","close","screen","MenuItemAsNavLink","behavior","NavLinkBehavior","to","screen_name","location_long","LinkButtonToScreen","url","component","Link","Array","isArray","SchoolSelector","currentSchoolID","currentSchoolName","allowedSchoolsData","fetchDashboardData","CustomChip","icon","Place","tooltipTitle","setSchoolID","handleClose","handleItemSelect","clickable","Menu","MenuListProps","MenuList","dense","school","school_id","name","subtitle","reference","otherProps","enterDelay","leaveDelay","lastUpdate","currentSchoolData","dashboardData","temperatureUnitPreference","LinkContext","setChartsTitlesList","TabContext","tab","charts","chartsTitles","chartTitle","FullWidthBox","Container","pt","pb","UppercaseTitle","Person","contactPerson","Email","contactEmail","href","BarChart","scrollToSection","jsonData","textAlign","CurrentAQIGrid","currentSensorsData","sensors","isScreen","gutterBottom","ExpandableSection","AirQualityExplanation","ChartComponent","chartIndex","my","keys","subchartSubtitle","Divider","setCurrentPage","user","UserContext","navigate","useNavigate","checkedAuthentication","authenticated","setDashboardData","setCurrentSchoolData","setAllowedSchoolsData","optionalSchoolID","fetchDataFromURL","then","data","currentSchool","processedCurrentSensorData","processCurrentSensorsData","dashboard","allowedSchools","webpackAsyncContext","req","Promise","resolve","__webpack_require__","o","e","Error","code","module","exports"],"sourceRoot":""}