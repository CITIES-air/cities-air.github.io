{"version":3,"file":"static/js/125.e5d632e1.chunk.js","mappings":"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","sources":["Components/CurrentAQIGrid.jsx","Components/UppercaseTitle.jsx","Graphs/Subchart/SeriesSelector.jsx","Graphs/GoogleChartHelper.jsx","Graphs/Subchart/GoogleChartStyleWrapper.jsx","Graphs/Subchart/NivoCalendarChart.jsx","Graphs/Subchart/SubChart.jsx","Components/CollapsibleSubtitle.jsx","Graphs/ChartControl.jsx","Graphs/ChartSubstituteComponents/AirQualityIndexTable.jsx","Graphs/ChartSubstituteComponents/ChartSubstituteComponentLoader.jsx","Components/AirQualityHelper.jsx","Components/DatasetDownload/DatasetCalendar.jsx","Components/DatasetDownload/DatasetDownloadDialog.jsx","Components/ScreenDialog.jsx","Pages/Dashboard/SchoolSelector.jsx","Utils/AirQualityExplanation.jsx","Pages/Project/Project.jsx","Pages/Dashboard/Dashboard.jsx","Pages/Project/ExpandableSection.jsx","Graphs/ChartSubstituteComponents|lazy|/^/.//.*$/|groupOptions: {}|namespace object"],"sourcesContent":["// disable eslint for this file\n/* eslint-disable */\nimport { Box, Grid, Typography, Skeleton, Stack } from '@mui/material';\nimport ThermostatIcon from '@mui/icons-material/Thermostat';\nimport WaterDropIcon from '@mui/icons-material/WaterDrop';\nimport ErrorIcon from '@mui/icons-material/Error';\n\nimport { returnSensorStatus, SensorStatus, getFormattedElapsedTimeFromNow } from '../Pages/Screen/ScreenUtils';\nimport { TemperatureUnits, getFormattedTemperature, calculateHeatIndex } from \"../Pages/Screen/TemperatureUtils\";\n\nimport AQIdatabase from '../Utils/AirQualityIndexHelper';\n\nimport CustomThemes from '../Themes/CustomThemes';\n\nconst CurrentAQIGrid = (props) => {\n  const { currentSensorsData, temperatureUnitPreference, isScreen = true } = props;\n\n  const getGridItemSize = (numOfItems) => {\n    return {\n      xs: Math.max(12 / numOfItems, 6),\n      sm: Math.max(12 / numOfItems, 4),\n      lg: isScreen ? (12 / numOfItems) : Math.min(5, Math.max(12 / numOfItems, 2))\n    }\n  }\n\n  return (\n    <Grid\n      container\n      justifyContent=\"center\"\n      sx={{\n        '& .MuiSvgIcon-root': {\n          verticalAlign: 'sub',\n          fontSize: isScreen ? null : '1rem'\n        },\n        '& *': {\n          fontWeight: '500'\n        },\n        '& .condensedFont': {\n          fontFamily: 'IBM Plex Sans Condensed, sans-serif !important',\n          '& *': {\n            fontFamily: 'IBM Plex Sans Condensed, sans-serif !important'\n          }\n        }\n      }}\n    >\n      {\n        currentSensorsData ?\n\n          (Object.entries(currentSensorsData).map(([key, sensorData], index) => (\n            <Grid\n              item\n              key={key}\n              {...getGridItemSize(Object.keys(currentSensorsData).length)}\n              sx={\n                sensorData.current?.sensor_status !== SensorStatus.active &&\n                { '& *': { color: `${CustomThemes.universal.palette.inactiveSensor}` } }\n              }\n            >\n              <Box sx={{ '& *': { color: sensorData.current?.color } }}>\n                <Typography variant={isScreen ? \"h4\" : 'h5'} fontWeight=\"500\" className='condensedFont'>\n                  {sensorData.sensor?.location_long || sensorData.sensor?.location_short || 'No Location Name'}\n                </Typography>\n                <Typography variant={isScreen ? \"h1\" : 'h2'} fontWeight=\"500\" lineHeight={isScreen ? 0.8 : 0.9}>\n                  {sensorData.current?.aqi || '--'}\n                </Typography>\n                <Typography variant={isScreen ? \"h4\" : 'h5'} fontWeight=\"500\" className='condensedFont'>\n                  {sensorData.current?.category || '--'}\n                </Typography>\n              </Box>\n\n              <Box sx={{\n                '& *': {\n                  color:\n                    isScreen ? (\n                      sensorData.current?.sensor_status === SensorStatus.active ?\n                        '#c8dcff' : CustomThemes.universal.palette.inactiveSensor\n                    )\n                      : 'text.secondary'\n                }, mt: isScreen ? 2 : 1\n              }} className='condensedFont'>\n                <Typography variant={isScreen ? \"h6\" : 'body1'}>\n                  <ThermostatIcon />\n                  {\n                    getFormattedTemperature({\n                      rawTemp: sensorData.current?.temperature,\n                      currentUnit: TemperatureUnits.celsius,\n                      returnUnit: temperatureUnitPreference\n                    })\n                  }\n                  &nbsp;&nbsp;-&nbsp;\n                  <WaterDropIcon sx={{ transform: 'scaleX(0.9)' }} />\n                  {sensorData.current?.rel_humidity ? Math.round(sensorData.current?.rel_humidity) : \"--\"}%\n                </Typography>\n                {\n                  // Show heat index for selected location types\n                  ['outdoors', 'indoors_gym'].includes(sensorData.sensor?.location_type) &&\n                  <Typography variant={isScreen ? \"body1\" : 'body2'} sx={{ fontWeight: '300 !important' }}>\n                    {calculateHeatIndex({\n                      rawTemp: sensorData.current?.temperature,\n                      currentUnit: TemperatureUnits.celsius,\n                      rel_humidity: sensorData.current?.rel_humidity,\n                      returnUnit: temperatureUnitPreference\n                    })}\n                  </Typography>\n                }\n                {\n                  displayLastUpdateAndSensorStatus({ sensorData, isScreen })\n                }\n              </Box>\n\n              {\n                // Display outdoor-indoor comparison if both sensors are active\n                sensorData.sensor_status !== SensorStatus.active &&\n                <Typography variant={isScreen ? \"h6\" : 'body1'} className=\"condensedFont\">\n                  {returnSensorStatus(sensorData)}\n                </Typography>\n              }\n            </Grid>\n          ))\n          )\n          :\n          (\n            <Stack direction=\"column\" alignItems=\"center\" justifyContent=\"center\">\n              <Skeleton variant='text' sx={{ width: '15rem', fontSize: '2rem' }} />\n              <Skeleton variant='text' sx={{ width: '5rem', fontSize: '4rem', my: -1.5 }} />\n              <Skeleton variant='text' sx={{ width: '10rem', fontSize: '2rem' }} />\n              <Skeleton variant='text' sx={{ width: '7.5rem', fontSize: '1rem' }} />\n              <Skeleton variant='text' sx={{ width: '7.5rem', fontSize: '1rem' }} />\n            </Stack>\n          )\n      }\n    </Grid>\n  );\n};\n\nconst displayLastUpdateAndSensorStatus = ({ sensorData, isScreen }) => {\n  if (isScreen && sensorData.current.sensor_status === SensorStatus.active) return null;\n  else\n    return (\n      <Typography\n        variant={isScreen ? 'h6' : 'caption'}\n        sx={{\n          mt: 0,\n          fontWeight: isScreen && '500 !important'\n        }}\n      >\n        {\n          sensorData.current?.sensor_status !== SensorStatus.active\n          &&\n          <>\n            <ErrorIcon\n              sx={{\n                '& *': {\n                  color: `${AQIdatabase[3].lightThemeColor} !important`\n                },\n                mr: 0.5\n              }} />\n            Offline.&nbsp;\n          </>\n        }\n        Last update:\n        {(sensorData.current?.timestamp || sensorData.sensor?.last_seen)\n          ? ` ${getFormattedElapsedTimeFromNow(sensorData.current?.timestamp || sensorData.sensor?.last_seen)} ago`\n          : '--'}\n      </Typography>\n    )\n}\n\nexport default CurrentAQIGrid;\n","import { Skeleton, Typography } from '@mui/material';\n\nexport default function UppercaseTitle({ text }) {\n  return (\n    <Typography\n      variant=\"h4\"\n      color=\"text.primary\"\n      sx={{\n        fontWeight: 'medium',\n        display: 'block',\n        textTransform: 'uppercase',\n        pb: 3,\n        lineHeight: 1\n      }}\n    >\n      {text || <Skeleton variant='text' />}\n    </Typography>\n  );\n}\n","/* eslint-disable */\nimport { useState, useEffect } from 'react';\nimport { Stack, Grid, MenuItem, FormControl, Select, Chip, Radio, Checkbox, Typography, Switch } from \"@mui/material\";\nimport { useTheme } from '@mui/material/styles';\n\nimport VisibilityIcon from '@mui/icons-material/Visibility';\n\nconst SELECT_ALL = 'Display All Series';\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\n\nexport default function SeriesSelector(props) {\n  const { items: itemsFromChart, selectorID, allowMultiple, onSeriesSelection } = props;\n\n  const theme = useTheme();\n\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: ITEM_HEIGHT * 5.55 + ITEM_PADDING_TOP,\n        overflow: 'visible !important',\n        background: theme.palette.customAlternateBackground\n      }\n    },\n    anchorOrigin: {\n      vertical: -6,\n      horizontal: \"left\"\n    },\n    transformOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"left\"\n    },\n    getContentAnchorEl: null\n  };\n\n  const [items, setItems] = useState(itemsFromChart);\n  const [selectAll, setSelectAll] = useState(allowMultiple); // default: all is selected if multiSelect is true\n\n  useEffect(() => {\n    setItems(itemsFromChart);\n  }, [itemsFromChart]);\n\n  useEffect(() => {\n    setSelectAll(items.every(item => item.selected)); // set selectAll if all items are selected\n  }, [items]);\n\n  const handleChange = (event) => {\n    // Get the array of the currently selected value(s)\n    const {\n      target: { value }\n    } = event;\n\n    // If the current selection has SELECT_ALL\n    // Behavior:\n    // - If SELECT_ALL is being selected now, then set all items to selected\n    // - IF SELECT_ALL is being de-selected now, then set all items but the first one to be unselected \n    // (to make sure there's always at least 1 item being selected)\n    if (value.includes(SELECT_ALL)) {\n      const updatedItems = items.map((item, index) => ({ ...item, selected: index == 0 ? true : !selectAll }));\n      onSeriesSelection(updatedItems);\n      setSelectAll(!selectAll);\n    }\n    // Else, if an ordinary item is selected/de-selected:\n    else {\n      const selectedItems = items.filter(item => value.includes(item.label));\n      const updatedItems = items.map(item => ({\n        ...item,\n        selected: selectedItems.some(selectedItem => selectedItem.label === item.label)\n      }));\n      onSeriesSelection(updatedItems);\n      setSelectAll(false);\n    }\n  };\n\n  const handleItemToggle = (item) => {\n    const updatedItems = items.map(existingItem =>\n      existingItem.label === item.label ? { ...existingItem, selected: !existingItem.selected } : existingItem\n    );\n    onSeriesSelection(updatedItems);\n  };\n\n  const renderedLabel = (selected) => {\n    return (\n      <Stack direction=\"row\" alignItems=\"center\" spacing={0.5}>\n        <VisibilityIcon fontSize=\"1.5rem\" sx={{ color: theme.palette.text.secondary }} />\n        <Typography variant=\"caption\" color=\"text.secondary\">\n          { /* show # of series selected if multiSelect. show cur selected serie if singleSelect */}\n          {allowMultiple ? `${selected.length} series displayed${selectAll ? ` (all)` : \"\"}`\n            : selected\n          }\n        </Typography>\n      </Stack>\n    )\n  };\n\n  return (\n    <Stack spacing={1} direction=\"row\" alignItems=\"center\">\n      <FormControl sx={{\n        [theme.breakpoints.down('sm')]: { width: '100%' },\n        minWidth: '200px',\n        '& .MuiInputBase-root': { mt: 1, borderRadius: theme.spacing(1) }\n      }} size=\"small\">\n        <Select\n          labelId={`${selectorID}-label`}\n          id={selectorID}\n          multiple={allowMultiple}\n          value={items.filter(item => item.selected).map(item => item.label)}\n          onChange={handleChange}\n          MenuProps={MenuProps}\n          renderValue={(selected) => renderedLabel(selected)}\n          sx={{ fontSize: '0.75em' }}\n        >\n          {/* Display all available items, together with checkbox for each item to select from */}\n          {items.map((item) => (\n            <MenuItem\n              disabled={\n                // If there is only 1 selected item and this is the selected item\n                // Then, prevent user from de-select this item too\n                // To ensure at least there is 1 selected item at all times\n                (items.filter(item => item.selected).length === 1 && item.selected) ? true : false\n              }\n              key={item.label}\n              value={item.label}\n              sx={{\n                backgroundColor: 'unset !important',\n                \"&:hover\": {\n                  backgroundColor: 'inherit !important',\n                }\n              }}\n            >\n              { /* checkboxes for MultiSelect, radioButtons for singleSelect*/}\n              {allowMultiple ? <Checkbox\n                checked={item.selected}\n                onClick={() => handleItemToggle(item)}\n\n                sx={{ p: 0.25, transform: 'scale(0.8)' }} />\n                : <Radio\n                  checked={item.selected}\n                  onChange={() => handleChange(item)}\n\n                  sx={{ p: 0.25, transform: 'scale(0.8)' }} />\n              }\n              <Typography variant='caption'>{item.label}</Typography>\n            </MenuItem>\n          ))}\n\n          {/* Show the option to select all if multiSelect is true*/}\n          {allowMultiple && <MenuItem key={SELECT_ALL} value={SELECT_ALL} sx={{\n            borderTop: 'solid 0.5px', borderColor: theme.palette.text.secondary,\n            position: 'sticky', bottom: 0, zIndex: 99999, marginBottom: theme.spacing(-1),\n            background: theme.palette.customAlternateBackground,\n            \"&:hover\": {\n              background: theme.palette.customAlternateBackground\n            }\n          }}>\n            <Stack direction='row' width='100%' alignItems='center' justifyContent='space-between'>\n              <Typography fontWeight={500} variant='caption' sx={{ pl: 1 }}>{SELECT_ALL}</Typography>\n              <Switch\n                checked={selectAll}\n                onClick={() => handleItemToggle(SELECT_ALL)}\n                sx={{ transform: 'scale(0.8)' }}\n              />\n            </Stack>\n          </MenuItem>\n          }\n        </Select>\n      </FormControl>\n\n      {/* Display only selected items in the Grids, and only in landscape mode and if multiSelect is true*/}\n      {allowMultiple && <Grid container spacing={1}\n        sx={{\n          [theme.breakpoints.down('sm')]: {\n            display: 'none'\n          },\n        }}\n      >\n        {items.filter(item => item.selected).map((item) => (\n          <Grid item key={item.label}>\n            <Chip\n              label={<Typography variant='caption'>{item.label}</Typography>}\n              size=\"small\"\n              {...(items.filter(item => item.selected).length !== 1 && { onDelete: () => handleItemToggle(item) })}\n            />\n          </Grid>\n        ))}\n      </Grid>}\n\n\n    </Stack>\n  );\n}\n","/* eslint-disable */\n\nexport const ChartControlType = {\n  CategoryFilter: { position: 'top', stackDirection: 'column' },\n  DateRangeFilter: { position: 'bottom', stackDirection: 'column-reverse' },\n  ChartRangeFilter: { position: 'bottom', stackDirection: 'column-reverse' },\n  NumberRangeFilter: { position: 'top', stackDirection: 'column' }\n}\n// Async function to fetch data from sheet using Google Visualization query language\nexport const fetchDataFromSheet = ({ chartData, subchartIndex }) => {\n  const urlParams =\n    subchartIndex == null\n      ? {\n        headers: chartData.headers || 1,\n        query: chartData.query,\n        gid: chartData.gid,\n      }\n      : {\n        headers:\n          chartData.headers\n          || chartData.subcharts[subchartIndex].headers\n          || null,\n        query:\n          chartData.query\n          || chartData.subcharts[subchartIndex].query\n          || null,\n        gid:\n          chartData.gid\n          || chartData.subcharts[subchartIndex].gid\n          || null,\n      };\n\n  const url = `https://docs.google.com/spreadsheets/d/${chartData.sheetId}/gviz/tq?gid=${urlParams.gid}&headers=${urlParams.headers}&tqx${urlParams.query ? `&tq=${encodeURIComponent(urlParams.query)}` : ''}`;\n  const query = new google.visualization.Query(url);\n\n  return new Promise((resolve, reject) => {\n    query.send(response => {\n      if (response.isError()) {\n        reject(response.getMessage() + ' ' + response.getDetailedMessage());\n      } else {\n        resolve(response);\n      }\n    });\n  });\n};\n\nexport const transformDataForNivo = (dataTable, dataColumn, tooltipColumn) => {\n  const data = JSON.parse(dataTable.toJSON())\n  const transformed = [];\n\n  const parseDate = (dateString) => {\n    const date = new Date(dateString);\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    const formattedDate = `${year}-${month < 10 ? '0' + month : month}-${day < 10 ? '0' + day : day}`;\n    return formattedDate;\n  }\n\n  data.rows.forEach(row => {\n    // Get the date string from the first column \n    const dateString = row.c[0].f;\n    // Parse and convert the date string to a 'YYYY-MM-DD' format\n    const formattedDate = parseDate(dateString);\n    // Get the data from the appropriate column\n    const value = row.c[dataColumn]?.v;\n    // Get the tooltip from the appropriate column\n    const tooltip = row.c[tooltipColumn]?.v;\n\n    // If the date string and value are both valid, push them into the result array\n    if (dateString && value !== undefined && value !== null) {\n      transformed.push({\n        day: formattedDate,\n        value: value,\n        tooltip: tooltip\n      });\n    }\n  });\n\n  // Get dateRange (from - to)\n  const dateStrings = transformed.map(item => item.day);\n  const dateRange = getDateRangeForCalendarChart(dateStrings);\n\n  // Get valueRange (min - max)\n  const values = transformed.map(item => item.value);\n  const valueRange = getValueRangeForCalendarChart(values);\n\n  return {\n    data: transformed,\n    dateRange: dateRange,\n    valueRange: valueRange\n  };\n};\nexport const getDateRangeForCalendarChart = (dateStrings) => {\n  return {\n    min: dateStrings.reduce((min, current) => (current < min ? current : min)),\n    max: dateStrings.reduce((max, current) => (current > max ? current : max))\n  }\n}\nexport const getValueRangeForCalendarChart = (values) => {\n  return { min: Math.min(...values), max: Math.max(...values) }\n}\n\n// Function to generate a random ID for the google chart container\nexport const generateRandomID = () => {\n  return Math.random().toString(36).substr(2, 9); // Generates a random string of length 9\n}\n\n// -------- Chart options --------\n\nconst hideAnnotations = {\n  stem: {\n    length: 0,\n  },\n  textStyle: {\n    opacity: 0,\n  },\n  boxStyle: null,\n};\n\nconst returnResponsiveFontSizeInPixels = ({ isPortrait, isSmaller }) => {\n  return (\n    isSmaller ? (isPortrait ? 6 : 8) : (isPortrait ? 8 : 10)\n  );\n}\n\nexport const returnGenericOptions = (props) => {\n  const { chartData, subchartIndex, isPortrait, isHomepage, theme } = props;\n\n  // Define some shared styling rules for the chart\n  const axisTitleTextStyle = {\n    italic: false,\n    bold: true,\n    color: theme.palette.chart.axisTitle,\n    fontSize: returnResponsiveFontSizeInPixels({ isPortrait })\n  };\n  const axisTextStyle = {\n    color: theme.palette.chart.axisText,\n    fontSize: returnResponsiveFontSizeInPixels({ isPortrait })\n  };\n\n  // ---- Formulate the options for this specific chart:\n  // 1. Populate first with subchart's options (if any)\n  let options = chartData.subcharts?.[subchartIndex].options\n    ? { ...chartData.subcharts[subchartIndex].options }\n    : {};\n\n  // 2. Append own chart's options and then populate with universal options for all charts\n  options = {\n    ...options,\n    ...chartData.options,\n    theme: 'material',\n    curveType: options.curveType || chartData.options?.curveType || 'function',\n    crosshair: { orientation: 'both', trigger: 'focus', opacity: 0.5 },\n    backgroundColor: { fill: 'transparent' },\n    chartArea: {\n      ...chartData.options?.chartArea,\n      width: isPortrait ? (chartData.options?.chartArea?.width?.portrait || '80%') : (chartData.options?.chartArea?.width?.landscape || '75%'),\n      height: isPortrait ? (chartData.options?.chartArea?.height?.portrait || '60%') : (chartData.options?.chartArea?.height?.landscape || '70%'),\n    },\n    width: isPortrait ? (chartData.options?.width?.portrait || '100%') : (chartData.options?.width?.landscape || '100%'),\n    // if there is a filter, we make space for the chartFilter from the chart's height.\n    // value is divided in 2 because the calculation is applied twice due to\n    // how react-google-charts nest components\n    height: chartData.height || '100%',\n    tooltip: {\n      isHtml: true,\n      showColorCode: false\n    },\n    legend: {\n      alignment: isPortrait ? 'center' : 'start',\n      position:\n        chartData.options?.legend?.position\n        ?? (isPortrait ? 'top' : 'right'),\n      scrollArrows: {\n        activeColor: theme.palette.chart.axisTitle,\n        inactiveColor: theme.palette.text.secondary,\n      },\n      pagingTextStyle: {\n        fontSize: 10,\n        color: theme.palette.chart.axisTitle,\n        bold: true,\n      }\n    }\n  };\n\n  // 3. Append to vAxis and hAxis properties\n  options.vAxis = {\n    ...options.vAxis,\n    format: options.vAxis?.format ?? 'decimal',\n    title: options.vAxis?.title ?? '',\n    viewWindow: {\n      min: options.vAxis?.viewWindow?.min ?? 0,\n    },\n  };\n  options.hAxis = {\n    ...options.hAxis,\n    title: options.hAxis?.title ?? '',\n  };\n  // 3.1. If in portrait mode, slant the text of the hAxis\n  if (isPortrait) {\n    options.hAxis = {\n      ...options.hAxis,\n      slantedText: true,\n      slantedTextAngle: 30,\n    };\n  }\n\n  // 4. Override with custom colors:\n  // 4.1. Color scheme of all the series of this chart\n  if (typeof options.colors === 'string' || !options.colors) options.colors = theme.palette.chart.optionsColors[options.colors || 'multiColor'];\n  // 4.2. Individual color of a single serie (if given)\n  if (options.series) {\n    Object.values(options.series).forEach((_serie) => {\n      const serie = _serie;\n      if (serie.color === 'default') {\n        serie.color = theme.palette.primary.main;\n      }\n    });\n  }\n  // 4.3. Color of the trendline\n  if (options.trendlines) {\n    options.trendlines.forEach((_item) => {\n      const item = _item;\n      item.color = theme.palette.primary.main;\n    });\n  }\n  // 4.4. Color axis of the Calendar chart\n  if (options.colorAxis) {\n    switch (options.colorAxis.colors) {\n      case 'matchingColor':\n        options.colorAxis.colors = [\n          theme.palette.chart.colorAxisFirstColor,\n          theme.palette.chart.optionsColors.multiColor[options.colorAxis.colorIndex],\n        ];\n        break;\n      case 'default':\n        options.colorAxis.colors = [\n          theme.palette.chart.colorAxisFirstColor,\n          theme.palette.NYUpurple,\n        ];\n        break;\n      case 'aqi':\n        options.colorAxis = theme.palette.chart.aqiColorAxis;\n        break;\n      default:\n        break;\n    }\n  }\n  // 4.5. Colors of other elements of the chart (typographies and gridlines)\n  options.vAxis = {\n    ...options.vAxis,\n    titleTextStyle: axisTitleTextStyle,\n    textStyle: axisTextStyle,\n    gridlines: {\n      ...options.vAxis?.gridlines,\n      color: options.vAxis?.gridlines?.color || theme.palette.chart.gridlines\n    },\n    minorGridlines: { count: 0 },\n  };\n  options.hAxis = {\n    ...options.hAxis,\n    titleTextStyle: axisTitleTextStyle,\n    textStyle: axisTextStyle,\n    gridlines: {\n      ...options.hAxis?.gridlines,\n      color: options.hAxis?.gridlines?.color || theme.palette.chart.gridlines\n    },\n    minorGridlines: {\n      ...options.hAxis?.minorGridlines,\n      color: options.hAxis?.gridlines?.color || theme.palette.chart.gridlines,\n    },\n  };\n  options.legend = {\n    ...options.legend,\n    textStyle: axisTextStyle,\n  };\n  options.annotations = {\n    ...options.annotations,\n    highContrast: true,\n    textStyle: {\n      color: theme.palette.primary.contrastText,\n      fontSize: returnResponsiveFontSizeInPixels({ isPortrait, isSmaller: true }),\n      opacity: 0.8\n    },\n    stem: {\n      ...options.annotations?.stem,\n      color: theme.palette.chart.axisTitle,\n      thickness: 2\n    },\n    boxStyle: {\n      rx: theme.shape.borderRadius, // rounded corners\n      ry: theme.shape.borderRadius,\n      fill: theme.palette.chart.annotationBoxFill,\n      fillOpacity: 0.5\n    },\n  };\n\n  // 5. If the chart is displayed on the homepage, override the options with:\n  if (isHomepage) {\n    options = {\n      ...options,\n      chartArea: {\n        ...options.chartArea,\n        width: '80%',\n        height: '80%'\n      },\n      seriesSelector: false,\n      pointSize: 0,\n      enableInteractivity: false,\n      annotations: hideAnnotations,\n      legend: 'none',\n      vAxis: {\n        ...options.vAxis,\n        textPosition: 'none',\n        titleTextStyle: {\n          ...options.vAxis.titleTextStyle,\n          bold: false\n        },\n        gridlines: { color: 'transparent', count: 0 },\n        viewWindowMode: 'maximized'\n      },\n      hAxis: {\n        ...options.hAxis,\n        textPosition: 'none',\n        gridlines: { color: 'transparent', count: 0 },\n        titleTextStyle: {\n          ...options.hAxis.titleTextStyle,\n          bold: false\n        }\n      },\n    };\n  }\n\n  return options;\n}\n\nexport const returnCalendarChartOptions = (existingOptions) => {\n  const calendarDimensions = calculateCalendarDimensions({ cellSizeMin: 14, cellSizeMax: 18 });\n  return {\n    ...existingOptions,\n    width: calendarDimensions.chartWidth,\n    calendar: {\n      cellSize: calendarDimensions.cellSize,\n      yearLabel: {\n        fontSize: calendarDimensions.yearLabelFontSize\n      }\n    },\n    noDataPattern: {\n      backgroundColor: 'none',\n      color: 'none',\n    },\n  }\n}\n\nexport const returnChartControlUI = (props) => {\n  const { chartControl, mainChartData, mainChartOptions, subchartIndex, theme, isPortrait } = props;\n  let chartControlUI = {\n    ...chartControl.options?.ui,\n    snapToData: true\n  };\n\n  // Assign the appropriate UI for chartControl based on controlType (if existed)\n  if (chartControl.controlType === 'ChartRangeFilter') {\n    chartControlUI = {\n      ...chartControlUI,\n      chartType: mainChartData.chartType,\n      chartView: {\n        columns:\n          mainChartData.columns\n          || (mainChartData.subcharts\n            && mainChartData.subcharts[subchartIndex].columns)\n          || null\n          || null,\n      },\n      chartOptions: {\n        ...mainChartOptions,\n        ...chartControl.options?.ui?.chartOptions,\n        hAxis: {\n          ...chartControl.options?.ui?.chartOptions?.hAxis,\n          textPosition: 'out',\n          textStyle: { color: theme.palette.chart.axisText, fontSize: returnResponsiveFontSizeInPixels({ isPortrait, isSmaller: true }) }\n        },\n        vAxis: {\n          ...chartControl.options?.ui?.chartOptions?.vAxis,\n          title: null\n        },\n        annotations: hideAnnotations,\n        legend: null,\n      }\n    };\n  }\n  return chartControlUI;\n}\n\nconst calculateCalendarDimensions = ({ cellSizeMin, cellSizeMax }) => {\n  const cellSize = Math.min(Math.max((window.innerWidth * 0.9) / 58, cellSizeMin), cellSizeMax);\n  return {\n    chartWidth: cellSize * 56, // fixed ratio\n    cellSize,\n    yearLabelFontSize: cellSize * 2\n  };\n};\n\nexport const addTouchEventListenerForChartControl = ({ controlWrapper, chartID }) => {\n  const touchHandler = (event) => {\n    var touches = event.changedTouches,\n      first = touches[0],\n      type = '';\n\n    switch (event.type) {\n      case 'touchstart':\n        type = 'mousedown';\n        break;\n      case 'touchmove':\n        type = 'mousemove';\n        break;\n      case 'touchend':\n        type = 'mouseup';\n        break;\n      default:\n        return;\n    }\n\n    var simulatedEvent = new MouseEvent(type, {\n      bubbles: true,\n      cancelable: true,\n      view: window,\n      detail: 1,\n      screenX: first.screenX,\n      screenY: first.screenY,\n      clientX: first.clientX,\n      clientY: first.clientY,\n      button: 0, // left button\n      relatedTarget: null,\n    });\n\n    first.target.dispatchEvent(simulatedEvent);\n    event.preventDefault();\n  }\n\n  let isMounted = true; // Flag to track component's mount status\n  if (!controlWrapper) return;\n\n  const controlDOM = document.querySelector(`#control-${chartID}`);\n  if (!controlDOM) return;\n\n  ['touchstart', 'touchmove', 'touchend', 'touchcancel']\n    .forEach((touchEvent) => {\n      controlDOM.addEventListener(touchEvent, touchHandler, { capture: true });\n    });\n\n  return () => {\n    isMounted = false; // Component is unmounting\n\n    ['touchstart', 'touchmove', 'touchend', 'touchcancel'].forEach((touchEvent) => {\n      controlDOM.removeEventListener(touchEvent, touchHandler, { capture: true });\n    });\n  };\n}","import { Box } from '@mui/material/';\nimport { styled } from '@mui/material/styles';\n\nconst GoogleChartStyleWrapper = styled(Box)(({ theme, isPortrait }) => ({\n  // CSS for HTML tooltip\n  '& .google-visualization-tooltip, .nivo-tooltip': {\n    width: 'unset !important',\n    maxWidth: '350px',\n    height: 'unset',\n    padding: '1em',\n    boxShadow: '0px 2px 2px 0px rgba(204, 204, 204, 0.6)',\n    mozBoxShadow: '0px 2px 2px 0px rgba(204, 204, 204, 0.6)',\n    webkitBoxShadow: '0px 2px 2px 0px rgba(204, 204, 204, 0.6)',\n    border: 'solid 1px',\n    borderColor: theme.palette.text.secondaryRGB,\n    fontSize: `${isPortrait ? 9 : 12}px`,\n    color: theme.palette.chart.tooltip.text,\n    background: theme.palette.chart.tooltip.background,\n    borderRadius: theme.spacing(1 / 2),\n    '& ul': {\n      margin: '0 !important',\n      '& li': {\n        margin: '0 !important',\n        padding: '0 !important',\n        '& span': {\n          fontSize: `${isPortrait ? 9 : 12}px !important`,\n          color: `${theme.palette.chart.tooltip.text} !important`,\n        }\n      }\n    }\n  },\n\n  // -------- chartControl's additional stylings\n  '& .goog-menuitem-highlight, .goog-menuitem-hover': {\n    backgroundColor: `${theme.palette.primary} !important`\n  },\n\n  // CategoryFilter\n  '& .google-visualization-controls-categoryfilter': {\n    fontSize: '0.85rem',\n    marginTop: '0.75rem',\n    marginBottom: '-0.75rem',\n\n    '& .goog-inline-block > .goog-menu-button': {\n      marginTop: 0\n    },\n\n    '& .goog-menu-button-hover .goog-menu-button-outer-box, .goog-menu-button-hover .goog-menu-button-inner-box': {\n      borderColor: 'inherit !important'\n    },\n\n    '& .google-visualization-controls-label': {\n      color: theme.palette.text.secondary,\n      fontWeight: 500,\n      verticalAlign: 'middle',\n      marginBottom: '0.25rem'\n    },\n    '& .goog-menu-button-outer-box': {\n      backgroundColor: theme.palette.background.paper,\n      border: 'unset',\n\n      '& .goog-menu-button-inner-box': {\n        paddingTop: theme.spacing(0.5),\n        paddingBottom: theme.spacing(0.5),\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2),\n        border: 'solid',\n        borderWidth: '0.5px',\n        borderRadius: theme.spacing(0.5),\n        borderColor: theme.palette.text.secondary,\n\n        '& .goog-menu-button-caption': {\n          color: theme.palette.text.secondary\n        }\n      }\n    }\n  },\n\n  // DateRangeFilter\n  '& .google-visualization-controls-rangefilter': {\n    width: '100%',\n    fontSize: '0.75rem',\n    '& .goog-inline-block': {\n      width: '100%',\n    },\n    '& .google-visualization-controls-slider-horizontal': {\n      width: '90%',\n      margin: '0 5%',\n    },\n    '& .google-visualization-controls-rangefilter-thumblabel:nth-of-type(1)': {\n      position: 'absolute',\n      top: '1.5em',\n      left: '5%'\n    },\n    '& .google-visualization-controls-rangefilter-thumblabel:nth-of-type(2)': {\n      position: 'absolute',\n      top: '1.5em',\n      right: '5%'\n    },\n    '& .google-visualization-controls-slider-handle': {\n      background: theme.palette.primary.main\n    },\n    '& .google-visualization-controls-rangefilter-thumblabel': {\n      color: theme.palette.text.secondary,\n      padding: 0,\n      fontWeight: 500\n    },\n    '& .google-visualization-controls-slider-thumb': {\n      background: theme.palette.primary.main,\n      border: 'unset',\n      borderRadius: '4px'\n    }\n  },\n\n  // These are the paths showing on top of the line chart\n  // and the stroke around the bar/column chart\n  // when the user hovers on the legend to make the serie stand out\n  // by Google Chart's default doesn't change color based on light/dark theme, but we modify here:\n  '& path[stroke-opacity=\"0.3\"], path[stroke-opacity=\"0.1\"], path[stroke-opacity=\"0.05\"], rect[stroke-opacity]': {\n    stroke: theme.palette.text.primary,\n    strokeWidth: 3\n  },\n\n  // Cursor of series in legends\n  '& [column-id]:not(:empty)': {\n    cursor: 'pointer',\n    ':hover': {\n      fontWeight: 600\n    }\n  }\n}));\n\nexport default GoogleChartStyleWrapper;\n","/* eslint-disable */\nimport { ResponsiveCalendar } from '@nivo/calendar';\nimport { useEffect, useRef } from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport { Box, Chip } from '@mui/material';\n\nimport parse from 'html-react-parser';\nimport { replacePlainHTMLWithMuiComponents } from '../../Utils/Utils';\n\nexport const yearSpacing = 40;\n\nexport const getCalendarChartMargin = (isPortrait) => {\n    return isPortrait\n        ? { top: 20, right: 0, bottom: 0, left: 20 }\n        : { top: 30, right: 40, bottom: 0, left: 40 }\n}\n\nexport const CalendarChart = (props) => {\n    const { data, dateRange, valueRange, isPortrait, options } = props;\n\n    const calendarChartMargin = getCalendarChartMargin(isPortrait);\n\n    const theme = useTheme();\n\n    // Function to extract tooltip text from HTML tooltip\n    const extractTooltipText = (tooltip) => {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(tooltip, 'text/html');\n        return doc.body.innerHTML;\n    };\n\n    // Function to check if a date is in the first two rows of the chart\n    // Used to anchor the tooltip to the bottom while hovering over\n    // the first two rows of the chart\n    const inFirstTwoRowsOfChart = (dateStr, dateRange) => {\n        const date = new Date(dateStr);\n        const dayOfWeek = date.getDay();\n\n        // Check if the date is Sunday (0) or Monday (1)\n        const isFirstTwoDaysOfWeek = dayOfWeek === 0 || dayOfWeek === 1;\n\n        // Extract the first year from the date range once\n        const firstYear = new Date(dateRange.min).getFullYear();\n\n        // Check if the date is in the first year of the date range\n        const isInFirstYear = date.getFullYear() === firstYear;\n\n        return isFirstTwoDaysOfWeek && isInFirstYear;\n    };\n\n    // Function to get color of the Calendar cells\n    const colors = options?.colorAxis?.isGradient ?\n        generateColorGradient(options?.colorAxis?.colors[0], options?.colorAxis?.colors[1], 100) :\n        options?.colorAxis?.colors;\n\n    const showLegend = () => {\n        return (\n            <GradientBox\n                valueRange={valueRange}\n                colors={options?.colorAxis?.colors}\n                isPortrait={isPortrait}\n            />\n        )\n    }\n\n    return (\n        <>\n            {options?.legend?.position !== \"none\" && showLegend()}\n            <ResponsiveCalendar\n                data={data}\n                from={dateRange?.min}\n                to={dateRange?.max}\n                emptyColor={'transparent'}\n                theme={{\n                    text: {\n                        fill: theme.palette.text.secondary,\n                    },\n                    tooltip: {\n                        container: {\n                            background: theme.palette.mode === 'dark' ? '#2b2b2b' : '#fff',\n                            color: theme.palette.text.primary,\n                        },\n                    },\n                    axis: {\n                        ticks: {\n                            line: {\n                                stroke: theme.palette.mode === 'dark' ? '#2b2b2b' : '#fff',\n                            },\n                            text: {\n                                fill: theme.palette.text.primary,\n                            },\n                        },\n                    },\n                    grid: {\n                        line: {\n                            stroke: theme.palette.mode === 'dark' ? '#2b2b2b' : '#fff',\n                        },\n                    },\n                }}\n                colors={colors}\n                minValue={options?.colorAxis?.minValue}\n                maxValue={options?.colorAxis?.maxValue}\n                margin={calendarChartMargin}\n                yearSpacing={yearSpacing}\n                monthBorderColor={theme.palette.text.primary}\n                monthBorderWidth={1}\n                daySpacing={0.25}\n                dayBorderWidth={0}\n                tooltip={({ day, value, color }) => {\n                    const tooltipData = data.find(item => item.day === day);\n                    const tooltipText = tooltipData ? extractTooltipText(tooltipData.tooltip) : '';\n\n                    return (\n                        <CustomTooltip\n                            day={day}\n                            color={color}\n                            tooltipText={tooltipText}\n                            dateRange={dateRange}\n                            inFirstTwoRowsOfChart={inFirstTwoRowsOfChart}\n                        />\n                    );\n                }}\n            />\n        </>\n    );\n};\n\n// Custom tooltip component for the Calendar chart\nconst CustomTooltip = ({ day, color, tooltipText, dateRange, inFirstTwoRowsOfChart }) => {\n    const tooltipBoxRef = useRef(null);\n\n    // If the cell hovered over is in the first two rows of the chart,\n    // move the tooltip to the bottom of the chart\n    // Read subsequent comments to understand why we need to do this\n    useEffect(() => {\n        if (tooltipBoxRef.current && inFirstTwoRowsOfChart(day, dateRange)) {\n            const parentDiv = tooltipBoxRef.current.parentElement;\n            if (parentDiv) {\n                parentDiv.style.top = '11vh';\n            }\n        }\n    }, [tooltipBoxRef, inFirstTwoRowsOfChart]);\n\n\n    // Note that our Box is just a container 'inside' the tooltip\n    // The tooltip itself is actually the Box's parent div\n    return (\n        <Box ref={tooltipBoxRef} className='nivo-tooltip'>\n            <Chip sx={{ backgroundColor: color, mr: 0.5, height: '10px', width: '10px', borderRadius: '50%' }} />\n            {parse(tooltipText, { replace: replacePlainHTMLWithMuiComponents })}\n        </Box>\n    );\n};\n\nconst GradientBox = ({ valueRange, colors, isPortrait }) => {\n\n    if (valueRange?.min === null || valueRange?.max === null) return null;\n\n    const theme = useTheme();\n\n    // Create a gradient string from all colors in the colors array\n    const gradient = colors.map((color, index, array) => {\n        // Calculate the percentage position for each color\n        const position = (index / (array.length - 1)) * 100;\n        return `${color} ${position}%`;\n    }).join(', ');\n\n    const containerStyle = {\n        position: 'sticky',\n        width: 'fit-content',\n        marginTop: '1rem',\n        left: (isPortrait ? '58%' : '74%'),\n    }\n\n    const gradientStyle = {\n        background: `linear-gradient(to right, ${gradient})`,\n        color: theme.palette.text.primary,\n        border: `1px solid ${theme.palette.text.primary}`,\n        minWidth: '150px',\n        height: '1.1rem',\n        maxHeight: '1.25rem',\n        display: 'flex',\n        justifyContent: 'space-between',\n    };\n\n    const labelStyle = {\n        position: 'relative',\n        top: '-1.15rem',\n        fontSize: '0.8rem',\n    };\n\n    return (\n        <Box style={containerStyle}>\n            <Box style={gradientStyle}>\n                <span style={labelStyle}>{valueRange.min}</span>\n                <span style={labelStyle}>{valueRange.max}</span>\n            </Box>\n        </Box>\n    );\n};\n\n// Function to return an array of STEPS discrete colors in a gradient from startColor and endColor\nconst generateColorGradient = (startColor, endColor, steps) => {\n    function hexToRgb(hex) {\n        // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n        const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n        hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n            return r + r + g + g + b + b;\n        });\n\n        const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        return result ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)]\n            : [null, null, null];\n    }\n\n    function rgbToHex(r, g, b) {\n        return \"#\" + [r, g, b].map(x => {\n            const hex = x.toString(16);\n            return hex.length === 1 ? '0' + hex : hex;\n        }).join('');\n    }\n\n    function interpolateColor(color1, color2, factor) {\n        let result = color1.slice();\n        for (let i = 0; i < 3; i++) {\n            result[i] = Math.round(result[i] + factor * (color2[i] - color1[i]));\n        }\n        return result;\n    }\n\n    let startRGB = hexToRgb(startColor);\n    let endRGB = hexToRgb(endColor);\n    let colorArray = [];\n\n    for (let i = 0; i < steps; i++) {\n        let factor = i / (steps - 1);\n        let interpolatedColor = interpolateColor(startRGB, endRGB, factor);\n        colorArray.push(rgbToHex(...interpolatedColor));\n    }\n\n    return colorArray;\n}","/* eslint-disable */\n\nimport { useState, useEffect, useContext, useMemo } from 'react';\n\nimport { GoogleContext } from '../../ContextProviders/GoogleContext';\n\nimport { Box, Stack } from '@mui/material/';\n\nimport { useTheme } from '@mui/material/styles';\nimport SeriesSelector from './SeriesSelector';\n\nimport { generateRandomID, returnGenericOptions, returnCalendarChartOptions, returnChartControlUI, ChartControlType, addTouchEventListenerForChartControl, getDateRangeForCalendarChart, getValueRangeForCalendarChart } from '../GoogleChartHelper';\n\nimport GoogleChartStyleWrapper from './GoogleChartStyleWrapper';\n\nimport LoadingAnimation from '../../Components/LoadingAnimation';\n\nimport ChartSubstituteComponentLoader from '../ChartSubstituteComponents/ChartSubstituteComponentLoader';\n\nimport { CalendarChart, getCalendarChartMargin, yearSpacing } from './NivoCalendarChart';\n\nexport default function SubChart(props) {\n  // Props\n  const { chartData, subchartIndex, windowSize, isPortrait, isHomepage, height, maxHeight } = props;\n  // Early return if this doesn't contain a normal Google Chart but a chartSubstituteComponent\n  const chartSubstituteComponentName = chartData.subcharts?.[subchartIndex].chartSubstituteComponentName;\n  if (chartSubstituteComponentName) {\n    return <ChartSubstituteComponentLoader chartSubstituteComponentName={chartSubstituteComponentName} />;\n  }\n\n  // Formulate the className\n  const className = chartData.customClassName ? `${chartData.chartType} ${chartData.customClassName}` : chartData.chartType;\n\n  // Use GoogleContext for loading and manipulating the Google Charts\n  const [google, _] = useContext(GoogleContext);\n\n  // States of the Google Charts\n  const [dataTable, setDataTable] = useState();\n  const [chartWrapper, setChartWrapper] = useState();\n  const [dashboardWrapper, setDashboardWrapper] = useState();\n  const [controlWrapper, setControlWrapper] = useState();\n\n  // Get the current theme\n  const theme = useTheme();\n\n  // To determine the first time the chart renders to show/hide the LoadingAnimation\n  const [isFirstRender, setIsFirstRender] = useState(true);\n\n  // Keep track of the columns (series) of the chart\n  const [allInitialColumns, setAllInitialColumns] = useState();\n  const [dataColumns, setDataColumns] = useState();\n  const [initialVAxisRange, setInitialVAxisRage] = useState();\n\n  // Define the DOM container's ID for drawing the google chart inside\n  const [chartID, __] = useState(generateRandomID());\n\n  // Calendar chart's properties\n  const [chartTotalHeight, setChartTotalHeight] = useState(200);\n\n  // Get the options object for chart\n  let options = useMemo(() => {\n    let opts = returnGenericOptions({ ...props, theme });\n    if (chartData.chartType === 'Calendar') {\n      opts = returnCalendarChartOptions(opts);\n    }\n    return opts;\n  }, [props, theme, chartData.chartType]);\n  // State to store transformed data for CalendarChart\n  const [calendarData, setCalendarData] = useState(null);\n  const [calendarHeight, setCalendarHeight] = useState(200);\n  const [containerWidth, setContainerWidth] = useState(1200); // max width of the chart container\n  // Early exit for 'Calendar' chartType\n  if (chartData.chartType === 'Calendar') {\n    useEffect(() => {\n      const dataArray = chartData.dataArray\n        || (chartData.subcharts\n          && chartData.subcharts[subchartIndex].dataArray)\n        || null\n        || null;\n      if (!dataArray) return; // early return if there is no data to render\n\n      const dateStrings = dataArray.map(item => item.day);\n      const values = dataArray.map(item => item.value);\n      const dateRange = getDateRangeForCalendarChart(dateStrings);\n\n      setCalendarData({\n        data: dataArray,\n        dateRange: dateRange,\n        valueRange: getValueRangeForCalendarChart(values)\n      });\n\n      // Get the number of years in the dateRange\n      const startYear = new Date(dateRange.min).getFullYear();\n      const endYear = new Date(dateRange.max).getFullYear();\n      const numberOfYear = endYear - startYear + 1;\n\n      // Calculate the size of each cell\n      const cellSize = Math.min(containerWidth / 60, 20); // max cell size of 20\n      const yearHeight = cellSize * 7; // Height for one year\n\n      const calendarChartMargin = getCalendarChartMargin(isPortrait);\n\n      // Calculate the total height based on the number of years and margins\n      let totalHeight;\n      if (numberOfYear == 1) {\n        totalHeight = yearHeight + yearSpacing + calendarChartMargin.top + calendarChartMargin.bottom\n      }\n      else {\n        totalHeight = numberOfYear * (yearHeight + yearSpacing) + calendarChartMargin.top + calendarChartMargin.bottom;\n      }\n      setCalendarHeight(totalHeight);\n\n    }, [chartData]);\n\n    return (\n      <GoogleChartStyleWrapper\n        isPortrait={isPortrait}\n        className={className}\n        position=\"relative\"\n        minWidth=\"700px\"\n        minHeight={isPortrait ? '200px' : calendarHeight + 'px'}\n        height={calendarHeight + 'px'}\n        maxHeight={isPortrait && '400px'}\n      >\n        {calendarData ?\n          <CalendarChart\n            data={calendarData.data}\n            dateRange={calendarData.dateRange}\n            valueRange={calendarData.valueRange}\n            isPortrait={isPortrait}\n            options={options}\n          />\n          :\n          (\n            <Box sx={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}>\n              <LoadingAnimation />\n\n            </Box>\n          )\n        }\n      </GoogleChartStyleWrapper>\n    );\n  }\n\n  // Properties for chart control (if existed)\n  let hasChartControl = false;\n  let chartControlOptions;\n  // Only show the chart control if:\n  // It exists in the database (either for all subcharts or just for a particular subchart)\n  // And if the chart is currently not shown on homePage\n  let chartControl = chartData.control || chartData.subcharts?.[subchartIndex].control;\n  if (chartControl && (isHomepage !== true)) {\n    hasChartControl = true;\n\n    // Get the options for chartControl if hasChartControl\n    chartControlOptions = {\n      ...chartControl.options,\n      ui: returnChartControlUI({\n        chartControl,\n        mainChartData: chartData,\n        mainChartOptions: options,\n        subchartIndex,\n        theme,\n        isPortrait\n      })\n    };\n\n    // Swap touch events for mouse events on ChartRangeControl\n    // as it doesn't support touch events on mobile\n    if (chartControl.controlType === 'ChartRangeFilter') {\n      useEffect(() => {\n        const cleanupTouchEventListener = addTouchEventListenerForChartControl({ controlWrapper, chartID });\n        return cleanupTouchEventListener;\n      }, [controlWrapper]);\n    }\n  }\n\n  // Properties for selecting (showing or hiding) the serie(s)\n  const seriesSelector = options.seriesSelector || false;\n\n  // Set new options prop and re-render the chart if theme or isPortrait changes\n  useEffect(() => {\n    if (seriesSelector) handleSeriesSelection(dataColumns); // this function set new options, too\n    else {\n      chartWrapper?.setOptions({\n        ...options,\n        ...(chartData.chartType === 'Calendar' && { height: chartTotalHeight })\n      });\n\n      chartWrapper?.draw();\n      if (hasChartControl) {\n        controlWrapper?.setOptions(chartControlOptions);\n        controlWrapper?.draw();\n      }\n    }\n  }, [theme, isPortrait, windowSize, chartTotalHeight]);\n\n  // Set new initialColumnsColors if the theme changes\n  // This only applies to when seriesSelector.method == \"setViewColumn\"\n  useEffect(() => {\n    if (!dataColumns) return;\n    if (seriesSelector && seriesSelector.method == \"setViewColumn\") {\n      setInitialColumnsColors({ dataColumns: dataColumns });\n      handleSeriesSelection(dataColumns);\n    }\n  }, [theme]);\n\n  const getInitialColumns = ({ chartWrapper, dataTable, seriesSelector }) => {\n    // Update the initial DataView's columns (often, all of the series are displayed initially)\n    var initialView = chartWrapper.getView();\n    // If (optional) columns is not specified in database\n    // Assign it from DataTable\n    if (initialView.columns == null) {\n      const viewFromDataTable = new google.visualization.DataView(dataTable);\n      chartWrapper.setView({\n        columns: viewFromDataTable.columns\n      });\n      initialView = chartWrapper.getView();\n    }\n\n    let shouldAssignDomainRoleToFistColumn = true; // variable to only assign type: 'domain' to the very first column\n    let dataSeriesIndex = 0;\n    const allInitialColumns = initialView.columns.map((col, index) => {\n      // A column can either be a number (that denotes the index of the sourceColumn) or an object\n      // The code below harmonize all columns to be an object to store crucial data to toggle their visibility\n      if (typeof col === 'number') col = {\n        role: shouldAssignDomainRoleToFistColumn ? 'domain' : 'data',\n        sourceColumn: col\n      }\n      col.label = dataTable.getColumnLabel(col.sourceColumn);\n      col.indexInAllInitialColumns = index;\n\n      shouldAssignDomainRoleToFistColumn = shouldAssignDomainRoleToFistColumn && false;\n\n      // Set the visibility of data column, \n      if (col.role === 'data') {\n        // initially, all data columns are selected if multiple series are selectable\n        if (seriesSelector?.allowMultiple) {\n          col.selected = true;\n        } else {\n          // else for single serie selector, only first data column is selected\n          if (dataSeriesIndex === 0) {\n            col.selected = true;\n          } else {\n            col.selected = false;\n          }\n        }\n        col.seriesIndex = dataSeriesIndex;\n        dataSeriesIndex++;\n      }\n      return col;\n    });\n    setAllInitialColumns(allInitialColumns);\n    const initialVAxisRange = getInitialVAxisRange({ dataTable: dataTable, allInitialColumns: allInitialColumns });\n    setInitialVAxisRage(initialVAxisRange);\n    // To track selection, only get the columns that are:\n    // role === 'data'\n    // visibleInLegend !== false\n    const dataColumns = allInitialColumns.filter((col) => {\n      return col.role === 'data' && options.series?.[col.seriesIndex]?.visibleInLegend !== false;\n    });\n\n    if (seriesSelector.method === \"setViewColumn\") setInitialColumnsColors({ dataColumns: dataColumns });\n\n    setDataColumns(dataColumns);\n    return dataColumns;\n  };\n\n  const setInitialColumnsColors = ({ dataColumns }) => {\n    dataColumns.forEach((col) => {\n      // Assign inherit color to this data column\n      col.color = options.colors[col.seriesIndex % options.colors.length];\n      // Assign other inherit attributes from its serie object (if existed)\n      col.serieAttribute = options.series?.[col.seriesIndex];\n    });\n  }\n\n  const getInitialVAxisRange = ({ dataTable, allInitialColumns }) => {\n    let vAxisMin, vAxisMax;\n    allInitialColumns.forEach((col, index) => {\n      if (index === 0) return; // the first column is the domain (hAxis)\n      const range = dataTable.getColumnRange(col.sourceColumn);\n      if (!isNaN(range.min) && range.min) vAxisMin = vAxisMin ? Math.min(vAxisMin, range.min) : range.min;\n      if (!isNaN(range.max) && range.max) vAxisMax = vAxisMax ? Math.max(vAxisMax, range.max) : range.max;\n    });\n    return { min: vAxisMin, max: vAxisMax };\n  }\n\n  const handleSeriesSelection = (newDataColumns, _chartWrapper = chartWrapper) => {\n    if (!allInitialColumns) return;\n\n    setDataColumns(newDataColumns);\n\n    if (seriesSelector.method === \"toggleVisibility\" || seriesSelector.method === null) {\n      const hiddenSeriesObject = {};\n      newDataColumns.forEach((col) => {\n        if (!col.selected)\n          hiddenSeriesObject[col.seriesIndex] = {\n            color: 'transparent',\n            enableInteractivity: false,\n            visibleInLegend: false\n          }; // 'hide' the serie by making it transparent\n      });\n\n      _chartWrapper?.setOptions({\n        ...options,\n        series: {\n          ...options.series,\n          ...hiddenSeriesObject\n        }\n      });\n    }\n    else if (seriesSelector.method === \"setViewColumn\") {\n      let newViewColumns = [];\n      newViewColumns.push(0); // this is the domain column\n      newDataColumns.forEach((dataColumn) => {\n        if (dataColumn.selected) {\n          newViewColumns.push(dataColumn);\n          // Find this dataColumn's supporting columns (whose role !== 'data')\n          // A dataColumn has its supporting columns (can be many) follow it immediately\n          for (let i = dataColumn.indexInAllInitialColumns + 1; i < allInitialColumns.length; i++) {\n            if (allInitialColumns[i].role !== 'data') {\n              newViewColumns.push(allInitialColumns[i]);\n            }\n            // If this loop encounter the next dataColumn, break the loop, all supporting columns for this dataColumn have been discovered\n            else {\n              break;\n            }\n          }\n        }\n      });\n      _chartWrapper?.setView({ columns: newViewColumns });\n\n      const newOptions = { ...options };\n      // Preserve the initial vAxis range so that the vAxis doesn't shift based on the visible serie(s)\n      // newOptions.vAxis.viewWindow = {\n      //   min: (options.vAxis.viewWindow.min == null) ? initialVAxisRange.min : options.vAxis.viewWindow.min,\n      //   max: (options.vAxis.viewWindow.max == null) ? initialVAxisRange.max : options.vAxis.viewWindow.max,\n      // }\n      // Set the new color array\n      newOptions.colors = newDataColumns.filter((col) => col.selected).map((col) => col.color);\n      // Set the new series object (if any)\n      // this contains other series' attributes (lineWidth, seriesType...)\n      const series = {};\n      let selectedSeriesCount = 0;\n      newDataColumns.forEach((col) => {\n        if (!col.selected) return;\n        if (col.serieAttribute != null) {\n          series[selectedSeriesCount] = col.serieAttribute;\n        }\n        selectedSeriesCount++;\n      })\n      newOptions.series = series;\n      _chartWrapper?.setOptions(newOptions);\n    }\n\n    // Call draw to apply the new DataView and 'refresh' the chart\n    _chartWrapper?.draw();\n\n    if (hasChartControl) {\n      controlWrapper?.draw();\n    }\n  };\n\n  const reconstructFunctionFromJSONstring = (columns) => {\n    if (!columns) return;\n\n    const evaluatedColumns = [];\n    for (const column of columns) {\n      if (typeof column === 'number') {\n        // If it's a number, add it as-is\n        evaluatedColumns.push(column);\n      } else if (typeof column === 'object') {\n        if (column.calc && column.calc !== 'stringify') {\n          // If it's an object with a 'calc' property, evaluate the 'calc' function\n          // using new Function() and add the result to the evaluatedColumns array\n          const calcFunction = new Function(\"dataTable\", \"rowNum\", column.calc);\n          evaluatedColumns.push({\n            ...column,\n            calc: calcFunction,\n          });\n        } else {\n          // If it's an object without a 'calc' property, or with calc = 'stringify', add it as-is\n          evaluatedColumns.push(column);\n        }\n      }\n    }\n    return evaluatedColumns;\n  }\n\n\n  // Call this function to fetch the data and draw the initial chart\n  useEffect(() => {\n    if (google && chartData) {\n      // Not applicable for Calendar chart\n      if (chartData.chartType === \"Calendar\") return;\n\n      // Get and set the dataArray \n      const dataArray = chartData.dataArray\n        || (chartData.subcharts\n          && chartData.subcharts[subchartIndex].dataArray)\n        || null\n        || null;\n      if (!dataArray) return; // early return if there is no data to render\n\n      const thisDataTable = google.visualization.arrayToDataTable(dataArray);\n      setDataTable(thisDataTable);\n\n      // Get dataColumn views\n      const columns = chartData.columns\n        || (chartData.subcharts\n          && chartData.subcharts[subchartIndex].columns)\n        || null\n        || null;\n      const reconstructedColumns = reconstructFunctionFromJSONstring(columns);\n\n      // Create chartWrapper\n      const thisChartWrapper = new google.visualization.ChartWrapper({\n        chartType: chartData.chartType,\n        dataTable: (!hasChartControl) ? thisDataTable : undefined,\n        options: options,\n        view: {\n          columns: reconstructedColumns\n        },\n        containerId: chartID\n      });\n      setChartWrapper(thisChartWrapper);\n\n      if (hasChartControl) {\n        const thisDashboardWrapper = new google.visualization.Dashboard(\n          document.getElementById(`dashboard-${chartID}`));\n        setDashboardWrapper(thisDashboardWrapper);\n\n        google.visualization.events.addListener(thisDashboardWrapper, 'ready', onChartReady);\n\n        const thisControlWrapper = new google.visualization.ControlWrapper({\n          controlType: chartControl.controlType,\n          options: chartControlOptions,\n          containerId: `control-${chartID}`\n        });\n        setControlWrapper(thisControlWrapper);\n\n        // Establish dependencies\n        thisDashboardWrapper.bind(thisControlWrapper, thisChartWrapper);\n\n        thisDashboardWrapper.draw(thisDataTable);\n      }\n      else {\n        google.visualization.events.addListener(thisChartWrapper, 'ready', onChartReady);\n        thisChartWrapper.draw();\n      }\n\n      // Run the seriesSelector for the first time\n      if (seriesSelector) {\n        const initColumns = getInitialColumns({ chartWrapper: thisChartWrapper, dataTable: thisDataTable, seriesSelector: seriesSelector });\n        handleSeriesSelection(initColumns, thisChartWrapper);\n      }\n    }\n  }, [google, chartData]);\n\n  const renderChart = () => {\n    if (hasChartControl) {\n      return (\n        <Stack\n          id={`dashboard-${chartID}`}\n          direction={ChartControlType[chartControl.controlType]?.stackDirection || 'column-reverse'}\n          sx={{ height: '100%' }}\n        >\n          <Box\n            id={`control-${chartID}`}\n            sx={{\n              height: `calc(${height} / 8)`,\n              opacity: 0.8,\n              filter: 'saturate(0.3)'\n            }}\n          />\n          <Box id={chartID} sx={{ height: height, maxHeight: maxHeight }} />\n        </Stack>\n      )\n    }\n    else return <Box id={chartID} sx={{ height: height, maxHeight: maxHeight }} />;\n  }\n\n  const onChartReady = () => {\n    if (!isFirstRender) return;\n    // Hide the circleProgress when chart finishes rendering the first time\n    setIsFirstRender(false);\n  };\n\n  return (\n    <GoogleChartStyleWrapper\n      isPortrait={isPortrait}\n      className={className}\n      position=\"relative\"\n      height=\"100%\"\n      minHeight={chartData.chartType === 'Calendar' && '200px'}\n    >\n      {/* Conditionally display loading animation here */}\n      {isFirstRender && (\n        <Box sx={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}>\n          <LoadingAnimation />\n        </Box>\n      )}\n\n      {/* Conditionally display seriesSelector here */}\n      {(seriesSelector && !isFirstRender) && (\n        <SeriesSelector\n          items={dataColumns}\n          allowMultiple={seriesSelector.allowMultiple}\n          selectorID={`${chartData.title}-selector`}\n          onSeriesSelection={handleSeriesSelection}\n        />\n      )}\n\n      {/* Display chart here */}\n      {renderChart()}\n    </GoogleChartStyleWrapper>\n  );\n}","import { useState } from 'react';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport parse from 'html-react-parser';\nimport { useMediaQuery, useTheme } from '@mui/material';\nimport { replacePlainHTMLWithMuiComponents } from '../Utils/Utils';\n\nfunction CollapsibleSubtitle({ text, wordLimit = 50, reference }) {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  // React to changes in screen width\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm')); // 'sm' means \"small and below\"\n\n  const words = text.split(' ');\n\n  // If not on mobile or words are within limit, just display the full text\n  if (!isMobile || words.length <= wordLimit) {\n    return (\n      <>\n        {text &&\n          (\n            <Typography>\n              {parse(text, { replace: replacePlainHTMLWithMuiComponents })}\n            </Typography>\n          )}\n        {reference\n          && (\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              {parse(reference, { replace: replacePlainHTMLWithMuiComponents })}\n            </Typography>\n          )}\n      </>\n    );\n  }\n\n  let displayText = words.slice(0, wordLimit).join(' ');\n  const lastFullStop = displayText.lastIndexOf('.');\n\n  if (lastFullStop !== -1) {\n    displayText = displayText.slice(0, lastFullStop + 1);\n  }\n\n  return (\n    <ClickAwayListener onClickAway={() => setIsExpanded(false)}>\n      <Box onClick={() => setIsExpanded(!isExpanded)} style={{ cursor: 'pointer' }}>\n        {isExpanded\n          ? (\n            <>\n              <Typography>{parse(text, { replace: replacePlainHTMLWithMuiComponents })}</Typography>\n              {reference && <Typography variant=\"caption\" color=\"text.secondary\">{parse(reference, { replace: replacePlainHTMLWithMuiComponents })}</Typography>}\n            </>\n          )\n          : (\n            <>\n              <Typography\n                display=\"inline\"\n              >\n                {parse(displayText, { replace: replacePlainHTMLWithMuiComponents })}\n                ...\n              </Typography>\n              <Typography\n                display=\"inline\"\n                color=\"text.primary\"\n                fontWeight=\"500\"\n                sx={{\n                  ml: 0.5,\n                  '& :hover': {\n                    textDecoration: 'underline'\n                  }\n                }}\n              >\n                See more\n              </Typography>\n            </>\n          )}\n      </Box>\n    </ClickAwayListener>\n  );\n}\n\nexport default CollapsibleSubtitle;\n","import { useState, useEffect } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Box, Tabs, Tab, useMediaQuery, Typography } from '@mui/material/';\n\nimport SubChart from './Subchart/SubChart';\n\nimport CollapsibleSubtitle from './../Components/CollapsibleSubtitle';\nimport { index } from 'd3';\n\nconst debounceMilliseconds = 100;\n\nconst ChartStyleWrapper = styled(Box)(({ theme }) => ({\n  // CSS for dark theme only\n  ...(theme.palette.mode === 'dark' && {\n    // De-saturate a bit\n    filter: 'saturate(0.85)',\n    // Invert iframe\n    '& .heat-map-iframe': {\n      filter: 'invert(0.848) hue-rotate(180deg)',\n    }\n  }),\n  // Special CSS for historical-snapshot-aqi chart\n  '& .historical-snapshot-aqi svg [clip-path*=\"ABSTRACT_RENDERER\"] > g:nth-of-type(1), .historical-snapshot-aqi [id*=\"googlechart-control\"] svg [clip-path*=\"ABSTRACT_RENDERER\"] > g:nth-of-type(2)': {\n    opacity: 0.6\n  },\n  // Center Calendar chart in wrapper\n  '& .Calendar [dir]:not(:empty)': {\n    margin: 'auto'\n  },\n\n  // add horizontal scrollbar to Calendar charts\n  '& .Calendar > div > div:last-of-type > div': {\n    overflowX: 'auto',\n    overflowY: 'hidden',\n    scrollbarGutter: 'stable'\n  }\n}));\n\nconst StyledTabs = styled(Tabs)(({ theme }) => ({\n  '& .MuiTabScrollButton-root': {\n    color: theme.palette.text.primary\n  },\n  '& .MuiTab-root': {\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '0.75rem',\n      paddingLeft: theme.spacing(1),\n      paddingRight: theme.spacing(1)\n    },\n  }\n}));\n\n// eslint-disable-next-line max-len\nfunction ChartControl(props) {\n  const {\n    generalChartSubtitle,\n    generalChartReference,\n    chartData: passedChartData,\n    chartHeight: passedChartHeight,\n    isHomepage\n  } = props;\n  const isSmallWidth = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n\n  const [isPortrait, setIsPortrait] = useState(window.matchMedia('(orientation: portrait)').matches);\n  const [windowSize, setWindowSize] = useState([\n    window.innerWidth,\n    window.innerHeight,\n  ]);\n\n  let chartMaxHeight;\n  let chartHeight = passedChartHeight;\n  const chartData = passedChartData;\n\n  // Props for tab panels (multiple data visualizations in the same chart area, navigate with tab panels)\n  const [currentTab, setCurrentTab] = useState(0); // start with the first tab\n\n  // eventListener for window resize\n  // redraw \"Calendar\" charts and charts with a time filter upon window resize.\n  // Filter & Calendar charts are not automatically respnsive, so we have to redraw them.\n  // redraw other charts when device orientation changes\n  useEffect(() => {\n    setCurrentTab(0); // set tab back to 0 if chartData changes (changed school)\n\n    let timeoutID = null;\n\n    const handleWindowResize = () => {\n      clearTimeout(timeoutID);\n\n      // debounce before triggering re-render. as user is resizing window, the state could\n      // change multiple times causing many expensive rerenders. we try to rerender at the\n      // end of the resize.\n      timeoutID = setTimeout(() => {\n        // Redraw all charts on device orientation change, as the chartWrapperHeights\n        // have changed.\n        setIsPortrait(window.matchMedia('(orientation: portrait)').matches);\n\n        // Redraw all charts on window resized\n        setWindowSize([window.innerWidth, window.innerHeight]);\n      }, debounceMilliseconds);\n    };\n\n    // listen to window resize events\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, [chartData]);\n\n  if (chartData.chartType !== 'Calendar' && !chartHeight) {\n    chartHeight = isPortrait ? '80vw' : '35vw';\n    chartMaxHeight = isPortrait ? '800px' : '500px';\n  }\n\n  // Handle tab change\n  const handleChange = (__, newValue) => {\n    setCurrentTab(newValue);\n  };\n\n  // Function to render only one chart (no subchart --> no tab control)\n  const renderOnlyOneChart = () => {\n    return (\n      <SubChart\n        chartData={chartData}\n        isPortrait={isPortrait}\n        isHomepage={isHomepage}\n        windowSize={windowSize}\n        height={chartData.height ? chartData.height : chartHeight}\n      />\n    );\n  }\n\n  // Function to render multiple subcharts with tab control\n  const renderMultipleSubcharts = () => {\n    return (\n      <>\n        <StyledTabs\n          value={currentTab}\n          onChange={handleChange}\n          variant={isSmallWidth ? 'fullWidth' : 'standard'}\n        >\n          {chartData.subcharts.map((element, index) => (\n            <Tab\n              key={index}\n              value={index}\n              label={chartData.subcharts[index].subchartTitle}\n            />\n          ))}\n        </StyledTabs>\n        <Box\n          position=\"relative\"\n          sx={{\n            overflowX: isPortrait && 'auto',\n            WebkitOverflowScrolling: isPortrait && 'touch',\n            overflowY: 'hidden',\n          }}\n        >\n          {chartData.subcharts.map((__, index) => (\n            <Box\n              key={index}\n              width=\"100%\"\n              height=\"100%\"\n              role=\"tabpanel\"\n              sx={{\n                transition: '0.35s',\n                position: (index === 0) ? '' : 'absolute',\n                opacity: currentTab === index ? '1' : '0',\n                pointerEvents: currentTab === index ? 'auto' : 'none',\n                top: (index === 0) ? '' : 0,\n              }}\n            >\n              <SubChart\n                chartData={chartData}\n                subchartIndex={index}\n                isPortrait={isPortrait}\n                isHomepage={isHomepage}\n                windowSize={windowSize}\n                height={chartData.height ? chartData.height : chartHeight}\n                maxHeight={\n                  ['Calendar'].includes(chartData.chartType)\n                    ? ''\n                    : chartMaxHeight\n                }\n              />\n            </Box>\n          ))}\n        </Box>\n      </>\n    )\n  };\n\n  // Function to render remaining subtitles and references for chart with multiple subcharts\n  const getSubtitles = () => {\n    let text = generalChartSubtitle || '';\n    if (chartData.subcharts && chartData.subcharts[currentTab]?.subchartSubtitle) {\n      text += '<br/><br/>'\n      text += chartData.subcharts[currentTab].subchartSubtitle;\n    }\n    return text;\n  }\n  const getReferences = () => {\n    let text = generalChartReference || '';\n    if (chartData.subcharts && chartData.subcharts[currentTab]?.reference) {\n      text += '<br/>'\n      text += chartData.subcharts[currentTab].reference;\n    }\n    return text;\n  }\n\n  return (\n    <ChartStyleWrapper height=\"100%\">\n      {chartData.subcharts ? renderMultipleSubcharts() : renderOnlyOneChart()}\n\n      {/* Render subtitle and reference below */}\n      <Box sx={{ my: 3 }}>\n        <Typography\n          component=\"div\"\n          variant=\"body1\"\n          color=\"text.secondary\"\n          sx={{ mb: 1 }}\n        >\n          <CollapsibleSubtitle\n            text={getSubtitles()}\n            reference={getReferences()}\n          />\n        </Typography>\n      </Box>\n    </ChartStyleWrapper>\n  );\n}\n\nexport default ChartControl;\n","import { Box, Table, TableBody, TableCell, TableHead, TableRow, styled } from '@mui/material';\nimport parse from 'html-react-parser';\nimport { replacePlainHTMLWithMuiComponents } from '../../Utils/Utils';\nimport ChartControl from '../ChartControl';\nimport AQIdatabase from '../../Utils/AirQualityIndexHelper';\nimport ThemePreferences from '../../Themes/ThemePreferences';\n\nexport const StyledTable = styled(Table)(({ theme, isTiny }) => ({\n  minWidth: isTiny || 700,\n  '& th, td': {\n    fontSize: isTiny ? '0.625rem' : '0.6875rem',\n    color: theme.palette.text.secondary,\n    [theme.breakpoints.down('sm')]: {\n      fontSize: isTiny ? '0.5rem' : '0.6875rem',\n    },\n  },\n  '& th': {\n    fontWeight: 500,\n    color: theme.palette.text.primary,\n    lineHeight: '1rem'\n  }\n}));\n\nfunction AirQualityIndexTable(props) {\n  const { isTiny, hideAQIDescription, themePreference } = props;\n\n  const renderAQIchart = ({ shouldRender }) => {\n    let aqiChart = null;\n\n    if (shouldRender) {\n      const dataArray = [['category'], ['US AQI']];\n      for (let i = 0; i < AQIdatabase.length; i += 1) {\n        dataArray[0].push(AQIdatabase[i].category);\n        dataArray[1].push(\n          Math.ceil((AQIdatabase[i].aqiUS.high - AQIdatabase[i].aqiUS.low) / 50) * 50\n        );\n      }\n\n      aqiChart = (\n        <ChartControl\n          chartHeight=\"4rem\"\n          chartData={\n            {\n              dataArray,\n              chartType: 'BarChart',\n              options: {\n                enableInteractivity: false,\n                legend: { position: 'none' },\n                hAxis: {\n                  ticks: [0, 50, 100, 150, 200, 300, 500]\n                },\n                chartArea:\n                {\n                  width: { portrait: '98%', landscape: '50%' },\n                  height: { portrait: '20%', landscape: '30%' }\n                },\n                isStacked: true,\n                colors: 'aqi',\n                bar: { groupWidth: '100%' }\n              }\n            }\n          }\n        />\n      );\n    }\n\n    return aqiChart;\n  };\n\n  return (\n    <>\n      <Box overflow=\"auto\">\n        <StyledTable size=\"small\" isTiny={isTiny}>\n          <TableHead>\n            <TableRow>\n              <TableCell sx={{ pr: 0 }}>\n                <Box sx={{ width: '1em', height: '1em' }} />\n              </TableCell>\n              <TableCell sx={{ pl: 1 }}>\n                Category\n              </TableCell>\n              <TableCell align=\"right\">US AQI</TableCell>\n              <TableCell align=\"right\">\n                PM2.5 Concentration\n                (µg/m\n                <sup>3</sup>\n                )\n              </TableCell>\n              {!hideAQIDescription && <TableCell align=\"left\">Description</TableCell>}\n              {!hideAQIDescription && <TableCell align=\"left\">CITIESair&apos; Suggested Actions</TableCell>}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {AQIdatabase.map((element, index) => (\n              <TableRow\n                key={index}\n                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n              >\n                <TableCell sx={{ pr: 0 }}>\n                  <Box sx={{ width: '1em', height: '1em', backgroundColor: themePreference === ThemePreferences.light ? element.lightThemeColor : element.darkThemeColor }} />\n                </TableCell>\n                <TableCell sx={{ pl: 1 }}>\n                  {element.category}\n                </TableCell>\n                <TableCell align=\"right\">\n                  {element.aqiUS.low}\n                  &nbsp;\n                  -\n                  &nbsp;\n                  {element.aqiUS.high}\n                </TableCell>\n                <TableCell align=\"right\">\n                  {element.rawPM2_5.low}\n                  &nbsp;\n                  -\n                  &nbsp;\n                  {element.rawPM2_5.high}\n                </TableCell>\n                {!hideAQIDescription && <TableCell align=\"left\">{element.description}</TableCell>}\n                {!hideAQIDescription\n                  && (\n                    <TableCell align=\"left\">\n                      {\n                        parse(element.healthSuggestions.outdoors, {\n                          replace: replacePlainHTMLWithMuiComponents,\n                        })\n                      }\n                    </TableCell>\n                  )}\n              </TableRow>\n            ))}\n          </TableBody>\n        </StyledTable>\n      </Box>\n      {renderAQIchart({ shouldRender: !hideAQIDescription })}\n    </>\n\n  );\n}\n\nexport default AirQualityIndexTable;\n","import { lazy, Suspense } from 'react';\nimport LoadingAnimation from '../../Components/LoadingAnimation';\n\nexport default function ChartSubstituteComponentLoader({ chartSubstituteComponentName }) {\n  return (\n    <Suspense fallback={<LoadingAnimation />}>\n      {(() => {\n        const ChartSubstituteComponent = lazy(\n          () => import(`./${chartSubstituteComponentName}`)\n        );\n        return <ChartSubstituteComponent />;\n      })()}\n    </Suspense>\n  );\n}\n","import { useState } from 'react';\nimport { isMobile } from 'react-device-detect';\n\nimport { Fab, Fade, Popper, Paper, Typography, Stack } from '@mui/material';\nimport AirIcon from '@mui/icons-material/Air';\nimport { FadeInButtonForSpeedDial } from './Header/FadeInButtonForSpeedDial';\n\nimport * as Tracking from '../Utils/Tracking';\nimport AirQualityIndexTable from '../Graphs/ChartSubstituteComponents/AirQualityIndexTable';\n\nexport default function AirQualityIndexLegendQuickGlance(props) {\n  // Mechanism for opening and closing the Quick Glance on hover\n  const [anchorEl, setAnchorEl] = useState(null);\n  const handlePopperOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n    Tracking.sendEventAnalytics(Tracking.Events.airQualityIndexLegendQuickGlance);\n  };\n  const handlePopperClose = () => {\n    setAnchorEl(null);\n  };\n  const open = Boolean(anchorEl);\n\n  return (\n    <>\n      <FadeInButtonForSpeedDial {...props} distanceFromBottomOfWindow=\"5.5rem\">\n        <Fab\n          sx={{ mt: 1 }}\n          aria-owns={open ? Tracking.Events.airQualityIndexLegendQuickGlance : undefined}\n          aria-haspopup=\"true\"\n          onMouseEnter={handlePopperOpen}\n          onMouseLeave={handlePopperClose}\n          onClick={(event) => isMobile && (open ? handlePopperClose() : handlePopperOpen(event))}\n          aria-label={Tracking.Events.airQualityIndexLegendQuickGlance}\n          color=\"primary\"\n        >\n          <Stack direction=\"column\" alignItems=\"center\">\n            <AirIcon fontSize=\"1rem\" />\n            <Typography variant=\"body2\" fontWeight=\"500\">\n              AQI\n            </Typography>\n          </Stack>\n        </Fab>\n      </FadeInButtonForSpeedDial>\n\n      <Popper\n        id={Tracking.Events.airQualityIndexLegendQuickGlance}\n        sx={{\n          pointerEvents: 'none',\n          mt: -1\n        }}\n        open={open}\n        anchorEl={anchorEl}\n        placement=\"top-end\"\n        onClose={handlePopperClose}\n        keepMounted\n        disableRestoreFocus\n        transition\n      >\n        {({ TransitionProps }) => (\n          <Fade {...TransitionProps} timeout={350}>\n            <Paper elevation={8} sx={{ py: 0.5, mb: 1 }}>\n              <Typography sx={{ mx: 2, mt: 1 }} color=\"text.disabled\" variant=\"body1\" fontWeight={500}>\n                AQI at quick glance\n              </Typography>\n              <AirQualityIndexTable isTiny hideAQIDescription themePreference />\n            </Paper>\n          </Fade>\n        )}\n\n      </Popper>\n    </>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport dayjs from 'dayjs';\nimport { styled } from '@mui/material/styles';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { PickersDay } from '@mui/x-date-pickers/PickersDay';\nimport { DateCalendar } from '@mui/x-date-pickers/DateCalendar';\nimport { DayCalendarSkeleton } from '@mui/x-date-pickers/DayCalendarSkeleton';\nimport Card from '@mui/material/Card';\nimport ClickAwayListener from '@mui/base/ClickAwayListener';\n\nconst HighlightedDay = styled(PickersDay)(({ theme }) => ({\n  // styles for dot\n  '&:after, :hover::after': {\n    content: '\".\"',\n    fontSize: '1.5rem',\n    bottom: '-0.5rem',\n    position: 'absolute',\n    color: theme.palette.primary.main,\n    opacity: 0.5\n  },\n  '&:hover::after': {\n    opacity: 1\n  }\n}));\n\nfunction isValidDate(date, validDates) {\n  return validDates.indexOf(dayjs(date).format('YYYY-MM-DD')) >= 0;\n}\n\nfunction CustomDayComponent(props) {\n  const { versionDates = [], day, ...other } = props;\n\n  const isHighlighted = versionDates.indexOf(dayjs(day).format('YYYY-MM-DD')) >= 0;\n\n  return (\n    isHighlighted\n      ? <HighlightedDay {...other} day={day} />\n      : <PickersDay {...other} day={day} />\n  );\n}\n\nexport default function DatasetCalendar(props) {\n  const { smallScreen, onChange, versions } = props;\n\n  const versionDates = versions\n    .filter((version) => version.version.length === 10) // valid date\n    .map((version) => version.version);\n\n  return (\n    <ClickAwayListener onClickAway={() => onChange('close')}>\n      <Card\n        sx={!smallScreen && { position: 'absolute', right: 0, zIndex: 9999 }}\n        raised\n      >\n        <LocalizationProvider dateAdapter={AdapterDayjs}>\n          <DateCalendar\n            loading={!versionDates}\n            format=\"YYYY-MM-DD\"\n            renderLoading={() => <DayCalendarSkeleton />}\n            slots={{\n              day: CustomDayComponent,\n            }}\n            onChange={(value, selectionState) => {\n              if (selectionState === 'finish') {\n                return onChange(dayjs(value).format('YYYY-MM-DD'));\n              }\n              return null;\n            }}\n            slotProps={{\n              day: {\n                versionDates\n              }\n            }}\n            // disable the date if its not a valid date\n            shouldDisableDate={(day) => !isValidDate(day, versionDates)}\n            disableHighlightToday\n            minDate={dayjs(versionDates.slice(-1)[0])}\n            maxDate={dayjs(versionDates[0])}\n          />\n        </LocalizationProvider>\n      </Card>\n    </ClickAwayListener>\n  );\n}\n","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useContext } from 'react';\nimport { Container, Avatar, Modal, Tooltip, Box, Link, Typography, Stack, Select, FormControl, MenuItem, Grid, Chip, Dialog, Button, DialogActions, DialogContent, useMediaQuery, Table, TableBody, TableCell, TableHead, TableRow } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\nimport { RawDatasetsMetadataContext } from '../../ContextProviders/RawDatasetsMetadataContext';\n\nimport DownloadIcon from '@mui/icons-material/Download';\nimport DataObjectIcon from '@mui/icons-material/DataObject';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport EventIcon from '@mui/icons-material/Event';\nimport PublishedWithChangesIcon from '@mui/icons-material/PublishedWithChanges';\n\nimport * as Tracking from '../../Utils/Tracking';\nimport { fetchDataFromURL } from './DatasetFetcher';\nimport DatasetCalendar from './DatasetCalendar';\n\nexport default function DatasetDownloadDialog(props) {\n  const { project } = props;\n  const rawDatasetsMetadata = useContext(RawDatasetsMetadataContext);\n  const [datasets, setDatasets] = useState();\n\n  useEffect(() => {\n    if (!project || !rawDatasetsMetadata) return;\n    setDatasets(rawDatasetsMetadata[project?.id]); // get all the dataset(s) of this project\n  }, [project, rawDatasetsMetadata]);\n\n  const theme = useTheme();\n  const smallScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  function getOwnerString(owners) {\n    if (!owners || owners.length === 0) {\n      return 'the relevant owners';\n    } else if (owners.length === 1) {\n      return owners[0];\n    } else if (owners.length === 2) {\n      return owners.join(' and ');\n    } else {\n      const lastOwner = owners.pop();\n      const oxfordCommaOwners = owners.join(', ');\n      return `${oxfordCommaOwners}, and ${lastOwner}`;\n    }\n  }\n\n  return (\n    <>\n      <Button\n        onClick={() => {\n          handleOpen();\n          Tracking.sendEventAnalytics(Tracking.Events.rawDatasetButtonClicked, {\n            project_id: project.id\n          });\n        }}\n        variant=\"contained\"\n      >\n        <DataObjectIcon sx={{ fontSize: '1rem' }} />&nbsp;Raw Dataset\n      </Button>\n\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        maxWidth=\"lg\"\n        fullWidth\n        fullScreen={smallScreen}\n        keepMounted\n      >\n        {(\n          smallScreen &&\n          <DialogActions justifyContent=\"flex-start\">\n            <Button autoFocus onClick={handleClose}>\n              <ChevronLeftIcon sx={{ fontSize: '1rem' }} />Back\n            </Button>\n          </DialogActions>\n        )}\n\n        <DialogContent sx={{\n          px: smallScreen ? 2 : 3,\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'start',\n          height: '100%'\n        }}>\n          <Chip label={project.title} size=\"small\" sx={{ mb: 1 }} />\n          <Typography variant=\"h6\" >\n            Preview and download raw dataset(s)\n          </Typography>\n\n          <DatasetSelectorAndPreviewer datasets={datasets} smallScreen={smallScreen} project={project} />\n          {\n            datasets &&\n            <Typography variant=\"caption\" sx={{ my: 3, fontStyle: 'italic' }} >\n              This dataset is provided by the CITIES Dashboard with the support of {getOwnerString(project.owners)}. Should you intend to utilize this dataset for your project, research, or publication, we kindly request that you notify us at <Link href='mailto:nyuad.cities@nyu.edu'>nyuad.cities@nyu.edu</Link> to discuss citation requirements.\n            </Typography>\n          }\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\nconst DatasetSelectorAndPreviewer = (props) => {\n  const { datasets, smallScreen, project } = props;\n  const [previewingDataset, setPreviewingDataset] = useState();\n  const [previewingDatasetId, setPreviewingDatasetId] = useState();\n\n  // Preview the first version of the first dataset initially\n  useEffect(() => {\n    if (datasets?.length > 0) {\n      setPreviewingDataset(datasets[0]?.versions[0]);\n      setPreviewingDatasetId(datasets[0]?.id);\n      fetchDataFromURL(datasets[0]?.versions[0]?.rawLink, 'csv').then((data) => {\n        setPreviewingDataset({ ...datasets[0]?.versions[0], fetchedDataset: data });\n      });\n    }\n  }, [datasets]);\n\n  return (\n    <Grid container justifyContent=\"center\" alignItems=\"start\" spacing={3}>\n      <Grid item sm={12} md={6}>\n        <DatasetsTable\n          datasets={datasets}\n          smallScreen={smallScreen}\n          previewingDataset={previewingDataset}\n          setPreviewingDataset={setPreviewingDataset}\n          previewingDatasetId={previewingDatasetId}\n          setPreviewingDatasetId={setPreviewingDatasetId}\n        />\n      </Grid>\n      <Grid item sm={12} md={6} maxWidth={smallScreen ? '100%' : 'unset'} sx={{ mt: 1 }}>\n        <PreviewDataset\n          previewingDataset={previewingDataset}\n          previewingDatasetId={previewingDatasetId}\n          project={project}\n          smallScreen={smallScreen}\n        />\n      </Grid>\n    </Grid>\n  )\n};\n\nconst DatasetsTable = (props) => {\n  const { datasets, smallScreen, previewingDataset, setPreviewingDataset, previewingDatasetId, setPreviewingDatasetId } = props;\n  return (\n    <Table\n      size=\"small\"\n      sx={{\n        tableLayout: 'fixed',\n        '& td, div, .MuiMenuItem-root': {\n          fontSize: smallScreen ? '0.625rem' : '0.8rem'\n        }\n      }}\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell sx={{ pl: 1 }}>\n            Dataset\n          </TableCell>\n          <TableCell sx={{ width: smallScreen ? '9.5rem' : '11rem' }}>Version</TableCell>\n          <TableCell sx={{ width: smallScreen ? '5rem' : '6rem' }}>\n            Size\n          </TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {datasets?.map((dataset) => (\n          <Dataset\n            smallScreen={smallScreen}\n            dataset={dataset}\n            previewingDataset={previewingDataset}\n            setPreviewingDataset={setPreviewingDataset}\n            isPreviewing={dataset.id === previewingDatasetId}\n            setPreviewingDatasetId={setPreviewingDatasetId}\n          />\n        ))}\n      </TableBody>\n    </Table>\n  )\n}\n\nconst Dataset = (props) => {\n  const { smallScreen, dataset, setPreviewingDataset, isPreviewing, previewingDatasetId, setPreviewingDatasetId } = props;\n\n  const [fetchedDatasets, setFetchedDatasets] = useState({});\n  const NUM_RECENT_VERSIONS = 3;\n\n  const latestVersionOfThisDataset = dataset?.versions[0] || {};\n  const [showCalendar, setShowCalendar] = useState(false);\n  const [selectedVersionOfThisDataset, setSelectedVersionOfThisDataset] = useState(latestVersionOfThisDataset);\n\n  // only show NUM_RECENT_VERSIONS rows in Dropdown\n  const visibleVersions = dataset?.versions.slice(0, NUM_RECENT_VERSIONS);\n  // if currently selected version is not in first NUM_RECENT_VERSION rows,\n  // add it to the list\n  if (!visibleVersions.find((version) => version == selectedVersionOfThisDataset)) {\n    visibleVersions.push({ ...selectedVersionOfThisDataset, isOlderVersion: true });\n  }\n\n  // only show Calendar option if there are more than NUM_RECENT_VERSIONS versions\n  const shouldShowCalendar = dataset?.versions.length > NUM_RECENT_VERSIONS;\n\n  const handleVersionChange = (event) => {\n    const selectedVal = event.target.value;\n    if (selectedVal === 'Calendar') {\n      setShowCalendar(true);\n      return;\n    }\n    // Loop through the array (allVersionsOfThisDataset) to find the one with the selected version\n    const selectedVersion = dataset?.versions.find(aDatasetVersion => {\n      return aDatasetVersion.version === selectedVal;\n    });\n    setSelectedVersionOfThisDataset(selectedVersion);\n    setPreviewingDatasetId(dataset.id);\n    setPreviewingDataset(selectedVersion);\n\n    fetchThisDataset(selectedVersion);\n  };\n\n  const handleCalendarChange = (event) => {\n    // close calendar after selecting\n    setShowCalendar(false)\n    if (event === 'close') { // click outside of card\n      return\n    }\n\n    handleVersionChange({ target: { value: event } });\n  }\n\n  const fetchThisDataset = (selectedVersion) => {\n    // If this dataset version hasn't been fetched yet,\n    // fetch it and append it into the object fetchedDatasets\n    if (!fetchedDatasets[selectedVersion.version]) {\n      fetchDataFromURL(selectedVersion.rawLink, 'csv').then((data) => {\n        const selectedVersionWithFetchedDataset = { ...selectedVersion, fetchedDataset: data };\n        setPreviewingDataset(selectedVersionWithFetchedDataset);\n        setFetchedDatasets({\n          ...fetchedDatasets,\n          [selectedVersionWithFetchedDataset.version]: selectedVersionWithFetchedDataset\n        });\n      });\n    }\n    // If it has been fetched before, simply get it from memory \n    else {\n      setPreviewingDataset(fetchedDatasets[selectedVersion.version]);\n    }\n  }\n\n  const setThisDatasetToPreview = () => {\n    if (previewingDatasetId !== dataset.id) {\n      setPreviewingDatasetId(dataset.id);\n      setPreviewingDataset(selectedVersionOfThisDataset);\n      fetchThisDataset(selectedVersionOfThisDataset);\n    }\n  }\n\n  const theme = useTheme();\n\n  const formatFileSize = (sizeInBytes) => {\n    if (!sizeInBytes) return;\n\n    if (sizeInBytes < 1024 * 1024) {\n      return (sizeInBytes / 1024).toFixed(1) + \" KB\";\n    } else {\n      return (sizeInBytes / (1024 * 1024)).toFixed(1) + \" MB\";\n    }\n  }\n\n  return (\n    <>\n      <TableRow key={dataset.id}>\n        <TableCell\n          sx={{\n            pl: 1,\n            cursor: 'pointer',\n            background: isPreviewing && theme.palette.background.NYUpurpleLight\n          }}\n          onClick={setThisDatasetToPreview}>\n          {selectedVersionOfThisDataset?.name}\n        </TableCell>\n\n        <TableCell sx={{ position: 'relative', background: isPreviewing && theme.palette.background.NYUpurpleLight }}>\n          {showCalendar &&\n            (smallScreen ? <Modal\n              open={showCalendar}\n              sx={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center'\n              }}\n            >\n              <DatasetCalendar\n                onChange={handleCalendarChange}\n                smallScreen={smallScreen}\n                versions={dataset?.versions}\n              />\n            </Modal>\n              : <DatasetCalendar\n                onChange={handleCalendarChange}\n                versions={dataset?.versions}\n              />)}\n          <FormControl size=\"small\">\n            <Select\n              value={selectedVersionOfThisDataset?.version}\n              onClick={() => {\n                if (dataset.versions.length <= 1) setThisDatasetToPreview();\n              }}\n              onChange={handleVersionChange}\n              variant=\"standard\"\n              MenuProps={{ disablePortal: true }}\n            >\n              {visibleVersions.map((aDatasetVersion, index) => (\n                <MenuItem\n                  key={aDatasetVersion.version}\n                  value={aDatasetVersion.version}\n                  sx={[\n                    (index === visibleVersions.length - 1) && {\n                      mb: -0.75\n                    },\n                    aDatasetVersion.isOlderVersion && {\n                      marginTop: '1rem',\n                      '&::before': {\n                        content: '\"\"',\n                        borderTop: `2px dotted ${theme.palette.text.secondary}`,\n                        width: '1rem',\n                        height: '1rem',\n                        position: 'absolute',\n                        top: 0,\n                        left: '50%',\n                        transform: 'translate(-50%, -50%)'\n                      }\n                    }\n                  ]}\n                >\n                  <Stack direction=\"row\" alignItems=\"center\">\n                    {aDatasetVersion.version}\n                    { /* 'LATEST' chip for latest version */}\n                    {aDatasetVersion === latestVersionOfThisDataset &&\n                      <Tooltip title=\"Latest version\" enterDelay={0} leaveDelay={200}>\n                        <Avatar sx={{\n                          ml: 0.5,\n                          width: '1rem',\n                          height: '1rem',\n                          background: theme.palette.success.main\n                        }}>\n                          <PublishedWithChangesIcon sx={{ width: '0.8rem', height: '0.8rem' }} />\n                        </Avatar>\n                      </Tooltip>\n                    }\n                  </Stack>\n                </MenuItem>\n              ))}\n\n              {shouldShowCalendar && <MenuItem\n                key=\"Calendar\"\n                value=\"Calendar\"\n                sx={{ pt: 1, mt: 1, mb: -0.75, borderTop: '0.5px solid' }}\n              >\n                <Stack direction=\"row\" alignItems=\"center\">\n                  Older Versions\n                  <EventIcon fontSize='small' sx={{ ml: 0.5 }} />\n                </Stack>\n              </MenuItem>\n              }\n            </Select>\n          </FormControl>\n        </TableCell>\n        <TableCell sx={{ background: isPreviewing && theme.palette.background.NYUpurpleLight }}>\n          {formatFileSize(selectedVersionOfThisDataset?.sizeInBytes)}\n        </TableCell>\n      </TableRow >\n    </>\n  )\n}\n\nconst PreviewDataset = (props) => {\n  const { previewingDataset, previewingDatasetId, project, smallScreen } = props;\n  const downloadDatasetName = `[${project.id}] ${previewingDataset?.name}-${previewingDataset?.version}.csv`;\n\n  const theme = useTheme();\n\n  const downloadPreviewingDataset = () => {\n    if (!previewingDataset?.fetchedDataset) return;\n\n    const blob = new Blob([previewingDataset?.fetchedDataset], { type: 'application/octet-stream' }); // create a Blob with the raw data\n    const url = URL.createObjectURL(blob); // create a download link for the Blob\n    const downloadLink = document.createElement('a');\n    downloadLink.href = url;\n    downloadLink.download = downloadDatasetName;\n    document.body.appendChild(downloadLink);\n    downloadLink.click(); // simulate a click on the download link\n    URL.revokeObjectURL(url); // clean up by revoking the object URL\n    document.body.removeChild(downloadLink);\n  };\n\n  const [formattedData, setFormattedData] = useState('');\n  const [rowIndices, setRowIndices] = useState('');\n  const numFirstLastRowsToPreview = 5;\n\n  useEffect(() => {\n    if (!previewingDataset?.fetchedDataset) return;\n\n    const csvData = previewingDataset?.fetchedDataset;\n    const lines = csvData.split('\\n');\n    const numRows = lines.length;\n\n    if (numRows <= numFirstLastRowsToPreview * 2) {\n      setFormattedData(csvData);\n      setRowIndices(Array.from({ length: numRows }, (_, index) => index + 1).join('\\n')); // +1 because rowNumber starts at 1 while index starts at 0\n    } else {\n\n      const firstRows = lines.slice(0, numFirstLastRowsToPreview);\n      const lastRows = lines.slice(numRows - numFirstLastRowsToPreview);\n\n      const numOfHiddenRows = numRows - 2 * numFirstLastRowsToPreview;\n\n      const middleRow = [`... [${numOfHiddenRows} rows hidden] ...`];\n\n      setFormattedData(firstRows.concat(middleRow).concat(lastRows).join('\\n'));\n      setRowIndices(\n        Array.from({\n          length: numFirstLastRowsToPreview * 2 + 1 // +1 to account for the middleRow\n        },\n          (_, index) => {\n            const rowIndex = index + 1; // +1 because rowNumber starts at 1 while index starts at 0\n            // Indices for the first rows\n            if (rowIndex < numFirstLastRowsToPreview + 1) {\n              return rowIndex;\n            }\n            // No index for the middle row\n            else if (rowIndex == numFirstLastRowsToPreview + 1) {\n              return '';\n            }\n            // Indices for the last rows\n            else {\n              return numOfHiddenRows + rowIndex - 1;\n            }\n          })\n          .join('\\n'));\n    }\n\n  }, [previewingDataset]);\n\n  return (\n    <Stack spacing={1}>\n      <Box sx={{ '& *': { fontFamily: \"monospace !important\" } }}>\n        <Stack direction=\"row\">\n          <Typography variant='body2' gutterBottom fontWeight={500}>\n            {previewingDataset ?\n              `Previewing: ${previewingDataset.name} (${previewingDataset?.version})`\n              : 'Not previewing any dataset'}\n          </Typography>\n        </Stack>\n\n        <Box\n          component=\"pre\"\n          sx={{\n            overflowX: 'auto',\n            color: theme.palette.text.secondary,\n            backgroundColor: theme.palette.customBackground,\n            p: 2,\n            pt: 1.5,\n            borderRadius: theme.spacing(1),\n            borderTopLeftRadius: 0,\n            minHeight: \"5rem\",\n            width: smallScreen ? '100%' : 'unset',\n            marginTop: 0\n          }}\n        >\n          <Stack direction=\"row\" sx={{ fontSize: smallScreen ? '0.625rem !important' : '0.8rem !important' }}>\n            <Box sx={{ mr: 2, userSelect: 'none' }}>\n              {rowIndices}\n            </Box>\n            <Box>\n              {formattedData}\n            </Box>\n          </Stack>\n        </Box>\n      </Box>\n      <Box textAlign=\"center\" >\n        <Button\n          variant=\"contained\"\n          sx={{\n            textTransform: 'none',\n            textAlign: 'left',\n            lineHeight: 1.1,\n            px: 1.5,\n            py: 1\n          }}\n          onClick={() => {\n            downloadPreviewingDataset();\n            Tracking.sendEventAnalytics(Tracking.Events.rawDatasetDownloaded, {\n              project_id: project.id,\n              dataset_id: previewingDatasetId,\n              dataset_name: previewingDataset.name,\n              dataset_version: previewingDataset.version\n            });\n          }}\n          disabled={!previewingDataset}\n        >\n          <DownloadIcon sx={{ fontSize: '1.25rem', mr: 0.5 }} />\n          {previewingDataset ? downloadDatasetName : \"No dataset available to download\"}\n        </Button>\n      </Box>\n    </Stack >\n  )\n}","// disable eslint for this file\n/* eslint-disable */\nimport { Button, Box } from \"@mui/material\";\nimport { Link } from 'react-router-dom';\nimport TvIcon from '@mui/icons-material/Tv';\nimport HoverMenu from 'material-ui-popup-state/HoverMenu';\nimport PopupState, { bindHover, bindFocus, bindMenu } from 'material-ui-popup-state';\nimport MenuItemAsNavLink from \"./Header/MenuItemAsNavLink\";\nimport NavLinkBehavior from \"./Header/NavLinkBehavior\";\n\nconst ScreenDialog = ({ schoolID, screens }) => {\n  if (!Array.isArray(screens)) return null;\n\n  if (screens.length <= 1) return <LinkButtonToScreen url={`/screen/${schoolID}`} />\n  else return <DialogToScreen schoolID={schoolID} screens={screens} />\n};\n\nconst DialogToScreen = ({ schoolID, screens }) => {\n  return (\n    <PopupState variant=\"popover\" popupId=\"tv-screens-list\">\n      {(popupState) => (\n        <>\n          <Button\n            variant=\"contained\"\n            {...bindHover(popupState)}\n            {...bindFocus(popupState)}\n          >\n            <TvIcon sx={{ fontSize: '1rem' }} />&nbsp;TV Screens List\n          </Button>\n          <HoverMenu\n            {...bindMenu(popupState)}\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n            onClick={popupState.close}\n          >\n            {\n              screens.map((screen, index) => (\n                <MenuItemAsNavLink\n                  key={index}\n                  behavior={NavLinkBehavior.toNewPage}\n                  to={`/screen/${schoolID}/${screen.screen_name}`}\n                  label={screen.location_long}\n                  sx={{ fontSize: '0.8rem' }}\n                />\n              ))}\n          </HoverMenu>\n        </>\n      )}\n    </PopupState>\n  )\n}\n\nconst LinkButtonToScreen = ({ url }) => {\n  return (\n    <Button\n      variant=\"contained\"\n      component={Link}\n      to={url}\n    >\n      <TvIcon sx={{ fontSize: '1rem' }} />&nbsp;TV Screen\n    </Button>\n  )\n}\n\nexport default ScreenDialog;","// disable eslint for this file\n/* eslint-disable */\n\nimport { useState } from \"react\";\nimport { Menu, MenuItem, MenuList } from \"@mui/material\";\nimport { CustomChip } from \"../Project/Project\";\n\nimport PlaceIcon from '@mui/icons-material/Place';\nimport { LocalStorage } from \"../../Utils/LocalStorage\";\n\nexport const SchoolSelector = (props) => {\n  const { currentSchoolID, currentSchoolName, allowedSchools, fetchDataForDashboard } = props;\n\n  if (!Array.isArray(allowedSchools) || allowedSchools.length <= 1)\n    return (\n      <CustomChip\n        icon={<PlaceIcon />}\n        label={currentSchoolName}\n        tooltipTitle={\"School\"}\n      />\n    );\n\n  const [schoolID, setSchoolID] = useState('');\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleItemSelect = (schoolID) => () => {\n    if (currentSchoolID !== schoolID) {\n      localStorage.setItem(LocalStorage.schoolID, schoolID)\n      setSchoolID(schoolID);\n      fetchDataForDashboard(schoolID);\n    }\n    handleClose();\n  };\n\n  return (\n    <>\n      <CustomChip\n        icon={<PlaceIcon />}\n        label={currentSchoolName}\n        tooltipTitle={\"Click to Select School\"}\n        clickable\n        onClick={handleClick}\n        aria-controls={open ? 'basic-menu' : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={open ? 'true' : undefined}\n      />\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n        MenuListProps={{\n          'aria-labelledby': 'basic-button',\n        }}\n      >\n        <MenuList dense>\n          {allowedSchools.map((school, index) => (\n            <MenuItem\n              key={index}\n              onClick={handleItemSelect(school.school_id)}\n            >\n              {school.name}\n            </MenuItem>\n          ))}\n        </MenuList>\n      </Menu>\n    </>\n  );\n};\n\n","const AirQualityExplanation = {\n  title: \"Explanation of the US Air Quality Index (AQI)\",\n  subtitle: \"CITIESair uses the <a href='https://www.airnow.gov/aqi/aqi-basics/'>Air Quality Index (AQI)</a> developed by the United States Environmental Protection Agency (EPA) to effectively communicate different levels of PM2.5 air pollution. To calculate the AQI from the raw measurement of PM2.5 concentration (µg/m³), different breakpoints and piecewise linear function are utilized (read more <a href='https://en.wikipedia.org/wiki/Air_quality_index#United_States'>here</a>). Higher AQI values correspond to poorer air quality and greater heath risks to humans.<br><br>The US EPA sets thresholds for PM2.5 concentration: <sup>[1]</sup><ul><li><b>Annual average</b>: 12.0 µg/m³, corresponding to US AQI <b>50</b></li><li><b>24-hour average</b>: 35.0 µg/m³, corresponding to US AQI <b>100</b></li></ul>In 2021, the World's Heath Organization (WHO) proposed a new guideline for PM2.5<sup>[2]</sup> with stricter thresholds than those of the US EPA:<ul><li><b>Annual average</b>: 5.0 µg/m³, corresponding to US AQI <b>21</b></li><li><b>24-hour average</b>: 15.0 µg/m³, corresponding to US AQI <b>56</b></li></ul>\",\n  reference: \"[1] \\\"National Ambient Air Quality Standards (NAAQS) for PM.\\\" EPA, Environmental Protection Agency, https://www.epa.gov/pm-pollution/national-ambient-air-quality-standards-naaqs-pm.<br>[2] World Health Organization. \\\"WHO global air quality guidelines: particulate matter (PM2. 5 and PM10), ozone, nitrogen dioxide, sulfur dioxide and carbon monoxide: executive summary.\\\" (2021).\",\n}\n\nexport default AirQualityExplanation;","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useContext } from 'react';\nimport { LinkContext } from '../../ContextProviders/LinkContext';\nimport parse from 'html-react-parser';\nimport ChartControl from '../../Graphs/ChartControl';\nimport UppercaseTitle from '../../Components/UppercaseTitle';\nimport { Box, Typography, Container, Divider, Chip, Grid, Tooltip, Stack, Skeleton } from '@mui/material';\n\nimport { useTheme } from '@mui/material/styles';\n\nimport ThemePreferences from '../../Themes/ThemePreferences';\n\nimport AirQualityIndexLegendQuickGlance from '../../Components/AirQualityHelper';\n\nimport jsonData from '../../section_data.json';\n\nimport PersonIcon from '@mui/icons-material/Person';\nimport EmailIcon from '@mui/icons-material/Email';\nimport PublishedWithChangesIcon from '@mui/icons-material/PublishedWithChanges';\nimport BarChartIcon from '@mui/icons-material/BarChart';\n\nimport { replacePlainHTMLWithMuiComponents } from '../../Utils/Utils';\nimport DatasetDownloadDialog from '../../Components/DatasetDownload/DatasetDownloadDialog';\nimport ScreenDialog from '../../Components/ScreenDialog';\n\nimport { scrollToSection } from '../../Components/Header/MenuItemAsNavLink';\nimport FullWidthBox from '../../Components/FullWidthBox';\n\nimport * as Tracking from '../../Utils/Tracking';\n\nimport CurrentAQIGrid from '../../Components/CurrentAQIGrid';\nimport { SchoolSelector } from \"../Dashboard/SchoolSelector\";\n\nimport AirQualityIndexTable from '../../Graphs/ChartSubstituteComponents/AirQualityIndexTable';\nimport ExpandableSection from './ExpandableSection';\nimport AirQualityExplanation from '../../Utils/AirQualityExplanation';\nimport { UserContext } from '../../ContextProviders/UserContext';\nimport LoadingAnimation from '../../Components/LoadingAnimation';\n\n// Custom Chip component to display metadata\nexport const CustomChip = (props) => {\n  const { tooltipTitle, label, ...otherProps } = props;\n  return (\n    <Tooltip title={tooltipTitle} enterDelay={0} leaveDelay={200}>\n      <Chip\n        size=\"small\"\n        label={label || <Skeleton variant=\"text\" sx={{ minWidth: '5rem' }} />}\n        {...otherProps}\n      />\n    </Tooltip>\n  );\n}\n\nconst Project = ({ themePreference, schoolMetadata, currentData, dashboardData, fetchDataForDashboard, temperatureUnitPreference }) => {\n  const [_, __, ___, setChartsTitlesList] = useContext(LinkContext);\n\n  let lastUpdate;\n\n  const { user } = useContext(UserContext);\n\n  // Update the chart title list for quick navigation\n  useEffect(() => {\n    if (!dashboardData?.charts) return;\n\n    const chartsTitles = dashboardData?.charts.map((element, index) => ({ chartTitle: element.title, chartID: `chart-${index + 1}` }));\n    setChartsTitlesList(chartsTitles);\n  }, [dashboardData]);\n\n  const theme = useTheme();\n\n  const getDashboardTitle = () => {\n    if (schoolMetadata?.school_id) return `Air Quality | ${schoolMetadata?.school_id}`\n  }\n\n  return (\n    <>\n      <Box width=\"100%\">\n        <AirQualityIndexLegendQuickGlance themePreference={themePreference} />\n\n        <FullWidthBox backgroundColor='customAlternateBackground'>\n          <Container sx={{ pt: 5, pb: 3 }}>\n            <UppercaseTitle text={getDashboardTitle()} />\n\n            <Grid container spacing={1} sx={{ mt: -3, pb: 3 }}>\n              <Grid item>\n                <SchoolSelector\n                  currentSchoolID={schoolMetadata?.school_id}\n                  currentSchoolName={schoolMetadata?.name}\n                  allowedSchools={user.allowedSchools}\n                  fetchDataForDashboard={fetchDataForDashboard}\n                />\n              </Grid>\n\n              <Grid item>\n                <CustomChip\n                  icon={<PersonIcon />}\n                  label={schoolMetadata?.contactPerson}\n                  tooltipTitle=\"Contact Person\"\n                />\n              </Grid>\n\n              <Grid item>\n                <CustomChip\n                  icon={<EmailIcon />}\n                  label={schoolMetadata?.contactEmail}\n                  tooltipTitle=\"Contact Email\"\n                  component=\"a\"\n                  href={`mailto:${schoolMetadata?.contactEmail}`}\n                  clickable\n                />\n              </Grid>\n\n              <Grid item>\n                <CustomChip\n                  icon={<BarChartIcon />}\n                  label={`${dashboardData?.charts?.length || \"...\"} Chart${dashboardData?.charts?.length !== 1 ? 's' : ''}`}\n                  tooltipTitle=\"Number of Charts\"\n                  onClick={() => {\n                    scrollToSection(jsonData.charts.id);\n                    // Tracking.sendEventAnalytics(Tracking.Events.internalNavigation,\n                    //   {\n                    //     destination_id: jsonData.charts.id,\n                    //     destination_label: jsonData.dashboardData?.toString(),\n                    //     origin_id: 'chip'\n                    //   })\n                  }}\n                />\n              </Grid>\n\n              {\n                lastUpdate &&\n                <Grid item>\n                  <CustomChip\n                    icon={<PublishedWithChangesIcon />}\n                    label={`Last update: ${lastUpdate}`}\n                    tooltipTitle=\"Last Update\" />\n                </Grid>\n              }\n            </Grid>\n\n            <Box textAlign=\"center\" sx={{ mb: 2 }}>\n              <CurrentAQIGrid\n                currentSensorsData={currentData}\n                isScreen={false}\n                temperatureUnitPreference={temperatureUnitPreference}\n              />\n            </Box>\n            <Typography\n              component=\"div\"\n              variant=\"body1\"\n              color=\"text.secondary\"\n              sx={{\n                textAlign: 'justify', pb: 2, mb: 0, \"& table *\": {\n                  color: `${theme.palette.text.secondary}`\n                }\n              }}\n              gutterBottom\n            >\n              {\n                dashboardData?.description ?\n                  parse(dashboardData?.description || '', {\n                    replace: replacePlainHTMLWithMuiComponents,\n                  })\n                  :\n                  Array.from({ length: 3 }).map((_, index) => (\n                    <Skeleton key={index} variant='text' />\n                  ))\n              }\n            </Typography>\n            <Stack direction=\"row\" spacing={2}>\n              <ScreenDialog schoolID={schoolMetadata?.school_id} screens={schoolMetadata?.screens} />\n\n              {/* <DatasetDownloadDialog project={project} /> */}\n\n            </Stack>\n            <ExpandableSection\n              title={AirQualityExplanation.title}\n              content={(\n                <>\n                  <AirQualityIndexTable themePreference={themePreference} />\n                  <Typography\n                    component=\"div\"\n                    variant=\"body1\"\n                    color=\"text.secondary\"\n                    sx={{ mt: 2 }}\n                  >\n                    {parse(AirQualityExplanation.subtitle, {\n                      replace: replacePlainHTMLWithMuiComponents,\n                    })}\n                  </Typography>\n                  <ExpandableSection\n                    title={\"Reference\"}\n                    content={(\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        {parse(AirQualityExplanation.reference, {\n                          replace: replacePlainHTMLWithMuiComponents,\n                        })}\n                      </Typography>\n                    )}\n                  />\n                </>\n              )}\n            />\n\n          </Container>\n        </FullWidthBox>\n\n        <Box id={jsonData.charts.id}>\n          {\n            dashboardData?.charts ?\n              dashboardData?.charts?.map((element, index) => (\n                <FullWidthBox\n                  key={index}\n                  backgroundColor={\n                    index % 2 != 0 && 'customAlternateBackground'\n                  }\n                >\n                  <Container\n                    sx={{ pt: 4, pb: 4 }}\n                    height=\"auto\"\n                    className={themePreference === ThemePreferences.dark ? 'dark' : ''}\n                    id={`chart-${index + 1}`}\n                  >\n                    <Typography variant=\"h6\" color=\"text.primary\">\n                      {index + 1}. {element.title}\n                    </Typography>\n\n                    <ChartControl\n                      generalChartSubtitle={element.subtitle}\n                      generalChartReference={element.reference}\n                      chartData={{\n                        chartIndex: index,\n                        ...element,\n                      }}\n                    />\n                  </Container>\n                </FullWidthBox>\n              ))\n              :\n              <LoadingAnimation optionalText=\"Loading Dashboard\" />\n          }\n\n        </Box>\n\n        <Divider />\n      </Box>\n    </>\n  );\n};\n\nexport default Project;\n","// disable eslint for this file\n/* eslint-disable */\n\nimport { useState, useEffect, useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { fetchDataFromURL } from \"../../Components/DatasetDownload/DatasetFetcher\";\nimport Project from \"../Project/Project\";\nimport { EndPoints, fetchAndProcessCurrentSensorsData, getApiUrl } from \"../../Utils/ApiUtils\";\nimport { LinkContext } from \"../../ContextProviders/LinkContext\";\n\nimport { UserContext } from \"../../ContextProviders/UserContext\";\nimport { LocalStorage } from \"../../Utils/LocalStorage\";\n\nconst Dashboard = ({ themePreference, temperatureUnitPreference, title }) => {\n  // Update the page's title\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n\n  const [_, setCurrentPage, __, ___] = useContext(LinkContext);\n  useEffect(() => {\n    setCurrentPage('dashboard');\n  }, []);\n\n  const { user } = useContext(UserContext);\n  const navigate = useNavigate();\n\n  const emptySchoolMetadata = {};\n  const [schoolMetadata, setSchoolMetadata] = useState(emptySchoolMetadata);\n  const emptyCurrentData = null;\n  const [currentData, setCurrentData] = useState(emptyCurrentData);\n  const emptyChartDataForDashboard = {};\n  const [chartDataForDashboard, setChartDataForDashboard] = useState(emptyChartDataForDashboard);\n\n  useEffect(() => {\n    if (user.checkedAuthentication === true && user.authenticated === false) {\n      navigate('/login');\n    }\n\n    const allowedSchools = user.allowedSchools;\n    if (Array.isArray(allowedSchools) && allowedSchools.length > 0) {\n      let school_id;\n\n      // If there has been a previouslySelectedSchoolID, then load dashboard data for this one\n      const previouslySelectedSchoolID = localStorage.getItem(LocalStorage.schoolID);\n      if (allowedSchools.map((school) => school.school_id).includes(previouslySelectedSchoolID)) school_id = previouslySelectedSchoolID;\n      // If not existed yet, then just get the first school in the list\n      else {\n        school_id = allowedSchools[0].school_id;\n        localStorage.setItem(LocalStorage.schoolID, school_id)\n      }\n\n      // If there is no schoolMetadata or currentData or chartData, then fetch them\n      if (Object.keys(schoolMetadata).length === 0 ||\n        !currentData ||\n        Object.keys(chartDataForDashboard).length === 0\n      ) {\n        fetchDataForDashboard(school_id);\n      }\n    }\n  }, [user]);\n\n  const fetchDataForDashboard = async (school_id) => {\n    const schoolMetadataUrl = getApiUrl({\n      endpoint: EndPoints.schoolmetadata,\n      school_id: school_id\n    });\n\n    setSchoolMetadata(emptySchoolMetadata);\n    setCurrentData(emptyCurrentData);\n    setChartDataForDashboard({ ...chartDataForDashboard, charts: null });\n\n    const currentUrl = getApiUrl({\n      endpoint: EndPoints.current,\n      school_id: school_id\n    });\n    \n    const chartDataUrl = getApiUrl({\n      endpoint: EndPoints.chartdata,\n      school_id: school_id\n    });\n    \n    const dashboardData = await Promise.all([\n      fetchDataFromURL(schoolMetadataUrl, 'json', true),\n      fetchAndProcessCurrentSensorsData(currentUrl)\n    ]) \n\n    const schoolMetadata = dashboardData[0]\n    const currentData = dashboardData[1]\n    setSchoolMetadata(schoolMetadata);\n    setCurrentData(currentData);\n\n    fetchDataFromURL(chartDataUrl, 'json', true)\n    .then(data => {\n      setChartDataForDashboard(data);\n    })\n    .catch((error) => {\n      console.log(error);\n    })\n\n    \n  }\n\n  return (\n    <>\n      <Project\n        themePreference={themePreference}\n        schoolMetadata={schoolMetadata}\n        currentData={currentData}\n        dashboardData={chartDataForDashboard}\n        fetchDataForDashboard={fetchDataForDashboard}\n        temperatureUnitPreference={temperatureUnitPreference}\n      />\n    </>\n  )\n};\n\nexport default Dashboard;","// disable eslint for this file\n/* eslint-disable */\nimport { useState } from 'react';\nimport { styled } from '@mui/material/styles';\n\nimport MuiAccordion from '@mui/material/Accordion';\nimport MuiAccordionSummary from '@mui/material/AccordionSummary';\nimport MuiAccordionDetails from '@mui/material/AccordionDetails';\nimport { Box, Typography, Tooltip } from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n\nimport * as Tracking from '../../Utils/Tracking';\n\nconst StyledAccordion = styled(MuiAccordion)(({ theme, expanded }) => ({\n  color: theme.palette.text.secondary,\n  backgroundImage: 'none',\n  backgroundColor: expanded ? theme.palette.background.default : 'transparent',\n  boxShadow: expanded ? theme.shadows : 'none',\n  transition: 'none',\n}));\n\nconst StyledAccordionSummary = styled(MuiAccordionSummary)(({ theme, expanded }) => ({\n  marginTop: expanded ? theme.spacing(3) : 0,\n  flexDirection: 'row-reverse',\n  paddingLeft: expanded ? theme.spacing(1) : 0,\n  '& .MuiTypography-root': {\n    color: theme.palette.text.primary,\n    textDecoration: 'underline',\n    transition: 'none',\n    '&:hover': {\n      color: theme.palette.primary.main,\n    },\n  },\n}));\n\nconst ExpandableSection = ({ title, content }) => {\n  const [expanded, setExpanded] = useState(undefined);\n\n  const handleAccordionChange = (panel) => (event, isExpanded) => {\n    setExpanded(isExpanded ? panel : undefined);\n\n    Tracking.sendEventAnalytics(isExpanded ? Tracking.Events.expandSampleData : Tracking.Events.collapseSampleData);\n  };\n\n  return (\n    <Box>\n      <StyledAccordion\n        expanded={expanded === \"panel1\"}\n        onChange={handleAccordionChange(\"panel1\")}\n        transitionDuration={0}\n      >\n        <StyledAccordionSummary expanded={expanded} expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1a-content\" id=\"panel1a-header\">\n          <Tooltip title={expanded ? \"Click to collapse\" : \"Click to expand\"} enterDelay={0} leaveDelay={200}>\n            <Typography component=\"a\" variant=\"body2\">\n              {title}\n            </Typography>\n          </Tooltip>\n        </StyledAccordionSummary>\n        <MuiAccordionDetails>\n          {content}\n        </MuiAccordionDetails>\n      </StyledAccordion>\n    </Box>\n  );\n}\n\nexport default ExpandableSection;","var map = {\n\t\"./AirQualityIndexTable\": 8416,\n\t\"./AirQualityIndexTable.jsx\": 8416,\n\t\"./ChartSubstituteComponentLoader\": 5276,\n\t\"./ChartSubstituteComponentLoader.jsx\": 5276\n};\n\nfunction webpackAsyncContext(req) {\n\treturn Promise.resolve().then(function() {\n\t\tif(!__webpack_require__.o(map, req)) {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t}\n\n\t\tvar id = map[req];\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 6598;\nmodule.exports = webpackAsyncContext;"],"names":["displayLastUpdateAndSensorStatus","sensorData","isScreen","current","sensor_status","SensorStatus","variant","sx","mt","fontWeight","color","AQIdatabase","mr","timestamp","sensor","last_seen","getFormattedElapsedTimeFromNow","props","currentSensorsData","temperatureUnitPreference","container","justifyContent","verticalAlign","fontSize","fontFamily","Object","entries","map","index","numOfItems","key","item","keys","length","xs","Math","max","sm","lg","min","CustomThemes","className","location_long","location_short","lineHeight","aqi","category","getFormattedTemperature","rawTemp","temperature","currentUnit","TemperatureUnits","returnUnit","transform","rel_humidity","round","includes","location_type","calculateHeatIndex","returnSensorStatus","direction","alignItems","width","my","UppercaseTitle","text","display","textTransform","pb","SELECT_ALL","SeriesSelector","itemsFromChart","items","selectorID","allowMultiple","onSeriesSelection","theme","useTheme","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","overflow","background","palette","customAlternateBackground","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","useState","setItems","selectAll","setSelectAll","useEffect","every","selected","handleChange","event","value","target","updatedItems","selectedItems","filter","label","some","selectedItem","handleItemToggle","existingItem","Stack","spacing","FormControl","breakpoints","down","borderRadius","size","Select","labelId","id","multiple","onChange","renderValue","Visibility","secondary","Typography","renderedLabel","MenuItem","disabled","backgroundColor","Checkbox","checked","onClick","p","Radio","borderTop","borderColor","position","bottom","zIndex","marginBottom","pl","Switch","Grid","Chip","onDelete","ChartControlType","CategoryFilter","stackDirection","DateRangeFilter","ChartRangeFilter","NumberRangeFilter","getDateRangeForCalendarChart","dateStrings","reduce","getValueRangeForCalendarChart","values","hideAnnotations","stem","textStyle","opacity","boxStyle","returnResponsiveFontSizeInPixels","isPortrait","isSmaller","returnChartControlUI","chartControl","mainChartData","mainChartOptions","subchartIndex","chartControlUI","options","ui","snapToData","controlType","chartType","chartView","columns","subcharts","chartOptions","hAxis","textPosition","chart","axisText","vAxis","title","annotations","legend","calculateCalendarDimensions","cellSizeMin","cellSizeMax","cellSize","window","innerWidth","chartWidth","yearLabelFontSize","styled","Box","maxWidth","height","padding","boxShadow","mozBoxShadow","webkitBoxShadow","border","secondaryRGB","tooltip","margin","primary","marginTop","paper","paddingTop","paddingBottom","paddingLeft","paddingRight","borderWidth","top","left","right","main","stroke","strokeWidth","cursor","getCalendarChartMargin","CalendarChart","data","dateRange","valueRange","calendarChartMargin","inFirstTwoRowsOfChart","dateStr","date","Date","dayOfWeek","getDay","isFirstTwoDaysOfWeek","firstYear","getFullYear","isInFirstYear","colors","colorAxis","isGradient","generateColorGradient","GradientBox","showLegend","from","to","emptyColor","fill","mode","axis","ticks","line","grid","minValue","maxValue","yearSpacing","monthBorderColor","monthBorderWidth","daySpacing","dayBorderWidth","day","tooltipData","find","tooltipText","DOMParser","parseFromString","body","innerHTML","extractTooltipText","CustomTooltip","tooltipBoxRef","useRef","parentDiv","parentElement","ref","parse","replace","replacePlainHTMLWithMuiComponents","gradient","array","join","containerStyle","gradientStyle","minWidth","labelStyle","startColor","endColor","steps","hexToRgb","hex","m","r","g","b","result","exec","parseInt","rgbToHex","x","toString","interpolateColor","color1","color2","factor","slice","i","startRGB","endRGB","colorArray","interpolatedColor","push","SubChart","chartData","windowSize","isHomepage","chartSubstituteComponentName","ChartSubstituteComponentLoader","customClassName","useContext","GoogleContext","google","setDataTable","chartWrapper","setChartWrapper","setDashboardWrapper","controlWrapper","setControlWrapper","isFirstRender","setIsFirstRender","allInitialColumns","setAllInitialColumns","dataColumns","setDataColumns","setInitialVAxisRage","random","substr","chartID","chartTotalHeight","useMemo","opts","axisTitleTextStyle","italic","bold","axisTitle","axisTextStyle","curveType","crosshair","orientation","trigger","chartArea","portrait","landscape","isHtml","showColorCode","alignment","scrollArrows","activeColor","inactiveColor","pagingTextStyle","format","viewWindow","slantedText","slantedTextAngle","optionsColors","series","forEach","_serie","serie","trendlines","_item","colorAxisFirstColor","multiColor","colorIndex","NYUpurple","aqiColorAxis","titleTextStyle","gridlines","minorGridlines","count","highContrast","contrastText","thickness","rx","shape","ry","annotationBoxFill","fillOpacity","seriesSelector","pointSize","enableInteractivity","viewWindowMode","returnGenericOptions","existingOptions","calendarDimensions","calendar","yearLabel","noDataPattern","returnCalendarChartOptions","calendarData","setCalendarData","calendarHeight","setCalendarHeight","containerWidth","dataArray","totalHeight","startYear","numberOfYear","yearHeight","minHeight","LoadingAnimation","chartControlOptions","hasChartControl","control","cleanupTouchEventListener","touchHandler","first","changedTouches","type","simulatedEvent","MouseEvent","bubbles","cancelable","view","detail","screenX","screenY","clientX","clientY","button","relatedTarget","dispatchEvent","preventDefault","controlDOM","document","querySelector","touchEvent","addEventListener","capture","removeEventListener","addTouchEventListenerForChartControl","handleSeriesSelection","setOptions","draw","method","setInitialColumnsColors","col","seriesIndex","serieAttribute","getInitialVAxisRange","vAxisMin","vAxisMax","dataTable","range","getColumnRange","sourceColumn","isNaN","newDataColumns","_chartWrapper","hiddenSeriesObject","visibleInLegend","newViewColumns","dataColumn","indexInAllInitialColumns","role","setView","newOptions","selectedSeriesCount","thisDataTable","visualization","arrayToDataTable","reconstructedColumns","evaluatedColumns","column","calc","calcFunction","Function","reconstructFunctionFromJSONstring","thisChartWrapper","ChartWrapper","undefined","containerId","thisDashboardWrapper","Dashboard","getElementById","events","addListener","onChartReady","thisControlWrapper","ControlWrapper","bind","initColumns","initialView","getView","viewFromDataTable","DataView","shouldAssignDomainRoleToFistColumn","dataSeriesIndex","getColumnLabel","initialVAxisRange","getInitialColumns","renderChart","wordLimit","reference","isExpanded","setIsExpanded","isMobile","useMediaQuery","words","split","displayText","lastFullStop","lastIndexOf","ClickAwayListener","onClickAway","ml","textDecoration","ChartStyleWrapper","overflowX","overflowY","scrollbarGutter","StyledTabs","Tabs","chartMaxHeight","generalChartSubtitle","generalChartReference","passedChartData","passedChartHeight","chartHeight","isSmallWidth","matchMedia","matches","setIsPortrait","innerHeight","setWindowSize","currentTab","setCurrentTab","timeoutID","handleWindowResize","clearTimeout","setTimeout","__","newValue","element","Tab","subchartTitle","WebkitOverflowScrolling","transition","pointerEvents","component","mb","subchartSubtitle","getSubtitles","getReferences","StyledTable","Table","isTiny","hideAQIDescription","themePreference","pr","align","ThemePreferences","lightThemeColor","darkThemeColor","aqiUS","low","high","rawPM2_5","description","healthSuggestions","outdoors","aqiChart","shouldRender","ceil","isStacked","bar","groupWidth","renderAQIchart","Suspense","fallback","ChartSubstituteComponent","lazy","AirQualityIndexLegendQuickGlance","anchorEl","setAnchorEl","handlePopperOpen","currentTarget","Tracking","handlePopperClose","open","Boolean","FadeInButtonForSpeedDial","distanceFromBottomOfWindow","Fab","onMouseEnter","onMouseLeave","Air","Popper","placement","onClose","keepMounted","disableRestoreFocus","TransitionProps","Fade","timeout","Paper","elevation","py","mx","AirQualityIndexTable","PickersDay","content","DialogToScreen","schoolID","screens","popupId","popupState","bindHover","bindFocus","Tv","HoverMenu","bindMenu","close","screen","MenuItemAsNavLink","behavior","NavLinkBehavior","screen_name","LinkButtonToScreen","url","Link","Array","isArray","SchoolSelector","currentSchoolID","currentSchoolName","allowedSchools","fetchDataForDashboard","CustomChip","icon","Place","tooltipTitle","setSchoolID","handleClose","handleItemSelect","localStorage","setItem","LocalStorage","clickable","Menu","MenuListProps","MenuList","dense","school","school_id","name","subtitle","otherProps","enterDelay","leaveDelay","Skeleton","lastUpdate","schoolMetadata","currentData","dashboardData","LinkContext","setChartsTitlesList","user","UserContext","charts","chartsTitles","chartTitle","FullWidthBox","Container","pt","getDashboardTitle","Person","contactPerson","Email","contactEmail","href","BarChart","scrollToSection","jsonData","textAlign","CurrentAQIGrid","gutterBottom","_","ExpandableSection","AirQualityExplanation","ChartControl","chartIndex","optionalText","Divider","setCurrentPage","navigate","useNavigate","emptySchoolMetadata","setSchoolMetadata","setCurrentData","chartDataForDashboard","setChartDataForDashboard","checkedAuthentication","authenticated","previouslySelectedSchoolID","getItem","schoolMetadataUrl","getApiUrl","endpoint","EndPoints","currentUrl","chartDataUrl","Promise","all","fetchDataFromURL","fetchAndProcessCurrentSensorsData","then","catch","error","console","log","StyledAccordion","MuiAccordion","expanded","backgroundImage","default","shadows","StyledAccordionSummary","MuiAccordionSummary","flexDirection","panel","setExpanded","transitionDuration","expandIcon","webpackAsyncContext","req","resolve","__webpack_require__","o","e","Error","code","module","exports"],"sourceRoot":""}