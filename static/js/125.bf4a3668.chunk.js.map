{"version":3,"file":"static/js/125.bf4a3668.chunk.js","mappings":"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","sources":["Graphs/Subchart/SeriesSelector.jsx","Graphs/GoogleChartHelper.jsx","Graphs/Subchart/GoogleChartStyleWrapper.jsx","Graphs/Subchart/NivoCalendarChart.jsx","Graphs/Subchart/SubChart.jsx","Graphs/ChartComponent.jsx","Graphs/ChartSubstituteComponents/AirQualityIndexTable.jsx","Graphs/ChartSubstituteComponents/ChartSubstituteComponentLoader.jsx","Components/AirQualityHelper.jsx","Components/DatasetDownload/DatasetCalendar.jsx","Components/DatasetDownload/DatasetDownloadDialog.jsx","Components/ScreenDialog.jsx","Pages/Dashboard/SchoolSelector.jsx","Utils/AirQualityExplanation.jsx","Pages/Project/Project.jsx","Pages/Dashboard/Dashboard.jsx","Graphs/ChartSubstituteComponents|lazy|/^/.//.*$/|groupOptions: {}|namespace object"],"sourcesContent":["/* eslint-disable */\nimport { useState, useEffect } from 'react';\nimport { Stack, Grid, MenuItem, FormControl, Select, Chip, Radio, Checkbox, Typography, Switch } from \"@mui/material\";\nimport { useTheme } from '@mui/material/styles';\n\nimport VisibilityIcon from '@mui/icons-material/Visibility';\n\nconst SELECT_ALL = 'Display All Series';\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\n\nexport default function SeriesSelector(props) {\n  const { items: itemsFromChart, selectorID, allowMultiple, onSeriesSelection } = props;\n\n  const theme = useTheme();\n\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: ITEM_HEIGHT * 5.55 + ITEM_PADDING_TOP,\n        overflow: 'visible !important',\n        background: theme.palette.customAlternateBackground\n      }\n    },\n    anchorOrigin: {\n      vertical: -6,\n      horizontal: \"left\"\n    },\n    transformOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"left\"\n    },\n    getContentAnchorEl: null\n  };\n\n  const [items, setItems] = useState(itemsFromChart);\n  const [selectAll, setSelectAll] = useState(allowMultiple); // default: all is selected if multiSelect is true\n\n  useEffect(() => {\n    setItems(itemsFromChart);\n  }, [itemsFromChart]);\n\n  useEffect(() => {\n    setSelectAll(items.every(item => item.selected)); // set selectAll if all items are selected\n  }, [items]);\n\n  const handleChange = (event) => {\n    // Get the array of the currently selected value(s)\n    const {\n      target: { value }\n    } = event;\n\n    // If the current selection has SELECT_ALL\n    // Behavior:\n    // - If SELECT_ALL is being selected now, then set all items to selected\n    // - IF SELECT_ALL is being de-selected now, then set all items but the first one to be unselected \n    // (to make sure there's always at least 1 item being selected)\n    if (value.includes(SELECT_ALL)) {\n      const updatedItems = items.map((item, index) => ({ ...item, selected: index == 0 ? true : !selectAll }));\n      onSeriesSelection(updatedItems);\n      setSelectAll(!selectAll);\n    }\n    // Else, if an ordinary item is selected/de-selected:\n    else {\n      const selectedItems = items.filter(item => value.includes(item.label));\n      const updatedItems = items.map(item => ({\n        ...item,\n        selected: selectedItems.some(selectedItem => selectedItem.label === item.label)\n      }));\n      onSeriesSelection(updatedItems);\n      setSelectAll(false);\n    }\n  };\n\n  const handleItemToggle = (item) => {\n    const updatedItems = items.map(existingItem =>\n      existingItem.label === item.label ? { ...existingItem, selected: !existingItem.selected } : existingItem\n    );\n    onSeriesSelection(updatedItems);\n  };\n\n  const renderedLabel = (selected) => {\n    return (\n      <Stack direction=\"row\" alignItems=\"center\" spacing={0.5}>\n        <VisibilityIcon fontSize=\"1.5rem\" sx={{ color: theme.palette.text.secondary }} />\n        <Typography variant=\"caption\" color=\"text.secondary\">\n          { /* show # of series selected if multiSelect. show cur selected serie if singleSelect */}\n          {allowMultiple ? `${selected.length} series displayed${selectAll ? ` (all)` : \"\"}`\n            : selected\n          }\n        </Typography>\n      </Stack>\n    )\n  };\n\n  return (\n    <Stack spacing={1} direction=\"row\" alignItems=\"center\">\n      <FormControl sx={{\n        [theme.breakpoints.down('sm')]: { width: '100%' },\n        minWidth: '200px',\n        '& .MuiInputBase-root': { mt: 1, borderRadius: theme.spacing(1) }\n      }} size=\"small\">\n        <Select\n          labelId={`${selectorID}-label`}\n          id={selectorID}\n          multiple={allowMultiple}\n          value={items.filter(item => item.selected).map(item => item.label)}\n          onChange={handleChange}\n          MenuProps={MenuProps}\n          renderValue={(selected) => renderedLabel(selected)}\n          sx={{ fontSize: '0.75em' }}\n        >\n          {/* Display all available items, together with checkbox for each item to select from */}\n          {items.map((item) => (\n            <MenuItem\n              disabled={\n                // If there is only 1 selected item and this is the selected item\n                // Then, prevent user from de-select this item too\n                // To ensure at least there is 1 selected item at all times\n                (items.filter(item => item.selected).length === 1 && item.selected) ? true : false\n              }\n              key={item.label}\n              value={item.label}\n              sx={{\n                backgroundColor: 'unset !important',\n                \"&:hover\": {\n                  backgroundColor: 'inherit !important',\n                }\n              }}\n            >\n              { /* checkboxes for MultiSelect, radioButtons for singleSelect*/}\n              {allowMultiple ? <Checkbox\n                checked={item.selected}\n                onClick={() => handleItemToggle(item)}\n\n                sx={{ p: 0.25, transform: 'scale(0.8)' }} />\n                : <Radio\n                  checked={item.selected}\n                  onChange={() => handleChange(item)}\n\n                  sx={{ p: 0.25, transform: 'scale(0.8)' }} />\n              }\n              <Typography variant='caption'>{item.label}</Typography>\n            </MenuItem>\n          ))}\n\n          {/* Show the option to select all if multiSelect is true*/}\n          {allowMultiple && <MenuItem key={SELECT_ALL} value={SELECT_ALL} sx={{\n            borderTop: 'solid 0.5px', borderColor: theme.palette.text.secondary,\n            position: 'sticky', bottom: 0, zIndex: 99999, marginBottom: theme.spacing(-1),\n            background: theme.palette.customAlternateBackground,\n            \"&:hover\": {\n              background: theme.palette.customAlternateBackground\n            }\n          }}>\n            <Stack direction='row' width='100%' alignItems='center' justifyContent='space-between'>\n              <Typography fontWeight={500} variant='caption' sx={{ pl: 1 }}>{SELECT_ALL}</Typography>\n              <Switch\n                checked={selectAll}\n                onClick={() => handleItemToggle(SELECT_ALL)}\n                sx={{ transform: 'scale(0.8)' }}\n              />\n            </Stack>\n          </MenuItem>\n          }\n        </Select>\n      </FormControl>\n\n      {/* Display only selected items in the Grids, and only in landscape mode and if multiSelect is true*/}\n      {allowMultiple && <Grid container spacing={1}\n        sx={{\n          [theme.breakpoints.down('sm')]: {\n            display: 'none'\n          },\n        }}\n      >\n        {items.filter(item => item.selected).map((item) => (\n          <Grid item key={item.label}>\n            <Chip\n              label={<Typography variant='caption'>{item.label}</Typography>}\n              size=\"small\"\n              {...(items.filter(item => item.selected).length !== 1 && { onDelete: () => handleItemToggle(item) })}\n            />\n          </Grid>\n        ))}\n      </Grid>}\n\n\n    </Stack>\n  );\n}\n","/* eslint-disable */\n\nexport const ChartControlType = {\n  CategoryFilter: { position: 'top', stackDirection: 'column' },\n  DateRangeFilter: { position: 'bottom', stackDirection: 'column-reverse' },\n  ChartRangeFilter: { position: 'bottom', stackDirection: 'column-reverse' },\n  NumberRangeFilter: { position: 'top', stackDirection: 'column' }\n}\n// Async function to fetch data from sheet using Google Visualization query language\nexport const fetchDataFromSheet = ({ chartData, subchartIndex }) => {\n  const urlParams =\n    subchartIndex == null\n      ? {\n        headers: chartData.headers || 1,\n        query: chartData.query,\n        gid: chartData.gid,\n      }\n      : {\n        headers:\n          chartData.headers\n          || chartData.subcharts[subchartIndex].headers\n          || null,\n        query:\n          chartData.query\n          || chartData.subcharts[subchartIndex].query\n          || null,\n        gid:\n          chartData.gid\n          || chartData.subcharts[subchartIndex].gid\n          || null,\n      };\n\n  const url = `https://docs.google.com/spreadsheets/d/${chartData.sheetId}/gviz/tq?gid=${urlParams.gid}&headers=${urlParams.headers}&tqx${urlParams.query ? `&tq=${encodeURIComponent(urlParams.query)}` : ''}`;\n  const query = new google.visualization.Query(url);\n\n  return new Promise((resolve, reject) => {\n    query.send(response => {\n      if (response.isError()) {\n        reject(response.getMessage() + ' ' + response.getDetailedMessage());\n      } else {\n        resolve(response);\n      }\n    });\n  });\n};\n\nexport const transformDataForNivo = (dataTable, dataColumn, tooltipColumn) => {\n  const data = JSON.parse(dataTable.toJSON())\n  const transformed = [];\n\n  const parseDate = (dateString) => {\n    const date = new Date(dateString);\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    const formattedDate = `${year}-${month < 10 ? '0' + month : month}-${day < 10 ? '0' + day : day}`;\n    return formattedDate;\n  }\n\n  data.rows.forEach(row => {\n    // Get the date string from the first column \n    const dateString = row.c[0].f;\n    // Parse and convert the date string to a 'YYYY-MM-DD' format\n    const formattedDate = parseDate(dateString);\n    // Get the data from the appropriate column\n    const value = row.c[dataColumn]?.v;\n    // Get the tooltip from the appropriate column\n    const tooltip = row.c[tooltipColumn]?.v;\n\n    // If the date string and value are both valid, push them into the result array\n    if (dateString && value !== undefined && value !== null) {\n      transformed.push({\n        day: formattedDate,\n        value: value,\n        tooltip: tooltip\n      });\n    }\n  });\n\n  // Get dateRange (from - to)\n  const dateStrings = transformed.map(item => item.day);\n  const dateRange = getDateRangeForCalendarChart(dateStrings);\n\n  // Get valueRange (min - max)\n  const values = transformed.map(item => item.value);\n  const valueRange = getValueRangeForCalendarChart(values);\n\n  return {\n    data: transformed,\n    dateRange: dateRange,\n    valueRange: valueRange\n  };\n};\nexport const getDateRangeForCalendarChart = (dateStrings) => {\n  return {\n    min: dateStrings.reduce((min, current) => (current < min ? current : min)),\n    max: dateStrings.reduce((max, current) => (current > max ? current : max))\n  }\n}\nexport const getValueRangeForCalendarChart = (values) => {\n  return { min: Math.min(...values), max: Math.max(...values) }\n}\n\n// Function to generate a random ID for the google chart container\nexport const generateRandomID = () => {\n  return Math.random().toString(36).substr(2, 9); // Generates a random string of length 9\n}\n\n// -------- Chart options --------\n\nconst hideAnnotations = {\n  stem: {\n    length: 0,\n  },\n  textStyle: {\n    opacity: 0,\n  },\n  boxStyle: null,\n};\n\nconst returnResponsiveFontSizeInPixels = ({ isPortrait, isSmaller }) => {\n  return (\n    isSmaller ? (isPortrait ? 6 : 8) : (isPortrait ? 8 : 10)\n  );\n}\n\nexport const returnGenericOptions = (props) => {\n  const { chartData, subchartIndex, isPortrait, isHomepage, theme } = props;\n\n  // Define some shared styling rules for the chart\n  const axisTitleTextStyle = {\n    italic: false,\n    bold: true,\n    color: theme.palette.chart.axisTitle,\n    fontSize: returnResponsiveFontSizeInPixels({ isPortrait })\n  };\n  const axisTextStyle = {\n    color: theme.palette.chart.axisText,\n    fontSize: returnResponsiveFontSizeInPixels({ isPortrait })\n  };\n\n  // ---- Formulate the options for this specific chart:\n  // 1. Populate first with subchart's options (if any)\n  let options = chartData.subcharts?.[subchartIndex].options\n    ? { ...chartData.subcharts[subchartIndex].options }\n    : {};\n\n  // 2. Append own chart's options and then populate with universal options for all charts\n  options = {\n    ...options,\n    ...chartData.options,\n    theme: 'material',\n    curveType: options.curveType || chartData.options?.curveType || 'function',\n    crosshair: { orientation: 'both', trigger: 'focus', opacity: 0.5 },\n    backgroundColor: { fill: 'transparent' },\n    chartArea: {\n      ...chartData.options?.chartArea,\n      width: isPortrait ? (chartData.options?.chartArea?.width?.portrait || '80%') : (chartData.options?.chartArea?.width?.landscape || '75%'),\n      height: isPortrait ? (chartData.options?.chartArea?.height?.portrait || '60%') : (chartData.options?.chartArea?.height?.landscape || '70%'),\n    },\n    width: isPortrait ? (chartData.options?.width?.portrait || '100%') : (chartData.options?.width?.landscape || '100%'),\n    // if there is a filter, we make space for the chartFilter from the chart's height.\n    // value is divided in 2 because the calculation is applied twice due to\n    // how react-google-charts nest components\n    height: chartData.height || '100%',\n    tooltip: {\n      isHtml: true,\n      showColorCode: false\n    },\n    legend: {\n      alignment: isPortrait ? 'center' : 'start',\n      position:\n        chartData.options?.legend?.position\n        ?? (isPortrait ? 'top' : 'right'),\n      scrollArrows: {\n        activeColor: theme.palette.chart.axisTitle,\n        inactiveColor: theme.palette.text.secondary,\n      },\n      pagingTextStyle: {\n        fontSize: 10,\n        color: theme.palette.chart.axisTitle,\n        bold: true,\n      }\n    }\n  };\n\n  // 3. Append to vAxis and hAxis properties\n  options.vAxis = {\n    ...options.vAxis,\n    format: options.vAxis?.format ?? 'decimal',\n    title: options.vAxis?.title ?? '',\n    viewWindow: {\n      min: options.vAxis?.viewWindow?.min ?? 0,\n    },\n  };\n  options.hAxis = {\n    ...options.hAxis,\n    title: options.hAxis?.title ?? '',\n  };\n  // 3.1. If in portrait mode, slant the text of the hAxis\n  if (isPortrait) {\n    options.hAxis = {\n      ...options.hAxis,\n      slantedText: true,\n      slantedTextAngle: 30,\n    };\n  }\n\n  // 4. Override with custom colors:\n  // 4.1. Color scheme of all the series of this chart\n  if (typeof options.colors === 'string' || !options.colors) options.colors = theme.palette.chart.optionsColors[options.colors || 'multiColor'];\n  // 4.2. Individual color of a single serie (if given)\n  if (options.series) {\n    Object.values(options.series).forEach((_serie) => {\n      const serie = _serie;\n      if (serie.color === 'default') {\n        serie.color = theme.palette.primary.main;\n      }\n    });\n  }\n  // 4.3. Color of the trendline\n  if (options.trendlines) {\n    options.trendlines.forEach((_item) => {\n      const item = _item;\n      item.color = theme.palette.primary.main;\n    });\n  }\n  // 4.4. Color axis of the Calendar chart\n  if (options.colorAxis) {\n    switch (options.colorAxis.colors) {\n      case 'matchingColor':\n        options.colorAxis.colors = [\n          theme.palette.chart.colorAxisFirstColor,\n          theme.palette.chart.optionsColors.multiColor[options.colorAxis.colorIndex],\n        ];\n        break;\n      case 'default':\n        options.colorAxis.colors = [\n          theme.palette.chart.colorAxisFirstColor,\n          theme.palette.NYUpurple,\n        ];\n        break;\n      case 'aqi':\n        options.colorAxis = theme.palette.chart.aqiColorAxis;\n        break;\n      default:\n        break;\n    }\n  }\n  // 4.5. Colors of other elements of the chart (typographies and gridlines)\n  options.vAxis = {\n    ...options.vAxis,\n    titleTextStyle: axisTitleTextStyle,\n    textStyle: axisTextStyle,\n    gridlines: {\n      ...options.vAxis?.gridlines,\n      color: options.vAxis?.gridlines?.color || theme.palette.chart.gridlines\n    },\n    minorGridlines: { count: 0 },\n  };\n  options.hAxis = {\n    ...options.hAxis,\n    titleTextStyle: axisTitleTextStyle,\n    textStyle: axisTextStyle,\n    gridlines: {\n      ...options.hAxis?.gridlines,\n      color: options.hAxis?.gridlines?.color || theme.palette.chart.gridlines\n    },\n    minorGridlines: {\n      ...options.hAxis?.minorGridlines,\n      color: options.hAxis?.gridlines?.color || theme.palette.chart.gridlines,\n    },\n  };\n  options.legend = {\n    ...options.legend,\n    textStyle: axisTextStyle,\n  };\n  options.annotations = {\n    ...options.annotations,\n    highContrast: true,\n    textStyle: {\n      color: theme.palette.primary.contrastText,\n      fontSize: returnResponsiveFontSizeInPixels({ isPortrait, isSmaller: true }),\n      opacity: 0.8\n    },\n    stem: {\n      ...options.annotations?.stem,\n      color: theme.palette.chart.axisTitle,\n      thickness: 2\n    },\n    boxStyle: {\n      rx: theme.shape.borderRadius, // rounded corners\n      ry: theme.shape.borderRadius,\n      fill: theme.palette.chart.annotationBoxFill,\n      fillOpacity: 0.5\n    },\n  };\n\n  // 5. If the chart is displayed on the homepage, override the options with:\n  if (isHomepage) {\n    options = {\n      ...options,\n      chartArea: {\n        ...options.chartArea,\n        width: '80%',\n        height: '80%'\n      },\n      seriesSelector: false,\n      pointSize: 0,\n      enableInteractivity: false,\n      annotations: hideAnnotations,\n      legend: 'none',\n      vAxis: {\n        ...options.vAxis,\n        textPosition: 'none',\n        titleTextStyle: {\n          ...options.vAxis.titleTextStyle,\n          bold: false\n        },\n        gridlines: { color: 'transparent', count: 0 },\n        viewWindowMode: 'maximized'\n      },\n      hAxis: {\n        ...options.hAxis,\n        textPosition: 'none',\n        gridlines: { color: 'transparent', count: 0 },\n        titleTextStyle: {\n          ...options.hAxis.titleTextStyle,\n          bold: false\n        }\n      },\n    };\n  }\n\n  return options;\n}\n\nexport const returnCalendarChartOptions = (existingOptions) => {\n  const calendarDimensions = calculateCalendarDimensions({ cellSizeMin: 14, cellSizeMax: 18 });\n  return {\n    ...existingOptions,\n    width: calendarDimensions.chartWidth,\n    calendar: {\n      cellSize: calendarDimensions.cellSize,\n      yearLabel: {\n        fontSize: calendarDimensions.yearLabelFontSize\n      }\n    },\n    noDataPattern: {\n      backgroundColor: 'none',\n      color: 'none',\n    },\n  }\n}\n\nexport const returnChartControlUI = (props) => {\n  const { chartControl, mainChartData, mainChartOptions, subchartIndex, theme, isPortrait } = props;\n  let chartControlUI = {\n    ...chartControl.options?.ui,\n    snapToData: true\n  };\n\n  // Assign the appropriate UI for chartControl based on controlType (if existed)\n  if (chartControl.controlType === 'ChartRangeFilter') {\n    chartControlUI = {\n      ...chartControlUI,\n      chartType: mainChartData.chartType,\n      chartView: {\n        columns:\n          mainChartData.columns\n          || (mainChartData.subcharts\n            && mainChartData.subcharts[subchartIndex].columns)\n          || null\n          || null,\n      },\n      chartOptions: {\n        ...mainChartOptions,\n        ...chartControl.options?.ui?.chartOptions,\n        hAxis: {\n          ...chartControl.options?.ui?.chartOptions?.hAxis,\n          textPosition: 'out',\n          textStyle: { color: theme.palette.chart.axisText, fontSize: returnResponsiveFontSizeInPixels({ isPortrait, isSmaller: true }) }\n        },\n        vAxis: {\n          ...chartControl.options?.ui?.chartOptions?.vAxis,\n          title: null\n        },\n        annotations: hideAnnotations,\n        legend: null,\n      }\n    };\n  }\n  return chartControlUI;\n}\n\nconst calculateCalendarDimensions = ({ cellSizeMin, cellSizeMax }) => {\n  const cellSize = Math.min(Math.max((window.innerWidth * 0.9) / 58, cellSizeMin), cellSizeMax);\n  return {\n    chartWidth: cellSize * 56, // fixed ratio\n    cellSize,\n    yearLabelFontSize: cellSize * 2\n  };\n};\n\nexport const addTouchEventListenerForChartControl = ({ controlWrapper, chartID }) => {\n  const touchHandler = (event) => {\n    var touches = event.changedTouches,\n      first = touches[0],\n      type = '';\n\n    switch (event.type) {\n      case 'touchstart':\n        type = 'mousedown';\n        break;\n      case 'touchmove':\n        type = 'mousemove';\n        break;\n      case 'touchend':\n        type = 'mouseup';\n        break;\n      default:\n        return;\n    }\n\n    var simulatedEvent = new MouseEvent(type, {\n      bubbles: true,\n      cancelable: true,\n      view: window,\n      detail: 1,\n      screenX: first.screenX,\n      screenY: first.screenY,\n      clientX: first.clientX,\n      clientY: first.clientY,\n      button: 0, // left button\n      relatedTarget: null,\n    });\n\n    first.target.dispatchEvent(simulatedEvent);\n    event.preventDefault();\n  }\n\n  let isMounted = true; // Flag to track component's mount status\n  if (!controlWrapper) return;\n\n  const controlDOM = document.querySelector(`#control-${chartID}`);\n  if (!controlDOM) return;\n\n  ['touchstart', 'touchmove', 'touchend', 'touchcancel']\n    .forEach((touchEvent) => {\n      controlDOM.addEventListener(touchEvent, touchHandler, { capture: true });\n    });\n\n  return () => {\n    isMounted = false; // Component is unmounting\n\n    ['touchstart', 'touchmove', 'touchend', 'touchcancel'].forEach((touchEvent) => {\n      controlDOM.removeEventListener(touchEvent, touchHandler, { capture: true });\n    });\n  };\n}","import { Box } from '@mui/material/';\nimport { styled } from '@mui/material/styles';\n\nconst GoogleChartStyleWrapper = styled(Box)(({ theme, isPortrait }) => ({\n  // CSS for HTML tooltip\n  '& .google-visualization-tooltip, .nivo-tooltip': {\n    width: 'unset !important',\n    maxWidth: '350px',\n    height: 'unset',\n    padding: '1em',\n    boxShadow: '0px 2px 2px 0px rgba(204, 204, 204, 0.6)',\n    mozBoxShadow: '0px 2px 2px 0px rgba(204, 204, 204, 0.6)',\n    webkitBoxShadow: '0px 2px 2px 0px rgba(204, 204, 204, 0.6)',\n    border: 'solid 1px',\n    borderColor: theme.palette.text.secondaryRGB,\n    fontSize: `${isPortrait ? 9 : 12}px`,\n    color: theme.palette.chart.tooltip.text,\n    background: theme.palette.chart.tooltip.background,\n    borderRadius: theme.spacing(1 / 2),\n    '& ul': {\n      margin: '0 !important',\n      '& li': {\n        margin: '0 !important',\n        padding: '0 !important',\n        '& span': {\n          fontSize: `${isPortrait ? 9 : 12}px !important`,\n          color: `${theme.palette.chart.tooltip.text} !important`,\n        }\n      }\n    }\n  },\n\n  // -------- chartControl's additional stylings\n  '& .goog-menuitem-highlight, .goog-menuitem-hover': {\n    backgroundColor: `${theme.palette.primary} !important`\n  },\n\n  // CategoryFilter\n  '& .google-visualization-controls-categoryfilter': {\n    fontSize: '0.85rem',\n    marginTop: '0.75rem',\n    marginBottom: '-0.75rem',\n\n    '& .goog-inline-block > .goog-menu-button': {\n      marginTop: 0\n    },\n\n    '& .goog-menu-button-hover .goog-menu-button-outer-box, .goog-menu-button-hover .goog-menu-button-inner-box': {\n      borderColor: 'inherit !important'\n    },\n\n    '& .google-visualization-controls-label': {\n      color: theme.palette.text.secondary,\n      fontWeight: 500,\n      verticalAlign: 'middle',\n      marginBottom: '0.25rem'\n    },\n    '& .goog-menu-button-outer-box': {\n      backgroundColor: theme.palette.background.paper,\n      border: 'unset',\n\n      '& .goog-menu-button-inner-box': {\n        paddingTop: theme.spacing(0.5),\n        paddingBottom: theme.spacing(0.5),\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2),\n        border: 'solid',\n        borderWidth: '0.5px',\n        borderRadius: theme.spacing(0.5),\n        borderColor: theme.palette.text.secondary,\n\n        '& .goog-menu-button-caption': {\n          color: theme.palette.text.secondary\n        }\n      }\n    }\n  },\n\n  // DateRangeFilter\n  '& .google-visualization-controls-rangefilter': {\n    width: '100%',\n    fontSize: '0.75rem',\n    '& .goog-inline-block': {\n      width: '100%',\n    },\n    '& .google-visualization-controls-slider-horizontal': {\n      width: '90%',\n      margin: '0 5%',\n    },\n    '& .google-visualization-controls-rangefilter-thumblabel:nth-of-type(1)': {\n      position: 'absolute',\n      top: '1.5em',\n      left: '5%'\n    },\n    '& .google-visualization-controls-rangefilter-thumblabel:nth-of-type(2)': {\n      position: 'absolute',\n      top: '1.5em',\n      right: '5%'\n    },\n    '& .google-visualization-controls-slider-handle': {\n      background: theme.palette.primary.main\n    },\n    '& .google-visualization-controls-rangefilter-thumblabel': {\n      color: theme.palette.text.secondary,\n      padding: 0,\n      fontWeight: 500\n    },\n    '& .google-visualization-controls-slider-thumb': {\n      background: theme.palette.primary.main,\n      border: 'unset',\n      borderRadius: '4px'\n    }\n  },\n\n  // These are the paths showing on top of the line chart\n  // and the stroke around the bar/column chart\n  // when the user hovers on the legend to make the serie stand out\n  // by Google Chart's default doesn't change color based on light/dark theme, but we modify here:\n  '& path[stroke-opacity=\"0.3\"], path[stroke-opacity=\"0.1\"], path[stroke-opacity=\"0.05\"], rect[stroke-opacity]': {\n    stroke: theme.palette.text.primary,\n    strokeWidth: 3\n  },\n\n  // Cursor of series in legends\n  '& [column-id]:not(:empty)': {\n    cursor: 'pointer',\n    ':hover': {\n      fontWeight: 600\n    }\n  }\n}));\n\nexport default GoogleChartStyleWrapper;\n","/* eslint-disable */\nimport { ResponsiveCalendar } from '@nivo/calendar';\nimport { useEffect, useRef } from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport { Box, Chip } from '@mui/material';\n\nimport parse from 'html-react-parser';\nimport { replacePlainHTMLWithMuiComponents } from '../../Utils/Utils';\n\nexport const yearSpacing = 40;\n\nexport const getCalendarChartMargin = (isPortrait) => {\n    return isPortrait\n        ? { top: 20, right: 0, bottom: 0, left: 20 }\n        : { top: 30, right: 40, bottom: 0, left: 40 }\n}\n\nexport const CalendarChart = (props) => {\n    const { data, dateRange, valueRange, isPortrait, options } = props;\n\n    const calendarChartMargin = getCalendarChartMargin(isPortrait);\n\n    const theme = useTheme();\n\n    // Function to extract tooltip text from HTML tooltip\n    const extractTooltipText = (tooltip) => {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(tooltip, 'text/html');\n        return doc.body.innerHTML;\n    };\n\n    // Function to check if a date is in the first two rows of the chart\n    // Used to anchor the tooltip to the bottom while hovering over\n    // the first two rows of the chart\n    const inFirstTwoRowsOfChart = (dateStr, dateRange) => {\n        const date = new Date(dateStr);\n        const dayOfWeek = date.getDay();\n\n        // Check if the date is Sunday (0) or Monday (1)\n        const isFirstTwoDaysOfWeek = dayOfWeek === 0 || dayOfWeek === 1;\n\n        // Extract the first year from the date range once\n        const firstYear = new Date(dateRange.min).getFullYear();\n\n        // Check if the date is in the first year of the date range\n        const isInFirstYear = date.getFullYear() === firstYear;\n\n        return isFirstTwoDaysOfWeek && isInFirstYear;\n    };\n\n    // Function to get color of the Calendar cells\n    const colors = options?.colorAxis?.isGradient ?\n        generateColorGradient(options?.colorAxis?.colors[0], options?.colorAxis?.colors[1], 100) :\n        options?.colorAxis?.colors;\n\n    const showLegend = () => {\n        return (\n            <GradientBox\n                valueRange={valueRange}\n                colors={options?.colorAxis?.colors}\n                isPortrait={isPortrait}\n            />\n        )\n    }\n\n    return (\n        <>\n            {options?.legend?.position !== \"none\" && showLegend()}\n            <ResponsiveCalendar\n                data={data}\n                from={dateRange?.min}\n                to={dateRange?.max}\n                emptyColor={'transparent'}\n                theme={{\n                    text: {\n                        fill: theme.palette.text.secondary,\n                    },\n                    tooltip: {\n                        container: {\n                            background: theme.palette.mode === 'dark' ? '#2b2b2b' : '#fff',\n                            color: theme.palette.text.primary,\n                        },\n                    },\n                    axis: {\n                        ticks: {\n                            line: {\n                                stroke: theme.palette.mode === 'dark' ? '#2b2b2b' : '#fff',\n                            },\n                            text: {\n                                fill: theme.palette.text.primary,\n                            },\n                        },\n                    },\n                    grid: {\n                        line: {\n                            stroke: theme.palette.mode === 'dark' ? '#2b2b2b' : '#fff',\n                        },\n                    },\n                }}\n                colors={colors}\n                minValue={options?.colorAxis?.minValue}\n                maxValue={options?.colorAxis?.maxValue}\n                margin={calendarChartMargin}\n                yearSpacing={yearSpacing}\n                monthBorderColor={theme.palette.text.primary}\n                monthBorderWidth={1}\n                daySpacing={0.25}\n                dayBorderWidth={0}\n                tooltip={({ day, value, color }) => {\n                    const tooltipData = data.find(item => item.day === day);\n                    const tooltipText = tooltipData ? extractTooltipText(tooltipData.tooltip) : '';\n\n                    return (\n                        <CustomTooltip\n                            day={day}\n                            color={color}\n                            tooltipText={tooltipText}\n                            dateRange={dateRange}\n                            inFirstTwoRowsOfChart={inFirstTwoRowsOfChart}\n                        />\n                    );\n                }}\n            />\n        </>\n    );\n};\n\n// Custom tooltip component for the Calendar chart\nconst CustomTooltip = ({ day, color, tooltipText, dateRange, inFirstTwoRowsOfChart }) => {\n    const tooltipBoxRef = useRef(null);\n\n    // If the cell hovered over is in the first two rows of the chart,\n    // move the tooltip to the bottom of the chart\n    // Read subsequent comments to understand why we need to do this\n    useEffect(() => {\n        if (tooltipBoxRef.current && inFirstTwoRowsOfChart(day, dateRange)) {\n            const parentDiv = tooltipBoxRef.current.parentElement;\n            if (parentDiv) {\n                parentDiv.style.top = '11vh';\n            }\n        }\n    }, [tooltipBoxRef, inFirstTwoRowsOfChart]);\n\n\n    // Note that our Box is just a container 'inside' the tooltip\n    // The tooltip itself is actually the Box's parent div\n    return (\n        <Box ref={tooltipBoxRef} className='nivo-tooltip'>\n            <Chip sx={{ backgroundColor: color, mr: 0.5, height: '10px', width: '10px', borderRadius: '50%' }} />\n            {parse(tooltipText, { replace: replacePlainHTMLWithMuiComponents })}\n        </Box>\n    );\n};\n\nconst GradientBox = ({ valueRange, colors, isPortrait }) => {\n\n    if (valueRange?.min === null || valueRange?.max === null) return null;\n\n    const theme = useTheme();\n\n    // Create a gradient string from all colors in the colors array\n    const gradient = colors.map((color, index, array) => {\n        // Calculate the percentage position for each color\n        const position = (index / (array.length - 1)) * 100;\n        return `${color} ${position}%`;\n    }).join(', ');\n\n    const containerStyle = {\n        position: 'sticky',\n        width: 'fit-content',\n        marginTop: '1rem',\n        left: (isPortrait ? '58%' : '74%'),\n    }\n\n    const gradientStyle = {\n        background: `linear-gradient(to right, ${gradient})`,\n        color: theme.palette.text.primary,\n        border: `1px solid ${theme.palette.text.primary}`,\n        minWidth: '150px',\n        height: '1.1rem',\n        maxHeight: '1.25rem',\n        display: 'flex',\n        justifyContent: 'space-between',\n    };\n\n    const labelStyle = {\n        position: 'relative',\n        top: '-1.15rem',\n        fontSize: '0.8rem',\n    };\n\n    return (\n        <Box style={containerStyle}>\n            <Box style={gradientStyle}>\n                <span style={labelStyle}>{valueRange.min}</span>\n                <span style={labelStyle}>{valueRange.max}</span>\n            </Box>\n        </Box>\n    );\n};\n\n// Function to return an array of STEPS discrete colors in a gradient from startColor and endColor\nconst generateColorGradient = (startColor, endColor, steps) => {\n    function hexToRgb(hex) {\n        // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n        const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n        hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n            return r + r + g + g + b + b;\n        });\n\n        const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        return result ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)]\n            : [null, null, null];\n    }\n\n    function rgbToHex(r, g, b) {\n        return \"#\" + [r, g, b].map(x => {\n            const hex = x.toString(16);\n            return hex.length === 1 ? '0' + hex : hex;\n        }).join('');\n    }\n\n    function interpolateColor(color1, color2, factor) {\n        let result = color1.slice();\n        for (let i = 0; i < 3; i++) {\n            result[i] = Math.round(result[i] + factor * (color2[i] - color1[i]));\n        }\n        return result;\n    }\n\n    let startRGB = hexToRgb(startColor);\n    let endRGB = hexToRgb(endColor);\n    let colorArray = [];\n\n    for (let i = 0; i < steps; i++) {\n        let factor = i / (steps - 1);\n        let interpolatedColor = interpolateColor(startRGB, endRGB, factor);\n        colorArray.push(rgbToHex(...interpolatedColor));\n    }\n\n    return colorArray;\n}","/* eslint-disable */\n\nimport { useState, useEffect, useContext, useMemo } from 'react';\n\nimport { GoogleContext } from '../../ContextProviders/GoogleContext';\n\nimport { Box, Stack } from '@mui/material/';\n\nimport { useTheme } from '@mui/material/styles';\nimport SeriesSelector from './SeriesSelector';\n\nimport { generateRandomID, returnGenericOptions, returnCalendarChartOptions, returnChartControlUI, ChartControlType, addTouchEventListenerForChartControl, getDateRangeForCalendarChart, getValueRangeForCalendarChart } from '../GoogleChartHelper';\n\nimport GoogleChartStyleWrapper from './GoogleChartStyleWrapper';\n\nimport LoadingAnimation from '../../Components/LoadingAnimation';\n\nimport ChartSubstituteComponentLoader from '../ChartSubstituteComponents/ChartSubstituteComponentLoader';\n\nimport { CalendarChart, getCalendarChartMargin, yearSpacing } from './NivoCalendarChart';\n\nexport default function SubChart(props) {\n  // Props\n  const { chartData, subchartIndex, windowSize, isPortrait, isHomepage, height, maxHeight } = props;\n  // Early return if this doesn't contain a normal Google Chart but a chartSubstituteComponent\n  const chartSubstituteComponentName = chartData.subcharts?.[subchartIndex].chartSubstituteComponentName;\n  if (chartSubstituteComponentName) {\n    return <ChartSubstituteComponentLoader chartSubstituteComponentName={chartSubstituteComponentName} />;\n  }\n\n  // Formulate the className\n  const className = chartData.customClassName ? `${chartData.chartType} ${chartData.customClassName}` : chartData.chartType;\n\n  // Use GoogleContext for loading and manipulating the Google Charts\n  const [google, _] = useContext(GoogleContext);\n\n  // States of the Google Charts\n  const [dataTable, setDataTable] = useState();\n  const [chartWrapper, setChartWrapper] = useState();\n  const [dashboardWrapper, setDashboardWrapper] = useState();\n  const [controlWrapper, setControlWrapper] = useState();\n\n  // Get the current theme\n  const theme = useTheme();\n\n  // To determine the first time the chart renders to show/hide the LoadingAnimation\n  const [isFirstRender, setIsFirstRender] = useState(true);\n\n  // Keep track of the columns (series) of the chart\n  const [allInitialColumns, setAllInitialColumns] = useState();\n  const [dataColumns, setDataColumns] = useState();\n  const [initialVAxisRange, setInitialVAxisRage] = useState();\n\n  // Define the DOM container's ID for drawing the google chart inside\n  const [chartID, __] = useState(generateRandomID());\n\n  // Calendar chart's properties\n  const [chartTotalHeight, setChartTotalHeight] = useState(200);\n\n  // Get the options object for chart\n  let options = useMemo(() => {\n    let opts = returnGenericOptions({ ...props, theme });\n    if (chartData.chartType === 'Calendar') {\n      opts = returnCalendarChartOptions(opts);\n    }\n    return opts;\n  }, [props, theme, chartData.chartType]);\n  // State to store transformed data for CalendarChart\n  const [calendarData, setCalendarData] = useState(null);\n  const [calendarHeight, setCalendarHeight] = useState(200);\n  const [containerWidth, setContainerWidth] = useState(1200); // max width of the chart container\n  // Early exit for 'Calendar' chartType\n  if (chartData.chartType === 'Calendar') {\n    useEffect(() => {\n      const dataArray = chartData.dataArray\n        || (chartData.subcharts\n          && chartData.subcharts[subchartIndex].dataArray)\n        || null\n        || null;\n      if (!dataArray) return; // early return if there is no data to render\n\n      const dateStrings = dataArray.map(item => item.day);\n      const values = dataArray.map(item => item.value);\n      const dateRange = getDateRangeForCalendarChart(dateStrings);\n\n      setCalendarData({\n        data: dataArray,\n        dateRange: dateRange,\n        valueRange: getValueRangeForCalendarChart(values)\n      });\n\n      // Get the number of years in the dateRange\n      const startYear = new Date(dateRange.min).getFullYear();\n      const endYear = new Date(dateRange.max).getFullYear();\n      const numberOfYear = endYear - startYear + 1;\n\n      // Calculate the size of each cell\n      const cellSize = Math.min(containerWidth / 60, 20); // max cell size of 20\n      const yearHeight = cellSize * 7; // Height for one year\n\n      const calendarChartMargin = getCalendarChartMargin(isPortrait);\n\n      // Calculate the total height based on the number of years and margins\n      let totalHeight;\n      if (numberOfYear == 1) {\n        totalHeight = yearHeight + yearSpacing + calendarChartMargin.top + calendarChartMargin.bottom\n      }\n      else {\n        totalHeight = numberOfYear * (yearHeight + yearSpacing) + calendarChartMargin.top + calendarChartMargin.bottom;\n      }\n      setCalendarHeight(totalHeight);\n\n    }, [chartData]);\n\n    return (\n      <GoogleChartStyleWrapper\n        isPortrait={isPortrait}\n        className={className}\n        position=\"relative\"\n        minWidth=\"700px\"\n        minHeight={isPortrait ? '200px' : calendarHeight + 'px'}\n        height={calendarHeight + 'px'}\n        maxHeight={isPortrait && '400px'}\n      >\n        {calendarData ?\n          <CalendarChart\n            data={calendarData.data}\n            dateRange={calendarData.dateRange}\n            valueRange={calendarData.valueRange}\n            isPortrait={isPortrait}\n            options={options}\n          />\n          :\n          (\n            <Box sx={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}>\n              <LoadingAnimation />\n\n            </Box>\n          )\n        }\n      </GoogleChartStyleWrapper>\n    );\n  }\n\n  // Properties for chart control (if existed)\n  let hasChartControl = false;\n  let chartControlOptions;\n  // Only show the chart control if:\n  // It exists in the database (either for all subcharts or just for a particular subchart)\n  // And if the chart is currently not shown on homePage\n  let chartControl = chartData.control || chartData.subcharts?.[subchartIndex].control;\n  if (chartControl && (isHomepage !== true)) {\n    hasChartControl = true;\n\n    // Get the options for chartControl if hasChartControl\n    chartControlOptions = {\n      ...chartControl.options,\n      ui: returnChartControlUI({\n        chartControl,\n        mainChartData: chartData,\n        mainChartOptions: options,\n        subchartIndex,\n        theme,\n        isPortrait\n      })\n    };\n\n    // Swap touch events for mouse events on ChartRangeControl\n    // as it doesn't support touch events on mobile\n    if (chartControl.controlType === 'ChartRangeFilter') {\n      useEffect(() => {\n        const cleanupTouchEventListener = addTouchEventListenerForChartControl({ controlWrapper, chartID });\n        return cleanupTouchEventListener;\n      }, [controlWrapper]);\n    }\n  }\n\n  // Properties for selecting (showing or hiding) the serie(s)\n  const seriesSelector = options.seriesSelector || false;\n\n  // Set new options prop and re-render the chart if theme or isPortrait changes\n  useEffect(() => {\n    if (seriesSelector) handleSeriesSelection(dataColumns); // this function set new options, too\n    else {\n      chartWrapper?.setOptions({\n        ...options,\n        ...(chartData.chartType === 'Calendar' && { height: chartTotalHeight })\n      });\n\n      chartWrapper?.draw();\n      if (hasChartControl) {\n        controlWrapper?.setOptions(chartControlOptions);\n        controlWrapper?.draw();\n      }\n    }\n  }, [theme, isPortrait, windowSize, chartTotalHeight]);\n\n  // Set new initialColumnsColors if the theme changes\n  // This only applies to when seriesSelector.method == \"setViewColumn\"\n  useEffect(() => {\n    if (!dataColumns) return;\n    if (seriesSelector && seriesSelector.method == \"setViewColumn\") {\n      setInitialColumnsColors({ dataColumns: dataColumns });\n      handleSeriesSelection(dataColumns);\n    }\n  }, [theme]);\n\n  const getInitialColumns = ({ chartWrapper, dataTable, seriesSelector }) => {\n    // Update the initial DataView's columns (often, all of the series are displayed initially)\n    var initialView = chartWrapper.getView();\n    // If (optional) columns is not specified in database\n    // Assign it from DataTable\n    if (initialView.columns == null) {\n      const viewFromDataTable = new google.visualization.DataView(dataTable);\n      chartWrapper.setView({\n        columns: viewFromDataTable.columns\n      });\n      initialView = chartWrapper.getView();\n    }\n\n    let shouldAssignDomainRoleToFistColumn = true; // variable to only assign type: 'domain' to the very first column\n    let dataSeriesIndex = 0;\n    const allInitialColumns = initialView.columns.map((col, index) => {\n      // A column can either be a number (that denotes the index of the sourceColumn) or an object\n      // The code below harmonize all columns to be an object to store crucial data to toggle their visibility\n      if (typeof col === 'number') col = {\n        role: shouldAssignDomainRoleToFistColumn ? 'domain' : 'data',\n        sourceColumn: col\n      }\n      col.label = dataTable.getColumnLabel(col.sourceColumn);\n      col.indexInAllInitialColumns = index;\n\n      shouldAssignDomainRoleToFistColumn = shouldAssignDomainRoleToFistColumn && false;\n\n      // Set the visibility of data column, \n      if (col.role === 'data') {\n        // initially, all data columns are selected if multiple series are selectable\n        if (seriesSelector?.allowMultiple) {\n          col.selected = true;\n        } else {\n          // else for single serie selector, only first data column is selected\n          if (dataSeriesIndex === 0) {\n            col.selected = true;\n          } else {\n            col.selected = false;\n          }\n        }\n        col.seriesIndex = dataSeriesIndex;\n        dataSeriesIndex++;\n      }\n      return col;\n    });\n    setAllInitialColumns(allInitialColumns);\n    const initialVAxisRange = getInitialVAxisRange({ dataTable: dataTable, allInitialColumns: allInitialColumns });\n    setInitialVAxisRage(initialVAxisRange);\n    // To track selection, only get the columns that are:\n    // role === 'data'\n    // visibleInLegend !== false\n    const dataColumns = allInitialColumns.filter((col) => {\n      return col.role === 'data' && options.series?.[col.seriesIndex]?.visibleInLegend !== false;\n    });\n\n    if (seriesSelector.method === \"setViewColumn\") setInitialColumnsColors({ dataColumns: dataColumns });\n\n    setDataColumns(dataColumns);\n    return dataColumns;\n  };\n\n  const setInitialColumnsColors = ({ dataColumns }) => {\n    dataColumns.forEach((col) => {\n      // Assign inherit color to this data column\n      col.color = options.colors[col.seriesIndex % options.colors.length];\n      // Assign other inherit attributes from its serie object (if existed)\n      col.serieAttribute = options.series?.[col.seriesIndex];\n    });\n  }\n\n  const getInitialVAxisRange = ({ dataTable, allInitialColumns }) => {\n    let vAxisMin, vAxisMax;\n    allInitialColumns.forEach((col, index) => {\n      if (index === 0) return; // the first column is the domain (hAxis)\n      const range = dataTable.getColumnRange(col.sourceColumn);\n      if (!isNaN(range.min) && range.min) vAxisMin = vAxisMin ? Math.min(vAxisMin, range.min) : range.min;\n      if (!isNaN(range.max) && range.max) vAxisMax = vAxisMax ? Math.max(vAxisMax, range.max) : range.max;\n    });\n    return { min: vAxisMin, max: vAxisMax };\n  }\n\n  const handleSeriesSelection = (newDataColumns, _chartWrapper = chartWrapper) => {\n    if (!allInitialColumns) return;\n\n    setDataColumns(newDataColumns);\n\n    if (seriesSelector.method === \"toggleVisibility\" || seriesSelector.method === null) {\n      const hiddenSeriesObject = {};\n      newDataColumns.forEach((col) => {\n        if (!col.selected)\n          hiddenSeriesObject[col.seriesIndex] = {\n            color: 'transparent',\n            enableInteractivity: false,\n            visibleInLegend: false\n          }; // 'hide' the serie by making it transparent\n      });\n\n      _chartWrapper?.setOptions({\n        ...options,\n        series: {\n          ...options.series,\n          ...hiddenSeriesObject\n        }\n      });\n    }\n    else if (seriesSelector.method === \"setViewColumn\") {\n      let newViewColumns = [];\n      newViewColumns.push(0); // this is the domain column\n      newDataColumns.forEach((dataColumn) => {\n        if (dataColumn.selected) {\n          newViewColumns.push(dataColumn);\n          // Find this dataColumn's supporting columns (whose role !== 'data')\n          // A dataColumn has its supporting columns (can be many) follow it immediately\n          for (let i = dataColumn.indexInAllInitialColumns + 1; i < allInitialColumns.length; i++) {\n            if (allInitialColumns[i].role !== 'data') {\n              newViewColumns.push(allInitialColumns[i]);\n            }\n            // If this loop encounter the next dataColumn, break the loop, all supporting columns for this dataColumn have been discovered\n            else {\n              break;\n            }\n          }\n        }\n      });\n      _chartWrapper?.setView({ columns: newViewColumns });\n\n      const newOptions = { ...options };\n      // Preserve the initial vAxis range so that the vAxis doesn't shift based on the visible serie(s)\n      // newOptions.vAxis.viewWindow = {\n      //   min: (options.vAxis.viewWindow.min == null) ? initialVAxisRange.min : options.vAxis.viewWindow.min,\n      //   max: (options.vAxis.viewWindow.max == null) ? initialVAxisRange.max : options.vAxis.viewWindow.max,\n      // }\n      // Set the new color array\n      newOptions.colors = newDataColumns.filter((col) => col.selected).map((col) => col.color);\n      // Set the new series object (if any)\n      // this contains other series' attributes (lineWidth, seriesType...)\n      const series = {};\n      let selectedSeriesCount = 0;\n      newDataColumns.forEach((col) => {\n        if (!col.selected) return;\n        if (col.serieAttribute != null) {\n          series[selectedSeriesCount] = col.serieAttribute;\n        }\n        selectedSeriesCount++;\n      })\n      newOptions.series = series;\n      _chartWrapper?.setOptions(newOptions);\n    }\n\n    // Call draw to apply the new DataView and 'refresh' the chart\n    _chartWrapper?.draw();\n\n    if (hasChartControl) {\n      controlWrapper?.draw();\n    }\n  };\n\n  const reconstructFunctionFromJSONstring = (columns) => {\n    if (!columns) return;\n\n    const evaluatedColumns = [];\n    for (const column of columns) {\n      if (typeof column === 'number') {\n        // If it's a number, add it as-is\n        evaluatedColumns.push(column);\n      } else if (typeof column === 'object') {\n        if (column.calc && column.calc !== 'stringify') {\n          // If it's an object with a 'calc' property, evaluate the 'calc' function\n          // using new Function() and add the result to the evaluatedColumns array\n          const calcFunction = new Function(\"dataTable\", \"rowNum\", column.calc);\n          evaluatedColumns.push({\n            ...column,\n            calc: calcFunction,\n          });\n        } else {\n          // If it's an object without a 'calc' property, or with calc = 'stringify', add it as-is\n          evaluatedColumns.push(column);\n        }\n      }\n    }\n    return evaluatedColumns;\n  }\n\n\n  // Call this function to fetch the data and draw the initial chart\n  useEffect(() => {\n    if (google && chartData) {\n      // Not applicable for Calendar chart\n      if (chartData.chartType === \"Calendar\") return;\n\n      // Get and set the dataArray \n      const dataArray = chartData.dataArray\n        || (chartData.subcharts\n          && chartData.subcharts[subchartIndex].dataArray)\n        || null\n        || null;\n      if (!dataArray) return; // early return if there is no data to render\n\n      const thisDataTable = google.visualization.arrayToDataTable(dataArray);\n      setDataTable(thisDataTable);\n\n      // Get dataColumn views\n      const columns = chartData.columns\n        || (chartData.subcharts\n          && chartData.subcharts[subchartIndex].columns)\n        || null\n        || null;\n      const reconstructedColumns = reconstructFunctionFromJSONstring(columns);\n\n      // Create chartWrapper\n      const thisChartWrapper = new google.visualization.ChartWrapper({\n        chartType: chartData.chartType,\n        dataTable: (!hasChartControl) ? thisDataTable : undefined,\n        options: options,\n        view: {\n          columns: reconstructedColumns\n        },\n        containerId: chartID\n      });\n      setChartWrapper(thisChartWrapper);\n\n      if (hasChartControl) {\n        const thisDashboardWrapper = new google.visualization.Dashboard(\n          document.getElementById(`dashboard-${chartID}`));\n        setDashboardWrapper(thisDashboardWrapper);\n\n        google.visualization.events.addListener(thisDashboardWrapper, 'ready', onChartReady);\n\n        const thisControlWrapper = new google.visualization.ControlWrapper({\n          controlType: chartControl.controlType,\n          options: chartControlOptions,\n          containerId: `control-${chartID}`\n        });\n        setControlWrapper(thisControlWrapper);\n\n        // Establish dependencies\n        thisDashboardWrapper.bind(thisControlWrapper, thisChartWrapper);\n\n        thisDashboardWrapper.draw(thisDataTable);\n      }\n      else {\n        google.visualization.events.addListener(thisChartWrapper, 'ready', onChartReady);\n        thisChartWrapper.draw();\n      }\n\n      // Run the seriesSelector for the first time\n      if (seriesSelector) {\n        const initColumns = getInitialColumns({ chartWrapper: thisChartWrapper, dataTable: thisDataTable, seriesSelector: seriesSelector });\n        handleSeriesSelection(initColumns, thisChartWrapper);\n      }\n    }\n  }, [google, chartData]);\n\n  const renderChart = () => {\n    if (hasChartControl) {\n      return (\n        <Stack\n          id={`dashboard-${chartID}`}\n          direction={ChartControlType[chartControl.controlType]?.stackDirection || 'column-reverse'}\n          sx={{ height: '100%' }}\n        >\n          <Box\n            id={`control-${chartID}`}\n            sx={{\n              height: `calc(${height} / 8)`,\n              opacity: 0.8,\n              filter: 'saturate(0.3)'\n            }}\n          />\n          <Box id={chartID} sx={{ height: height, maxHeight: maxHeight }} />\n        </Stack>\n      )\n    }\n    else return <Box id={chartID} sx={{ height: height, maxHeight: maxHeight }} />;\n  }\n\n  const onChartReady = () => {\n    if (!isFirstRender) return;\n    // Hide the circleProgress when chart finishes rendering the first time\n    setIsFirstRender(false);\n  };\n\n  return (\n    <GoogleChartStyleWrapper\n      isPortrait={isPortrait}\n      className={className}\n      position=\"relative\"\n      height=\"100%\"\n      minHeight={chartData.chartType === 'Calendar' && '200px'}\n    >\n      {/* Conditionally display loading animation here */}\n      {isFirstRender && (\n        <Box sx={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}>\n          <LoadingAnimation />\n        </Box>\n      )}\n\n      {/* Conditionally display seriesSelector here */}\n      {(seriesSelector && !isFirstRender) && (\n        <SeriesSelector\n          items={dataColumns}\n          allowMultiple={seriesSelector.allowMultiple}\n          selectorID={`${chartData.title}-selector`}\n          onSeriesSelection={handleSeriesSelection}\n        />\n      )}\n\n      {/* Display chart here */}\n      {renderChart()}\n    </GoogleChartStyleWrapper>\n  );\n}","import { useState, useEffect, useContext } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Box, Tabs, Tab, useMediaQuery } from '@mui/material/';\nimport { TabContext } from '../ContextProviders/TabContext';\n\nimport SubChart from './Subchart/SubChart';\n\nconst debounceMilliseconds = 100;\n\nconst ChartStyleWrapper = styled(Box)(({ theme }) => ({\n  // CSS for dark theme only\n  ...(theme.palette.mode === 'dark' && {\n    // De-saturate a bit\n    filter: 'saturate(0.85)',\n    // Invert iframe\n    '& .heat-map-iframe': {\n      filter: 'invert(0.848) hue-rotate(180deg)',\n    }\n  }),\n  // Special CSS for historical-snapshot-aqi chart\n  '& .historical-snapshot-aqi svg [clip-path*=\"ABSTRACT_RENDERER\"] > g:nth-of-type(1), .historical-snapshot-aqi [id*=\"googlechart-control\"] svg [clip-path*=\"ABSTRACT_RENDERER\"] > g:nth-of-type(2)': {\n    opacity: 0.6\n  },\n  // Center Calendar chart in wrapper\n  '& .Calendar [dir]:not(:empty)': {\n    margin: 'auto'\n  },\n\n  // add horizontal scrollbar to Calendar charts\n  '& .Calendar > div > div:last-of-type > div': {\n    overflowX: 'auto',\n    overflowY: 'hidden',\n    scrollbarGutter: 'stable'\n  }\n}));\n\nconst StyledTabs = styled(Tabs)(({ theme }) => ({\n  '& .MuiTabScrollButton-root': {\n    color: theme.palette.text.primary\n  },\n  '& .MuiTab-root': {\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '0.75rem',\n      paddingLeft: theme.spacing(1),\n      paddingRight: theme.spacing(1)\n    },\n  }\n}));\n\n// eslint-disable-next-line max-len\nfunction ChartComponent({ chartData: passedChartData, chartHeight: passedChartHeight, isHomepage }) {\n  const isSmallWidth = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n\n  const [isPortrait, setIsPortrait] = useState(window.matchMedia('(orientation: portrait)').matches);\n  const [windowSize, setWindowSize] = useState([\n    window.innerWidth,\n    window.innerHeight,\n  ]);\n\n  let chartMaxHeight;\n  let chartHeight = passedChartHeight;\n  const chartData = passedChartData;\n\n  // Props for tab panels (multiple data visualizations in the same chart area,\n  // navigate with tab panels)\n  const [indexValue, setIndexValue] = useState(0); // start with the first elem\n\n  // eventListener for window resize\n  // redraw \"Calendar\" charts and charts with a time filter upon window resize.\n  // Filter & Calendar charts are not automatically respnsive, so we have to redraw them.\n  // redraw other charts when device orientation changes\n  useEffect(() => {\n    setIndexValue(0); // set tab back to 0 if chartData changes (changed school)\n\n    let timeoutID = null;\n\n    const handleWindowResize = () => {\n      clearTimeout(timeoutID);\n\n      // debounce before triggering re-render. as user is resizing window, the state could\n      // change multiple times causing many expensive rerenders. we try to rerender at the\n      // end of the resize.\n      timeoutID = setTimeout(() => {\n        // Redraw all charts on device orientation change, as the chartWrapperHeights\n        // have changed.\n        setIsPortrait(window.matchMedia('(orientation: portrait)').matches);\n\n        // Redraw all charts on window resized\n        setWindowSize([window.innerWidth, window.innerHeight]);\n      }, debounceMilliseconds);\n    };\n\n    // listen to window resize events\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, [chartData]);\n\n  if (chartData.chartType !== 'Calendar' && !chartHeight) {\n    chartHeight = isPortrait ? '80vw' : '35vw';\n    chartMaxHeight = isPortrait ? '800px' : '500px';\n  }\n\n  const handleChange = (__, newValue) => {\n    setIndexValue(newValue);\n  };\n\n  return (\n    <ChartStyleWrapper height=\"100%\">\n      {chartData.subcharts ?\n        <>\n          <StyledTabs\n            value={indexValue}\n            onChange={handleChange}\n            variant={isSmallWidth ? 'fullWidth' : 'standard'}\n          >\n            {chartData.subcharts.map((element, index) => (\n              <Tab\n                key={index}\n                value={index}\n                label={chartData.subcharts[index].subchartTitle}\n              />\n            ))}\n          </StyledTabs>\n          <Box\n            position=\"relative\"\n            sx={{\n              overflowX: isPortrait && 'auto',\n              WebkitOverflowScrolling: isPortrait && 'touch',\n              overflowY: 'hidden',\n            }}\n          >\n            {chartData.subcharts.map((__, index) => (\n              <Box\n                key={index}\n                width=\"100%\"\n                height=\"100%\"\n                role=\"tabpanel\"\n                sx={{\n                  transition: '0.35s',\n                  position: (index === 0) ? '' : 'absolute',\n                  opacity: indexValue === index ? '1' : '0',\n                  pointerEvents: indexValue === index ? 'auto' : 'none',\n                  top: (index === 0) ? '' : 0\n                }}\n              >\n                <SubChart\n                  chartData={chartData}\n                  subchartIndex={index}\n                  isPortrait={isPortrait}\n                  isHomepage={isHomepage}\n                  windowSize={windowSize}\n                  height={chartData.height ? chartData.height : chartHeight}\n                  maxHeight={\n                    ['Calendar'].includes(chartData.chartType)\n                      ? ''\n                      : chartMaxHeight\n                  }\n                />\n              </Box>\n            ))}\n          </Box>\n        </>\n        :\n        <SubChart\n          chartData={chartData}\n          isPortrait={isPortrait}\n          isHomepage={isHomepage}\n          windowSize={windowSize}\n          height={chartData.height ? chartData.height : chartHeight}\n        />\n      }\n    </ChartStyleWrapper>\n  );\n}\n\nexport default ChartComponent;\n","import { Box, Table, TableBody, TableCell, TableHead, TableRow, styled } from '@mui/material';\nimport parse from 'html-react-parser';\nimport { replacePlainHTMLWithMuiComponents } from '../../Utils/Utils';\nimport ChartComponent from '../ChartComponent';\nimport AQIdatabase from '../../Utils/AirQualityIndexHelper';\nimport ThemePreferences from '../../Themes/ThemePreferences';\n\nexport const StyledTable = styled(Table)(({ theme, isTiny }) => ({\n  minWidth: isTiny || 700,\n  '& th, td': {\n    fontSize: isTiny ? '0.625rem' : '0.6875rem',\n    color: theme.palette.text.secondary,\n    [theme.breakpoints.down('sm')]: {\n      fontSize: isTiny ? '0.5rem' : '0.6875rem',\n    },\n  },\n  '& th': {\n    fontWeight: 500,\n    color: theme.palette.text.primary,\n    lineHeight: '1rem'\n  }\n}));\n\nfunction AirQualityIndexTable(props) {\n  const { isTiny, hideAQIDescription, themePreference } = props;\n\n  const renderAQIchart = ({ shouldRender }) => {\n    let aqiChart = null;\n\n    if (shouldRender) {\n      const dataArray = [['category'], ['US AQI']];\n      for (let i = 0; i < AQIdatabase.length; i += 1) {\n        dataArray[0].push(AQIdatabase[i].category);\n        dataArray[1].push(\n          Math.ceil((AQIdatabase[i].aqiUS.high - AQIdatabase[i].aqiUS.low) / 50) * 50\n        );\n      }\n\n      aqiChart = (\n        <ChartComponent\n          chartHeight=\"4rem\"\n          chartData={\n            {\n              dataArray,\n              chartType: 'BarChart',\n              options: {\n                enableInteractivity: false,\n                legend: { position: 'none' },\n                hAxis: {\n                  ticks: [0, 50, 100, 150, 200, 300, 500]\n                },\n                chartArea:\n                {\n                  width: { portrait: '98%', landscape: '50%' },\n                  height: { portrait: '20%', landscape: '30%' }\n                },\n                isStacked: true,\n                colors: 'aqi',\n                bar: { groupWidth: '100%' }\n              }\n            }\n          }\n        />\n      );\n    }\n\n    return aqiChart;\n  };\n\n  return (\n    <>\n      <Box overflow=\"auto\">\n        <StyledTable size=\"small\" isTiny={isTiny}>\n          <TableHead>\n            <TableRow>\n              <TableCell sx={{ pr: 0 }}>\n                <Box sx={{ width: '1em', height: '1em' }} />\n              </TableCell>\n              <TableCell sx={{ pl: 1 }}>\n                Category\n              </TableCell>\n              <TableCell align=\"right\">US AQI</TableCell>\n              <TableCell align=\"right\">\n                PM2.5 Concentration\n                (µg/m\n                <sup>3</sup>\n                )\n              </TableCell>\n              {!hideAQIDescription && <TableCell align=\"left\">Description</TableCell>}\n              {!hideAQIDescription && <TableCell align=\"left\">CITIESair&apos; Suggested Actions</TableCell>}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {AQIdatabase.map((element, index) => (\n              <TableRow\n                key={index}\n                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n              >\n                <TableCell sx={{ pr: 0 }}>\n                  <Box sx={{ width: '1em', height: '1em', backgroundColor: themePreference === ThemePreferences.light ? element.lightThemeColor : element.darkThemeColor }} />\n                </TableCell>\n                <TableCell sx={{ pl: 1 }}>\n                  {element.category}\n                </TableCell>\n                <TableCell align=\"right\">\n                  {element.aqiUS.low}\n                  &nbsp;\n                  -\n                  &nbsp;\n                  {element.aqiUS.high}\n                </TableCell>\n                <TableCell align=\"right\">\n                  {element.rawPM2_5.low}\n                  &nbsp;\n                  -\n                  &nbsp;\n                  {element.rawPM2_5.high}\n                </TableCell>\n                {!hideAQIDescription && <TableCell align=\"left\">{element.description}</TableCell>}\n                {!hideAQIDescription\n                  && (\n                    <TableCell align=\"left\">\n                      {\n                        parse(element.healthSuggestions.outdoors, {\n                          replace: replacePlainHTMLWithMuiComponents,\n                        })\n                      }\n                    </TableCell>\n                  )}\n              </TableRow>\n            ))}\n          </TableBody>\n        </StyledTable>\n      </Box>\n      {renderAQIchart({ shouldRender: !hideAQIDescription })}\n    </>\n\n  );\n}\n\nexport default AirQualityIndexTable;\n","import { lazy, Suspense } from 'react';\nimport LoadingAnimation from '../../Components/LoadingAnimation';\n\nexport default function ChartSubstituteComponentLoader({ chartSubstituteComponentName }) {\n  return (\n    <Suspense fallback={<LoadingAnimation />}>\n      {(() => {\n        const ChartSubstituteComponent = lazy(\n          () => import(`./${chartSubstituteComponentName}`)\n        );\n        return <ChartSubstituteComponent />;\n      })()}\n    </Suspense>\n  );\n}\n","import { useState } from 'react';\nimport { isMobile } from 'react-device-detect';\n\nimport { Fab, Fade, Popper, Paper, Typography, Stack } from '@mui/material';\nimport AirIcon from '@mui/icons-material/Air';\nimport { FadeInButtonForSpeedDial } from './Header/FadeInButtonForSpeedDial';\n\nimport * as Tracking from '../Utils/Tracking';\nimport AirQualityIndexTable from '../Graphs/ChartSubstituteComponents/AirQualityIndexTable';\n\nexport default function AirQualityIndexLegendQuickGlance(props) {\n  // Mechanism for opening and closing the Quick Glance on hover\n  const [anchorEl, setAnchorEl] = useState(null);\n  const handlePopperOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n    Tracking.sendEventAnalytics(Tracking.Events.airQualityIndexLegendQuickGlance);\n  };\n  const handlePopperClose = () => {\n    setAnchorEl(null);\n  };\n  const open = Boolean(anchorEl);\n\n  return (\n    <>\n      <FadeInButtonForSpeedDial {...props} distanceFromBottomOfWindow=\"5.5rem\">\n        <Fab\n          sx={{ mt: 1 }}\n          aria-owns={open ? Tracking.Events.airQualityIndexLegendQuickGlance : undefined}\n          aria-haspopup=\"true\"\n          onMouseEnter={handlePopperOpen}\n          onMouseLeave={handlePopperClose}\n          onClick={(event) => isMobile && (open ? handlePopperClose() : handlePopperOpen(event))}\n          aria-label={Tracking.Events.airQualityIndexLegendQuickGlance}\n          color=\"primary\"\n        >\n          <Stack direction=\"column\" alignItems=\"center\">\n            <AirIcon fontSize=\"1rem\" />\n            <Typography variant=\"body2\" fontWeight=\"500\">\n              AQI\n            </Typography>\n          </Stack>\n        </Fab>\n      </FadeInButtonForSpeedDial>\n\n      <Popper\n        id={Tracking.Events.airQualityIndexLegendQuickGlance}\n        sx={{\n          pointerEvents: 'none',\n          mt: -1\n        }}\n        open={open}\n        anchorEl={anchorEl}\n        placement=\"top-end\"\n        onClose={handlePopperClose}\n        keepMounted\n        disableRestoreFocus\n        transition\n      >\n        {({ TransitionProps }) => (\n          <Fade {...TransitionProps} timeout={350}>\n            <Paper elevation={8} sx={{ py: 0.5, mb: 1 }}>\n              <Typography sx={{ mx: 2, mt: 1 }} color=\"text.disabled\" variant=\"body1\" fontWeight={500}>\n                AQI at quick glance\n              </Typography>\n              <AirQualityIndexTable isTiny hideAQIDescription themePreference />\n            </Paper>\n          </Fade>\n        )}\n\n      </Popper>\n    </>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport dayjs from 'dayjs';\nimport { styled } from '@mui/material/styles';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { PickersDay } from '@mui/x-date-pickers/PickersDay';\nimport { DateCalendar } from '@mui/x-date-pickers/DateCalendar';\nimport { DayCalendarSkeleton } from '@mui/x-date-pickers/DayCalendarSkeleton';\nimport Card from '@mui/material/Card';\nimport ClickAwayListener from '@mui/base/ClickAwayListener';\n\nconst HighlightedDay = styled(PickersDay)(({ theme }) => ({\n  // styles for dot\n  '&:after, :hover::after': {\n    content: '\".\"',\n    fontSize: '1.5rem',\n    bottom: '-0.5rem',\n    position: 'absolute',\n    color: theme.palette.primary.main,\n    opacity: 0.5\n  },\n  '&:hover::after': {\n    opacity: 1\n  }\n}));\n\nfunction isValidDate(date, validDates) {\n  return validDates.indexOf(dayjs(date).format('YYYY-MM-DD')) >= 0;\n}\n\nfunction CustomDayComponent(props) {\n  const { versionDates = [], day, ...other } = props;\n\n  const isHighlighted = versionDates.indexOf(dayjs(day).format('YYYY-MM-DD')) >= 0;\n\n  return (\n    isHighlighted\n      ? <HighlightedDay {...other} day={day} />\n      : <PickersDay {...other} day={day} />\n  );\n}\n\nexport default function DatasetCalendar(props) {\n  const { smallScreen, onChange, versions } = props;\n\n  const versionDates = versions\n    .filter((version) => version.version.length === 10) // valid date\n    .map((version) => version.version);\n\n  return (\n    <ClickAwayListener onClickAway={() => onChange('close')}>\n      <Card\n        sx={!smallScreen && { position: 'absolute', right: 0, zIndex: 9999 }}\n        raised\n      >\n        <LocalizationProvider dateAdapter={AdapterDayjs}>\n          <DateCalendar\n            loading={!versionDates}\n            format=\"YYYY-MM-DD\"\n            renderLoading={() => <DayCalendarSkeleton />}\n            slots={{\n              day: CustomDayComponent,\n            }}\n            onChange={(value, selectionState) => {\n              if (selectionState === 'finish') {\n                return onChange(dayjs(value).format('YYYY-MM-DD'));\n              }\n              return null;\n            }}\n            slotProps={{\n              day: {\n                versionDates\n              }\n            }}\n            // disable the date if its not a valid date\n            shouldDisableDate={(day) => !isValidDate(day, versionDates)}\n            disableHighlightToday\n            minDate={dayjs(versionDates.slice(-1)[0])}\n            maxDate={dayjs(versionDates[0])}\n          />\n        </LocalizationProvider>\n      </Card>\n    </ClickAwayListener>\n  );\n}\n","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useContext } from 'react';\nimport { Container, Avatar, Modal, Tooltip, Box, Link, Typography, Stack, Select, FormControl, MenuItem, Grid, Chip, Dialog, Button, DialogActions, DialogContent, useMediaQuery, Table, TableBody, TableCell, TableHead, TableRow } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\nimport { RawDatasetsMetadataContext } from '../../ContextProviders/RawDatasetsMetadataContext';\n\nimport DownloadIcon from '@mui/icons-material/Download';\nimport DataObjectIcon from '@mui/icons-material/DataObject';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport EventIcon from '@mui/icons-material/Event';\nimport PublishedWithChangesIcon from '@mui/icons-material/PublishedWithChanges';\n\nimport * as Tracking from '../../Utils/Tracking';\nimport { fetchDataFromURL } from './DatasetFetcher';\nimport DatasetCalendar from './DatasetCalendar';\n\nexport default function DatasetDownloadDialog(props) {\n  const { project } = props;\n  const rawDatasetsMetadata = useContext(RawDatasetsMetadataContext);\n  const [datasets, setDatasets] = useState();\n\n  useEffect(() => {\n    if (!project || !rawDatasetsMetadata) return;\n    setDatasets(rawDatasetsMetadata[project?.id]); // get all the dataset(s) of this project\n  }, [project, rawDatasetsMetadata]);\n\n  const theme = useTheme();\n  const smallScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  function getOwnerString(owners) {\n    if (!owners || owners.length === 0) {\n      return 'the relevant owners';\n    } else if (owners.length === 1) {\n      return owners[0];\n    } else if (owners.length === 2) {\n      return owners.join(' and ');\n    } else {\n      const lastOwner = owners.pop();\n      const oxfordCommaOwners = owners.join(', ');\n      return `${oxfordCommaOwners}, and ${lastOwner}`;\n    }\n  }\n\n  return (\n    <>\n      <Button\n        onClick={() => {\n          handleOpen();\n          Tracking.sendEventAnalytics(Tracking.Events.rawDatasetButtonClicked, {\n            project_id: project.id\n          });\n        }}\n        variant=\"contained\"\n      >\n        <DataObjectIcon sx={{ fontSize: '1rem' }} />&nbsp;Raw Dataset\n      </Button>\n\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        maxWidth=\"lg\"\n        fullWidth\n        fullScreen={smallScreen}\n        keepMounted\n      >\n        {(\n          smallScreen &&\n          <DialogActions justifyContent=\"flex-start\">\n            <Button autoFocus onClick={handleClose}>\n              <ChevronLeftIcon sx={{ fontSize: '1rem' }} />Back\n            </Button>\n          </DialogActions>\n        )}\n\n        <DialogContent sx={{\n          px: smallScreen ? 2 : 3,\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'start',\n          height: '100%'\n        }}>\n          <Chip label={project.title} size=\"small\" sx={{ mb: 1 }} />\n          <Typography variant=\"h6\" >\n            Preview and download raw dataset(s)\n          </Typography>\n\n          <DatasetSelectorAndPreviewer datasets={datasets} smallScreen={smallScreen} project={project} />\n          {\n            datasets &&\n            <Typography variant=\"caption\" sx={{ my: 3, fontStyle: 'italic' }} >\n              This dataset is provided by the CITIES Dashboard with the support of {getOwnerString(project.owners)}. Should you intend to utilize this dataset for your project, research, or publication, we kindly request that you notify us at <Link href='mailto:nyuad.cities@nyu.edu'>nyuad.cities@nyu.edu</Link> to discuss citation requirements.\n            </Typography>\n          }\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\nconst DatasetSelectorAndPreviewer = (props) => {\n  const { datasets, smallScreen, project } = props;\n  const [previewingDataset, setPreviewingDataset] = useState();\n  const [previewingDatasetId, setPreviewingDatasetId] = useState();\n\n  // Preview the first version of the first dataset initially\n  useEffect(() => {\n    if (datasets?.length > 0) {\n      setPreviewingDataset(datasets[0]?.versions[0]);\n      setPreviewingDatasetId(datasets[0]?.id);\n      fetchDataFromURL(datasets[0]?.versions[0]?.rawLink, 'csv').then((data) => {\n        setPreviewingDataset({ ...datasets[0]?.versions[0], fetchedDataset: data });\n      });\n    }\n  }, [datasets]);\n\n  return (\n    <Grid container justifyContent=\"center\" alignItems=\"start\" spacing={3}>\n      <Grid item sm={12} md={6}>\n        <DatasetsTable\n          datasets={datasets}\n          smallScreen={smallScreen}\n          previewingDataset={previewingDataset}\n          setPreviewingDataset={setPreviewingDataset}\n          previewingDatasetId={previewingDatasetId}\n          setPreviewingDatasetId={setPreviewingDatasetId}\n        />\n      </Grid>\n      <Grid item sm={12} md={6} maxWidth={smallScreen ? '100%' : 'unset'} sx={{ mt: 1 }}>\n        <PreviewDataset\n          previewingDataset={previewingDataset}\n          previewingDatasetId={previewingDatasetId}\n          project={project}\n          smallScreen={smallScreen}\n        />\n      </Grid>\n    </Grid>\n  )\n};\n\nconst DatasetsTable = (props) => {\n  const { datasets, smallScreen, previewingDataset, setPreviewingDataset, previewingDatasetId, setPreviewingDatasetId } = props;\n  return (\n    <Table\n      size=\"small\"\n      sx={{\n        tableLayout: 'fixed',\n        '& td, div, .MuiMenuItem-root': {\n          fontSize: smallScreen ? '0.625rem' : '0.8rem'\n        }\n      }}\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell sx={{ pl: 1 }}>\n            Dataset\n          </TableCell>\n          <TableCell sx={{ width: smallScreen ? '9.5rem' : '11rem' }}>Version</TableCell>\n          <TableCell sx={{ width: smallScreen ? '5rem' : '6rem' }}>\n            Size\n          </TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {datasets?.map((dataset) => (\n          <Dataset\n            smallScreen={smallScreen}\n            dataset={dataset}\n            previewingDataset={previewingDataset}\n            setPreviewingDataset={setPreviewingDataset}\n            isPreviewing={dataset.id === previewingDatasetId}\n            setPreviewingDatasetId={setPreviewingDatasetId}\n          />\n        ))}\n      </TableBody>\n    </Table>\n  )\n}\n\nconst Dataset = (props) => {\n  const { smallScreen, dataset, setPreviewingDataset, isPreviewing, previewingDatasetId, setPreviewingDatasetId } = props;\n\n  const [fetchedDatasets, setFetchedDatasets] = useState({});\n  const NUM_RECENT_VERSIONS = 3;\n\n  const latestVersionOfThisDataset = dataset?.versions[0] || {};\n  const [showCalendar, setShowCalendar] = useState(false);\n  const [selectedVersionOfThisDataset, setSelectedVersionOfThisDataset] = useState(latestVersionOfThisDataset);\n\n  // only show NUM_RECENT_VERSIONS rows in Dropdown\n  const visibleVersions = dataset?.versions.slice(0, NUM_RECENT_VERSIONS);\n  // if currently selected version is not in first NUM_RECENT_VERSION rows,\n  // add it to the list\n  if (!visibleVersions.find((version) => version == selectedVersionOfThisDataset)) {\n    visibleVersions.push({ ...selectedVersionOfThisDataset, isOlderVersion: true });\n  }\n\n  // only show Calendar option if there are more than NUM_RECENT_VERSIONS versions\n  const shouldShowCalendar = dataset?.versions.length > NUM_RECENT_VERSIONS;\n\n  const handleVersionChange = (event) => {\n    const selectedVal = event.target.value;\n    if (selectedVal === 'Calendar') {\n      setShowCalendar(true);\n      return;\n    }\n    // Loop through the array (allVersionsOfThisDataset) to find the one with the selected version\n    const selectedVersion = dataset?.versions.find(aDatasetVersion => {\n      return aDatasetVersion.version === selectedVal;\n    });\n    setSelectedVersionOfThisDataset(selectedVersion);\n    setPreviewingDatasetId(dataset.id);\n    setPreviewingDataset(selectedVersion);\n\n    fetchThisDataset(selectedVersion);\n  };\n\n  const handleCalendarChange = (event) => {\n    // close calendar after selecting\n    setShowCalendar(false)\n    if (event === 'close') { // click outside of card\n      return\n    }\n\n    handleVersionChange({ target: { value: event } });\n  }\n\n  const fetchThisDataset = (selectedVersion) => {\n    // If this dataset version hasn't been fetched yet,\n    // fetch it and append it into the object fetchedDatasets\n    if (!fetchedDatasets[selectedVersion.version]) {\n      fetchDataFromURL(selectedVersion.rawLink, 'csv').then((data) => {\n        const selectedVersionWithFetchedDataset = { ...selectedVersion, fetchedDataset: data };\n        setPreviewingDataset(selectedVersionWithFetchedDataset);\n        setFetchedDatasets({\n          ...fetchedDatasets,\n          [selectedVersionWithFetchedDataset.version]: selectedVersionWithFetchedDataset\n        });\n      });\n    }\n    // If it has been fetched before, simply get it from memory \n    else {\n      setPreviewingDataset(fetchedDatasets[selectedVersion.version]);\n    }\n  }\n\n  const setThisDatasetToPreview = () => {\n    if (previewingDatasetId !== dataset.id) {\n      setPreviewingDatasetId(dataset.id);\n      setPreviewingDataset(selectedVersionOfThisDataset);\n      fetchThisDataset(selectedVersionOfThisDataset);\n    }\n  }\n\n  const theme = useTheme();\n\n  const formatFileSize = (sizeInBytes) => {\n    if (!sizeInBytes) return;\n\n    if (sizeInBytes < 1024 * 1024) {\n      return (sizeInBytes / 1024).toFixed(1) + \" KB\";\n    } else {\n      return (sizeInBytes / (1024 * 1024)).toFixed(1) + \" MB\";\n    }\n  }\n\n  return (\n    <>\n      <TableRow key={dataset.id}>\n        <TableCell\n          sx={{\n            pl: 1,\n            cursor: 'pointer',\n            background: isPreviewing && theme.palette.background.NYUpurpleLight\n          }}\n          onClick={setThisDatasetToPreview}>\n          {selectedVersionOfThisDataset?.name}\n        </TableCell>\n\n        <TableCell sx={{ position: 'relative', background: isPreviewing && theme.palette.background.NYUpurpleLight }}>\n          {showCalendar &&\n            (smallScreen ? <Modal\n              open={showCalendar}\n              sx={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center'\n              }}\n            >\n              <DatasetCalendar\n                onChange={handleCalendarChange}\n                smallScreen={smallScreen}\n                versions={dataset?.versions}\n              />\n            </Modal>\n              : <DatasetCalendar\n                onChange={handleCalendarChange}\n                versions={dataset?.versions}\n              />)}\n          <FormControl size=\"small\">\n            <Select\n              value={selectedVersionOfThisDataset?.version}\n              onClick={() => {\n                if (dataset.versions.length <= 1) setThisDatasetToPreview();\n              }}\n              onChange={handleVersionChange}\n              variant=\"standard\"\n              MenuProps={{ disablePortal: true }}\n            >\n              {visibleVersions.map((aDatasetVersion, index) => (\n                <MenuItem\n                  key={aDatasetVersion.version}\n                  value={aDatasetVersion.version}\n                  sx={[\n                    (index === visibleVersions.length - 1) && {\n                      mb: -0.75\n                    },\n                    aDatasetVersion.isOlderVersion && {\n                      marginTop: '1rem',\n                      '&::before': {\n                        content: '\"\"',\n                        borderTop: `2px dotted ${theme.palette.text.secondary}`,\n                        width: '1rem',\n                        height: '1rem',\n                        position: 'absolute',\n                        top: 0,\n                        left: '50%',\n                        transform: 'translate(-50%, -50%)'\n                      }\n                    }\n                  ]}\n                >\n                  <Stack direction=\"row\" alignItems=\"center\">\n                    {aDatasetVersion.version}\n                    { /* 'LATEST' chip for latest version */}\n                    {aDatasetVersion === latestVersionOfThisDataset &&\n                      <Tooltip title=\"Latest version\" enterDelay={0} leaveDelay={200}>\n                        <Avatar sx={{\n                          ml: 0.5,\n                          width: '1rem',\n                          height: '1rem',\n                          background: theme.palette.success.main\n                        }}>\n                          <PublishedWithChangesIcon sx={{ width: '0.8rem', height: '0.8rem' }} />\n                        </Avatar>\n                      </Tooltip>\n                    }\n                  </Stack>\n                </MenuItem>\n              ))}\n\n              {shouldShowCalendar && <MenuItem\n                key=\"Calendar\"\n                value=\"Calendar\"\n                sx={{ pt: 1, mt: 1, mb: -0.75, borderTop: '0.5px solid' }}\n              >\n                <Stack direction=\"row\" alignItems=\"center\">\n                  Older Versions\n                  <EventIcon fontSize='small' sx={{ ml: 0.5 }} />\n                </Stack>\n              </MenuItem>\n              }\n            </Select>\n          </FormControl>\n        </TableCell>\n        <TableCell sx={{ background: isPreviewing && theme.palette.background.NYUpurpleLight }}>\n          {formatFileSize(selectedVersionOfThisDataset?.sizeInBytes)}\n        </TableCell>\n      </TableRow >\n    </>\n  )\n}\n\nconst PreviewDataset = (props) => {\n  const { previewingDataset, previewingDatasetId, project, smallScreen } = props;\n  const downloadDatasetName = `[${project.id}] ${previewingDataset?.name}-${previewingDataset?.version}.csv`;\n\n  const theme = useTheme();\n\n  const downloadPreviewingDataset = () => {\n    if (!previewingDataset?.fetchedDataset) return;\n\n    const blob = new Blob([previewingDataset?.fetchedDataset], { type: 'application/octet-stream' }); // create a Blob with the raw data\n    const url = URL.createObjectURL(blob); // create a download link for the Blob\n    const downloadLink = document.createElement('a');\n    downloadLink.href = url;\n    downloadLink.download = downloadDatasetName;\n    document.body.appendChild(downloadLink);\n    downloadLink.click(); // simulate a click on the download link\n    URL.revokeObjectURL(url); // clean up by revoking the object URL\n    document.body.removeChild(downloadLink);\n  };\n\n  const [formattedData, setFormattedData] = useState('');\n  const [rowIndices, setRowIndices] = useState('');\n  const numFirstLastRowsToPreview = 5;\n\n  useEffect(() => {\n    if (!previewingDataset?.fetchedDataset) return;\n\n    const csvData = previewingDataset?.fetchedDataset;\n    const lines = csvData.split('\\n');\n    const numRows = lines.length;\n\n    if (numRows <= numFirstLastRowsToPreview * 2) {\n      setFormattedData(csvData);\n      setRowIndices(Array.from({ length: numRows }, (_, index) => index + 1).join('\\n')); // +1 because rowNumber starts at 1 while index starts at 0\n    } else {\n\n      const firstRows = lines.slice(0, numFirstLastRowsToPreview);\n      const lastRows = lines.slice(numRows - numFirstLastRowsToPreview);\n\n      const numOfHiddenRows = numRows - 2 * numFirstLastRowsToPreview;\n\n      const middleRow = [`... [${numOfHiddenRows} rows hidden] ...`];\n\n      setFormattedData(firstRows.concat(middleRow).concat(lastRows).join('\\n'));\n      setRowIndices(\n        Array.from({\n          length: numFirstLastRowsToPreview * 2 + 1 // +1 to account for the middleRow\n        },\n          (_, index) => {\n            const rowIndex = index + 1; // +1 because rowNumber starts at 1 while index starts at 0\n            // Indices for the first rows\n            if (rowIndex < numFirstLastRowsToPreview + 1) {\n              return rowIndex;\n            }\n            // No index for the middle row\n            else if (rowIndex == numFirstLastRowsToPreview + 1) {\n              return '';\n            }\n            // Indices for the last rows\n            else {\n              return numOfHiddenRows + rowIndex - 1;\n            }\n          })\n          .join('\\n'));\n    }\n\n  }, [previewingDataset]);\n\n  return (\n    <Stack spacing={1}>\n      <Box sx={{ '& *': { fontFamily: \"monospace !important\" } }}>\n        <Stack direction=\"row\">\n          <Typography variant='body2' gutterBottom fontWeight={500}>\n            {previewingDataset ?\n              `Previewing: ${previewingDataset.name} (${previewingDataset?.version})`\n              : 'Not previewing any dataset'}\n          </Typography>\n        </Stack>\n\n        <Box\n          component=\"pre\"\n          sx={{\n            overflowX: 'auto',\n            color: theme.palette.text.secondary,\n            backgroundColor: theme.palette.customBackground,\n            p: 2,\n            pt: 1.5,\n            borderRadius: theme.spacing(1),\n            borderTopLeftRadius: 0,\n            minHeight: \"5rem\",\n            width: smallScreen ? '100%' : 'unset',\n            marginTop: 0\n          }}\n        >\n          <Stack direction=\"row\" sx={{ fontSize: smallScreen ? '0.625rem !important' : '0.8rem !important' }}>\n            <Box sx={{ mr: 2, userSelect: 'none' }}>\n              {rowIndices}\n            </Box>\n            <Box>\n              {formattedData}\n            </Box>\n          </Stack>\n        </Box>\n      </Box>\n      <Box textAlign=\"center\" >\n        <Button\n          variant=\"contained\"\n          sx={{\n            textTransform: 'none',\n            textAlign: 'left',\n            lineHeight: 1.1,\n            px: 1.5,\n            py: 1\n          }}\n          onClick={() => {\n            downloadPreviewingDataset();\n            Tracking.sendEventAnalytics(Tracking.Events.rawDatasetDownloaded, {\n              project_id: project.id,\n              dataset_id: previewingDatasetId,\n              dataset_name: previewingDataset.name,\n              dataset_version: previewingDataset.version\n            });\n          }}\n          disabled={!previewingDataset}\n        >\n          <DownloadIcon sx={{ fontSize: '1.25rem', mr: 0.5 }} />\n          {previewingDataset ? downloadDatasetName : \"No dataset available to download\"}\n        </Button>\n      </Box>\n    </Stack >\n  )\n}","// disable eslint for this file\n/* eslint-disable */\nimport { Button, Box } from \"@mui/material\";\nimport { Link } from 'react-router-dom';\nimport TvIcon from '@mui/icons-material/Tv';\nimport HoverMenu from 'material-ui-popup-state/HoverMenu';\nimport PopupState, { bindHover, bindFocus, bindMenu } from 'material-ui-popup-state';\nimport MenuItemAsNavLink from \"./Header/MenuItemAsNavLink\";\nimport NavLinkBehavior from \"./Header/NavLinkBehavior\";\n\nconst ScreenDialog = ({ schoolID, screens }) => {\n  if (!Array.isArray(screens)) return null;\n\n  if (screens.length <= 1) return <LinkButtonToScreen url={`/screen/${schoolID}`} />\n  else return <DialogToScreen schoolID={schoolID} screens={screens} />\n};\n\nconst DialogToScreen = ({ schoolID, screens }) => {\n  return (\n    <PopupState variant=\"popover\" popupId=\"tv-screens-list\">\n      {(popupState) => (\n        <>\n          <Button\n            variant=\"contained\"\n            {...bindHover(popupState)}\n            {...bindFocus(popupState)}\n          >\n            <TvIcon sx={{ fontSize: '1rem' }} />&nbsp;TV Screens List\n          </Button>\n          <HoverMenu\n            {...bindMenu(popupState)}\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n            onClick={popupState.close}\n          >\n            {\n              screens.map((screen, index) => (\n                <MenuItemAsNavLink\n                  key={index}\n                  behavior={NavLinkBehavior.toNewPage}\n                  to={`/screen/${schoolID}/${screen.screen_name}`}\n                  label={screen.location_long}\n                  sx={{ fontSize: '0.8rem' }}\n                />\n              ))}\n          </HoverMenu>\n        </>\n      )}\n    </PopupState>\n  )\n}\n\nconst LinkButtonToScreen = ({ url }) => {\n  return (\n    <Button\n      variant=\"contained\"\n      component={Link}\n      to={url}\n    >\n      <TvIcon sx={{ fontSize: '1rem' }} />&nbsp;TV Screen\n    </Button>\n  )\n}\n\nexport default ScreenDialog;","// disable eslint for this file\n/* eslint-disable */\n\nimport { useState } from \"react\";\nimport { Menu, MenuItem, MenuList, FormControl, Select, InputLabel } from \"@mui/material\";\nimport { CustomChip } from \"../Project/Project\";\n\nimport PlaceIcon from '@mui/icons-material/Place';\n\nexport const SchoolSelector = (props) => {\n  const { currentSchoolID, currentSchoolName, allowedSchoolsData, fetchDashboardData } = props;\n  if (!Array.isArray(allowedSchoolsData) || allowedSchoolsData.length <= 1)\n    return (\n      <CustomChip\n        icon={<PlaceIcon />}\n        label={currentSchoolName}\n        tooltipTitle={\"School\"}\n      />\n    );\n\n  const [schoolID, setSchoolID] = useState('');\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleItemSelect = (schoolID) => () => {\n    if (currentSchoolID !== schoolID) {\n      setSchoolID(schoolID);\n      fetchDashboardData(schoolID);\n    }\n    handleClose();\n  };\n\n  return (\n    <>\n      <CustomChip\n        icon={<PlaceIcon />}\n        label={currentSchoolName}\n        tooltipTitle={\"Click to Select School\"}\n        clickable\n        onClick={handleClick}\n        aria-controls={open ? 'basic-menu' : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={open ? 'true' : undefined}\n      />\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n        MenuListProps={{\n          'aria-labelledby': 'basic-button',\n        }}\n      >\n        <MenuList dense>\n          {allowedSchoolsData.map((school, index) => (\n            <MenuItem\n              key={index}\n              onClick={handleItemSelect(school.school_id)}\n            >\n              {school.name}\n            </MenuItem>\n          ))}\n        </MenuList>\n      </Menu>\n    </>\n  );\n};\n\n","const AirQualityExplanation = {\n  title: \"Explanation of the US Air Quality Index (AQI)\",\n  subtitle: \"CITIESair uses the <a href='https://www.airnow.gov/aqi/aqi-basics/'>Air Quality Index (AQI)</a> developed by the United States Environmental Protection Agency (EPA) to effectively communicate different levels of PM2.5 air pollution. To calculate the AQI from the raw measurement of PM2.5 concentration (µg/m³), different breakpoints and piecewise linear function are utilized (read more <a href='https://en.wikipedia.org/wiki/Air_quality_index#United_States'>here</a>). Higher AQI values correspond to poorer air quality and greater heath risks to humans.<br><br>The US EPA sets thresholds for PM2.5 concentration: <sup>[1]</sup><ul><li><b>Annual average</b>: 12.0 µg/m³, corresponding to US AQI <b>50</b></li><li><b>24-hour average</b>: 35.0 µg/m³, corresponding to US AQI <b>100</b></li></ul>In 2021, the World's Heath Organization (WHO) proposed a new guideline for PM2.5<sup>[2]</sup> with stricter thresholds than those of the US EPA:<ul><li><b>Annual average</b>: 5.0 µg/m³, corresponding to US AQI <b>21</b></li><li><b>24-hour average</b>: 15.0 µg/m³, corresponding to US AQI <b>56</b></li></ul>\",\n  reference: \"[1] \\\"National Ambient Air Quality Standards (NAAQS) for PM.\\\" EPA, Environmental Protection Agency, https://www.epa.gov/pm-pollution/national-ambient-air-quality-standards-naaqs-pm.<br>[2] World Health Organization. \\\"WHO global air quality guidelines: particulate matter (PM2. 5 and PM10), ozone, nitrogen dioxide, sulfur dioxide and carbon monoxide: executive summary.\\\" (2021).\",\n}\n\nexport default AirQualityExplanation;","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useContext } from 'react';\nimport { LinkContext } from '../../ContextProviders/LinkContext';\nimport { TabContext } from '../../ContextProviders/TabContext';\nimport parse from 'html-react-parser';\nimport ChartComponent from '../../Graphs/ChartComponent';\nimport UppercaseTitle from '../../Components/UppercaseTitle';\nimport { Box, Typography, Container, Divider, Chip, Grid, Tooltip, Stack } from '@mui/material';\n\nimport { useTheme } from '@mui/material/styles';\n\nimport ThemePreferences from '../../Themes/ThemePreferences';\n\nimport AirQualityIndexLegendQuickGlance from '../../Components/AirQualityHelper';\n\nimport jsonData from '../../section_data.json';\n\nimport PersonIcon from '@mui/icons-material/Person';\nimport EmailIcon from '@mui/icons-material/Email';\nimport PublishedWithChangesIcon from '@mui/icons-material/PublishedWithChanges';\nimport BarChartIcon from '@mui/icons-material/BarChart';\n\nimport { replacePlainHTMLWithMuiComponents } from '../../Utils/Utils';\nimport DatasetDownloadDialog from '../../Components/DatasetDownload/DatasetDownloadDialog';\nimport ScreenDialog from '../../Components/ScreenDialog';\n\nimport { scrollToSection } from '../../Components/Header/MenuItemAsNavLink';\nimport FullWidthBox from '../../Components/FullWidthBox';\n\nimport * as Tracking from '../../Utils/Tracking';\n\nimport ChartSubstituteComponentLoader from '../../Graphs/ChartSubstituteComponents/ChartSubstituteComponentLoader';\n\nimport CurrentAQIGrid from '../../Components/CurrentAQIGrid';\nimport { SchoolSelector } from \"../Dashboard/SchoolSelector\";\n\nimport AirQualityIndexTable from '../../Graphs/ChartSubstituteComponents/AirQualityIndexTable';\nimport ExpandableSection from './ExpandableSection';\nimport AirQualityExplanation from '../../Utils/AirQualityExplanation';\n\n// Custom Chip component to display metadata\nexport const CustomChip = (props) => {\n  const { tooltipTitle, ...otherProps } = props;\n  return (\n    <Tooltip title={tooltipTitle} enterDelay={0} leaveDelay={200}>\n      <Chip\n        size=\"small\"\n        {...otherProps}\n      />\n    </Tooltip>\n  );\n}\n\nconst Project = ({ themePreference, currentSchoolData, dashboardData, allowedSchoolsData, fetchDashboardData, temperatureUnitPreference }) => {\n  const [_, __, chartsTitlesList, setChartsTitlesList] = useContext(LinkContext);\n\n  const [loading, setLoading] = useState(false);\n  const [tab, setTab] = useContext(TabContext);\n\n  let lastUpdate;\n\n  // Update the chart title list for quick navigation\n  useEffect(() => {\n    if (!dashboardData?.charts) return;\n\n    const chartsTitles = dashboardData?.charts.map((element, index) => ({ chartTitle: element.title, chartID: `chart-${index + 1}` }));\n    setChartsTitlesList(chartsTitles);\n  }, [dashboardData]);\n\n  const theme = useTheme();\n\n  return (\n    <>\n      <Box width=\"100%\">\n        <AirQualityIndexLegendQuickGlance themePreference={themePreference} />\n\n        <FullWidthBox backgroundColor='customAlternateBackground'>\n          <Container sx={{ pt: 5, pb: 3 }}>\n            <UppercaseTitle text={dashboardData?.title} />\n\n            <Grid container spacing={1} sx={{ mt: -3, pb: 3 }}>\n              <Grid item>\n                <SchoolSelector\n                  currentSchoolID={currentSchoolData?.school_id}\n                  currentSchoolName={currentSchoolData?.name}\n                  allowedSchoolsData={allowedSchoolsData}\n                  fetchDashboardData={fetchDashboardData}\n                />\n              </Grid>\n\n              <Grid item>\n                <CustomChip\n                  icon={<PersonIcon />}\n                  label={currentSchoolData?.contactPerson}\n                  tooltipTitle=\"Contact Person\"\n                />\n              </Grid>\n\n              <Grid item>\n                <CustomChip\n                  icon={<EmailIcon />}\n                  label={currentSchoolData?.contactEmail}\n                  tooltipTitle=\"Contact Email\"\n                  component=\"a\"\n                  href={`mailto:${currentSchoolData?.contactEmail}`}\n                  clickable\n                />\n              </Grid>\n\n              <Grid item>\n                <CustomChip\n                  icon={<BarChartIcon />}\n                  label={`${dashboardData?.charts?.length} Chart${dashboardData?.charts?.length > 1 ? \"s\" : \"\"}`}\n                  tooltipTitle=\"Number of Charts\"\n                  onClick={() => {\n                    scrollToSection(jsonData.charts.id);\n                    // Tracking.sendEventAnalytics(Tracking.Events.internalNavigation,\n                    //   {\n                    //     destination_id: jsonData.charts.id,\n                    //     destination_label: jsonData.dashboardData?.toString(),\n                    //     origin_id: 'chip'\n                    //   })\n                  }}\n                />\n              </Grid>\n\n              {\n                lastUpdate &&\n                <Grid item>\n                  <CustomChip\n                    icon={<PublishedWithChangesIcon />}\n                    label={`Last update: ${lastUpdate}`}\n                    tooltipTitle=\"Last Update\" />\n                </Grid>\n              }\n            </Grid>\n\n            <Box textAlign=\"center\" sx={{ mb: 2 }}>\n              <CurrentAQIGrid\n                currentSensorsData={currentSchoolData?.sensors}\n                isScreen={false}\n                temperatureUnitPreference={temperatureUnitPreference}\n              />\n            </Box>\n            <Typography\n              component=\"div\"\n              variant=\"body1\"\n              color=\"text.secondary\"\n              sx={{\n                textAlign: 'justify', pb: 2, mb: 0, \"& table *\": {\n                  color: `${theme.palette.text.secondary}`\n                }\n              }}\n              gutterBottom\n            >\n              {parse(dashboardData?.description || '', {\n                replace: replacePlainHTMLWithMuiComponents,\n              })}\n            </Typography>\n            <Stack direction=\"row\" spacing={2}>\n              <ScreenDialog schoolID={currentSchoolData?.school_id} screens={currentSchoolData?.screens} />\n\n              {/* <DatasetDownloadDialog project={project} /> */}\n\n            </Stack>\n            <ExpandableSection\n              title={AirQualityExplanation.title}\n              content={(\n                <>\n                  <AirQualityIndexTable themePreference={themePreference} />\n                  <Typography\n                    component=\"div\"\n                    variant=\"body1\"\n                    color=\"text.secondary\"\n                    sx={{ mt: 2 }}\n                  >\n                    {parse(AirQualityExplanation.subtitle, {\n                      replace: replacePlainHTMLWithMuiComponents,\n                    })}\n                  </Typography>\n                  <ExpandableSection\n                    title={\"Reference\"}\n                    content={(\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        {parse(AirQualityExplanation.reference, {\n                          replace: replacePlainHTMLWithMuiComponents,\n                        })}\n                      </Typography>\n                    )}\n                  />\n                </>\n              )}\n            />\n\n          </Container>\n        </FullWidthBox>\n\n        <Box id={jsonData.charts.id}>\n          {dashboardData?.charts?.map((element, index) => (\n            <FullWidthBox\n              key={index}\n              backgroundColor={\n                index % 2 != 0 && 'customAlternateBackground'\n              }\n            >\n              <Container\n                sx={{ pt: 4, pb: 4 }}\n                height=\"auto\"\n                className={themePreference === ThemePreferences.dark ? 'dark' : ''}\n                id={`chart-${index + 1}`}\n              >\n                <Typography variant=\"h6\" color=\"text.primary\">\n                  {index + 1}. {element.title}\n                </Typography>\n\n                {/* Either display the regular ChartComponent, or substitute with a customized component in ../../Graphs/ChartSubstituteComponents/ (if specified) */}\n                {element.chartSubstituteComponentName ?\n                  <ChartSubstituteComponentLoader chartSubstituteComponentName={element.chartSubstituteComponentName} />\n                  : (\n                    <ChartComponent\n                      chartData={{\n                        chartIndex: index,\n                        ...element,\n                      }}\n                    />\n                  )}\n\n                <Box sx={{ my: 3 }}>\n                  <Typography\n                    component=\"div\"\n                    variant=\"body1\"\n                    color=\"text.secondary\"\n                  >\n                    {element.subtitle && parse(element.subtitle, {\n                      replace: replacePlainHTMLWithMuiComponents,\n                    })}\n                    {Object.keys(tab)[index] == index &&\n                      element.subcharts &&\n                      element.subcharts[Object.values(tab)[index]]\n                        .subchartSubtitle &&\n                      parse(\n                        element.subcharts[Object.values(tab)[index]]\n                          .subchartSubtitle, {\n                        replace: replacePlainHTMLWithMuiComponents,\n                      }\n                      )}\n                  </Typography>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    {element.reference && parse(element.reference, {\n                      replace: replacePlainHTMLWithMuiComponents,\n                    })}\n                    {Object.keys(tab)[index] == index &&\n                      element.subcharts &&\n                      element.subcharts[Object.values(tab)[index]].reference &&\n                      parse(\n                        element.subcharts[Object.values(tab)[index]].reference, {\n                        replace: replacePlainHTMLWithMuiComponents,\n                      }\n                      )}\n                  </Typography>\n                </Box>\n              </Container>\n            </FullWidthBox>\n          ))}\n        </Box>\n\n        <Divider />\n      </Box>\n    </>\n  );\n};\n\nexport default Project;\n","// disable eslint for this file\n/* eslint-disable */\n\nimport { useState, useEffect, useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { fetchDataFromURL } from \"../../Components/DatasetDownload/DatasetFetcher\";\nimport Project from \"../Project/Project\";\nimport { processCurrentSensorsData } from \"../../Utils/ApiUtils\";\nimport { LinkContext } from \"../../ContextProviders/LinkContext\";\n\nimport { UserContext } from \"../../ContextProviders/UserContext\";\n\nconst Dashboard = ({ themePreference, temperatureUnitPreference, title }) => {\n  // Update the page's title\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n\n  const [_, setCurrentPage, __, ___] = useContext(LinkContext);\n  useEffect(() => {\n    setCurrentPage('dashboard');\n  }, []);\n\n  const { user } = useContext(UserContext);\n  const navigate = useNavigate();\n\n  // useEffect(() => {\n  //   if (user.checkedAuthentication === true && user.authenticated === false) {\n  //     navigate('/login');\n  //   }\n  // }, [user])\n\n  const [dashboardData, setDashboardData] = useState({});\n  const [currentSchoolData, setCurrentSchoolData] = useState({\n    school_id: null,\n    name: null,\n    contactPerson: null,\n    contactEmail: null,\n    sensors: null\n  });\n  const [allowedSchoolsData, setAllowedSchoolsData] = useState([]);\n\n  const fetchDashboardData = (optionalSchoolID) => {\n    let url;\n    if (optionalSchoolID) url = `https://api.citiesair.com/dashboard/${optionalSchoolID}`;\n    else url = 'https://api.citiesair.com/dashboard';\n\n    fetchDataFromURL(url, 'json', true)\n      .then(data => {\n        if (data.currentSchool?.sensors) {\n          const processedCurrentSensorData = processCurrentSensorsData(data.currentSchool?.sensors);\n          setCurrentSchoolData({\n            ...data.currentSchool, sensors: processedCurrentSensorData\n          });\n        }\n        else {\n          setCurrentSchoolData(data.currentSchool);\n        }\n\n        setDashboardData(data.dashboard);\n        setAllowedSchoolsData(data.allowedSchools || []);\n      })\n  }\n\n  useEffect(() => {\n    fetchDashboardData();\n  }, []);\n\n  return (\n    <>\n      <Project\n        themePreference={themePreference}\n        currentSchoolData={currentSchoolData}\n        dashboardData={dashboardData}\n        allowedSchoolsData={allowedSchoolsData}\n        fetchDashboardData={fetchDashboardData}\n        temperatureUnitPreference={temperatureUnitPreference}\n      />\n    </>\n  )\n};\n\nexport default Dashboard;","var map = {\n\t\"./AirQualityIndexTable\": 8416,\n\t\"./AirQualityIndexTable.jsx\": 8416,\n\t\"./ChartSubstituteComponentLoader\": 5276,\n\t\"./ChartSubstituteComponentLoader.jsx\": 5276\n};\n\nfunction webpackAsyncContext(req) {\n\treturn Promise.resolve().then(function() {\n\t\tif(!__webpack_require__.o(map, req)) {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t}\n\n\t\tvar id = map[req];\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 6598;\nmodule.exports = webpackAsyncContext;"],"names":["SELECT_ALL","SeriesSelector","props","itemsFromChart","items","selectorID","allowMultiple","onSeriesSelection","theme","useTheme","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","overflow","background","palette","customAlternateBackground","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","useState","setItems","selectAll","setSelectAll","useEffect","every","item","selected","handleChange","event","value","target","includes","updatedItems","map","index","selectedItems","filter","label","some","selectedItem","handleItemToggle","existingItem","Stack","spacing","direction","alignItems","FormControl","sx","breakpoints","down","width","mt","borderRadius","size","Select","labelId","id","multiple","onChange","renderValue","Visibility","fontSize","color","text","secondary","Typography","variant","length","renderedLabel","MenuItem","disabled","backgroundColor","Checkbox","checked","onClick","p","transform","Radio","borderTop","borderColor","position","bottom","zIndex","marginBottom","justifyContent","fontWeight","pl","Switch","Grid","container","display","Chip","onDelete","ChartControlType","CategoryFilter","stackDirection","DateRangeFilter","ChartRangeFilter","NumberRangeFilter","getDateRangeForCalendarChart","dateStrings","min","reduce","current","max","getValueRangeForCalendarChart","values","Math","hideAnnotations","stem","textStyle","opacity","boxStyle","returnResponsiveFontSizeInPixels","isPortrait","isSmaller","returnChartControlUI","chartControl","mainChartData","mainChartOptions","subchartIndex","chartControlUI","options","ui","snapToData","controlType","chartType","chartView","columns","subcharts","chartOptions","hAxis","textPosition","chart","axisText","vAxis","title","annotations","legend","calculateCalendarDimensions","cellSizeMin","cellSizeMax","cellSize","window","innerWidth","chartWidth","yearLabelFontSize","styled","Box","maxWidth","height","padding","boxShadow","mozBoxShadow","webkitBoxShadow","border","secondaryRGB","tooltip","margin","primary","marginTop","verticalAlign","paper","paddingTop","paddingBottom","paddingLeft","paddingRight","borderWidth","top","left","right","main","stroke","strokeWidth","cursor","getCalendarChartMargin","CalendarChart","data","dateRange","valueRange","calendarChartMargin","inFirstTwoRowsOfChart","dateStr","date","Date","dayOfWeek","getDay","isFirstTwoDaysOfWeek","firstYear","getFullYear","isInFirstYear","colors","colorAxis","isGradient","generateColorGradient","GradientBox","showLegend","from","to","emptyColor","fill","mode","axis","ticks","line","grid","minValue","maxValue","yearSpacing","monthBorderColor","monthBorderWidth","daySpacing","dayBorderWidth","day","tooltipData","find","tooltipText","DOMParser","parseFromString","body","innerHTML","extractTooltipText","CustomTooltip","tooltipBoxRef","useRef","parentDiv","parentElement","ref","className","mr","parse","replace","replacePlainHTMLWithMuiComponents","gradient","array","join","containerStyle","gradientStyle","minWidth","labelStyle","startColor","endColor","steps","hexToRgb","hex","m","r","g","b","result","exec","parseInt","rgbToHex","x","toString","interpolateColor","color1","color2","factor","slice","i","round","startRGB","endRGB","colorArray","interpolatedColor","push","SubChart","chartData","windowSize","isHomepage","chartSubstituteComponentName","ChartSubstituteComponentLoader","customClassName","useContext","GoogleContext","google","setDataTable","chartWrapper","setChartWrapper","setDashboardWrapper","controlWrapper","setControlWrapper","isFirstRender","setIsFirstRender","allInitialColumns","setAllInitialColumns","dataColumns","setDataColumns","setInitialVAxisRage","random","substr","chartID","chartTotalHeight","useMemo","opts","axisTitleTextStyle","italic","bold","axisTitle","axisTextStyle","curveType","crosshair","orientation","trigger","chartArea","portrait","landscape","isHtml","showColorCode","alignment","scrollArrows","activeColor","inactiveColor","pagingTextStyle","format","viewWindow","slantedText","slantedTextAngle","optionsColors","series","Object","forEach","_serie","serie","trendlines","_item","colorAxisFirstColor","multiColor","colorIndex","NYUpurple","aqiColorAxis","titleTextStyle","gridlines","minorGridlines","count","highContrast","contrastText","thickness","rx","shape","ry","annotationBoxFill","fillOpacity","seriesSelector","pointSize","enableInteractivity","viewWindowMode","returnGenericOptions","existingOptions","calendarDimensions","calendar","yearLabel","noDataPattern","returnCalendarChartOptions","calendarData","setCalendarData","calendarHeight","setCalendarHeight","containerWidth","dataArray","totalHeight","startYear","numberOfYear","yearHeight","minHeight","LoadingAnimation","chartControlOptions","hasChartControl","control","cleanupTouchEventListener","touchHandler","first","changedTouches","type","simulatedEvent","MouseEvent","bubbles","cancelable","view","detail","screenX","screenY","clientX","clientY","button","relatedTarget","dispatchEvent","preventDefault","controlDOM","document","querySelector","touchEvent","addEventListener","capture","removeEventListener","addTouchEventListenerForChartControl","handleSeriesSelection","setOptions","draw","method","setInitialColumnsColors","col","seriesIndex","serieAttribute","getInitialVAxisRange","vAxisMin","vAxisMax","dataTable","range","getColumnRange","sourceColumn","isNaN","newDataColumns","_chartWrapper","hiddenSeriesObject","visibleInLegend","newViewColumns","dataColumn","indexInAllInitialColumns","role","setView","newOptions","selectedSeriesCount","thisDataTable","visualization","arrayToDataTable","reconstructedColumns","evaluatedColumns","column","calc","calcFunction","Function","reconstructFunctionFromJSONstring","thisChartWrapper","ChartWrapper","undefined","containerId","thisDashboardWrapper","Dashboard","getElementById","events","addListener","onChartReady","thisControlWrapper","ControlWrapper","bind","initColumns","initialView","getView","viewFromDataTable","DataView","shouldAssignDomainRoleToFistColumn","dataSeriesIndex","getColumnLabel","initialVAxisRange","getInitialColumns","renderChart","ChartStyleWrapper","overflowX","overflowY","scrollbarGutter","StyledTabs","Tabs","chartMaxHeight","passedChartData","passedChartHeight","chartHeight","isSmallWidth","useMediaQuery","matchMedia","matches","setIsPortrait","innerHeight","setWindowSize","indexValue","setIndexValue","timeoutID","handleWindowResize","clearTimeout","setTimeout","__","newValue","element","Tab","subchartTitle","WebkitOverflowScrolling","transition","pointerEvents","StyledTable","Table","isTiny","lineHeight","hideAQIDescription","themePreference","pr","align","AQIdatabase","ThemePreferences","lightThemeColor","darkThemeColor","category","aqiUS","low","high","rawPM2_5","description","healthSuggestions","outdoors","aqiChart","shouldRender","ceil","isStacked","bar","groupWidth","renderAQIchart","Suspense","fallback","ChartSubstituteComponent","lazy","AirQualityIndexLegendQuickGlance","anchorEl","setAnchorEl","handlePopperOpen","currentTarget","Tracking","handlePopperClose","open","Boolean","FadeInButtonForSpeedDial","distanceFromBottomOfWindow","Fab","onMouseEnter","onMouseLeave","isMobile","Air","Popper","placement","onClose","keepMounted","disableRestoreFocus","TransitionProps","Fade","timeout","Paper","elevation","py","mb","mx","AirQualityIndexTable","PickersDay","content","DialogToScreen","schoolID","screens","popupId","popupState","bindHover","bindFocus","Tv","HoverMenu","bindMenu","close","screen","MenuItemAsNavLink","behavior","NavLinkBehavior","screen_name","location_long","LinkButtonToScreen","url","component","Link","Array","isArray","SchoolSelector","currentSchoolID","currentSchoolName","allowedSchoolsData","fetchDashboardData","CustomChip","icon","Place","tooltipTitle","setSchoolID","handleClose","handleItemSelect","clickable","Menu","MenuListProps","MenuList","dense","school","school_id","name","subtitle","reference","otherProps","enterDelay","leaveDelay","lastUpdate","currentSchoolData","dashboardData","temperatureUnitPreference","LinkContext","setChartsTitlesList","TabContext","tab","charts","chartsTitles","chartTitle","FullWidthBox","Container","pt","pb","UppercaseTitle","Person","contactPerson","Email","contactEmail","href","BarChart","scrollToSection","jsonData","textAlign","CurrentAQIGrid","currentSensorsData","sensors","isScreen","gutterBottom","ExpandableSection","AirQualityExplanation","ChartComponent","chartIndex","my","keys","subchartSubtitle","Divider","setCurrentPage","UserContext","user","useNavigate","setDashboardData","setCurrentSchoolData","setAllowedSchoolsData","optionalSchoolID","fetchDataFromURL","then","currentSchool","processedCurrentSensorData","processCurrentSensorsData","dashboard","allowedSchools","webpackAsyncContext","req","Promise","resolve","__webpack_require__","o","e","Error","code","module","exports"],"sourceRoot":""}