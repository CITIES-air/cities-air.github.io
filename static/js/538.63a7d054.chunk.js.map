{"version":3,"file":"static/js/538.63a7d054.chunk.js","mappings":"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","sources":["Pages/Screen/RecentHistoricalGraph.jsx","Pages/Screen/Screen.jsx","Pages/Screen/ScreenUtils.jsx","Pages/Screen/TemperatureUtils.jsx","Utils/AirQualityIndexCalculator.jsx","Utils/AirQualityIndexHelper.jsx"],"sourcesContent":["// disable eslint for this file\n/* eslint-disable */\nimport { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\n\nimport convertToAQI from '../../Utils/AirQualityIndexCalculator';\nimport AQIdatabase from '../../Utils/AirQualityIndexHelper';\nimport { SensorStatus } from './ScreenUtils';\nimport { Box } from '@mui/material';\n\nimport { capitalizeFirstCharacter } from './ScreenUtils';\n\nimport CustomThemes from '../../Themes/CustomThemes';\n\nconst numberOfHoursForHistoricalData = 6;\n\nconst RecentHistoricalGraph = (props) => {\n  const { data } = props;\n\n  const [firstDraw, setFirstDraw] = useState(true);\n\n  const graphContainer = useRef();\n  const layerBackground = useRef();\n  const layerTexts = useRef();\n  const layerXaxisWrapper = useRef();\n  const layerLines = useRef();\n\n  let svg, width, height, xAxis, yAxis;\n  let maxAQItoDisplay = 200;\n  const xTickPeriod = 120; // xAxis ticks every 2 hour\n  const dotRadius = 10;\n  const margin = { top: 30, right: 80, bottom: 0, left: 70 };\n\n  // Set up D3's line generator\n  const lineGenerator = d3\n    .line()\n    .x(function (d) {\n      return xAxis(d.timestamp);\n    }) // set the x values for the line generator\n    .y(function (d) {\n      return yAxis(d.aqi);\n    }) // set the y values for the line generator\n    .curve(d3.curveCardinal.tension(0)); // apply smoothing to the line\n\n  useEffect(() => {\n    if (!data) return;\n    if (!graphContainer.current) return;\n    if (!layerBackground.current) return;\n    if (!layerTexts.current) return;\n    if (!layerXaxisWrapper.current) return;\n    if (!layerLines.current) return;\n\n    svg = d3.select(graphContainer.current);\n    width = graphContainer.current.clientWidth;\n    height = graphContainer.current.clientHeight - margin.top;\n\n    // Clear all previous drawings\n    d3.select(layerBackground.current).selectAll(\"*\").remove();\n    d3.select(layerTexts.current).selectAll(\"*\").remove();\n    d3.select(layerXaxisWrapper.current).selectAll(\"*\").remove();\n    d3.select(layerLines.current).selectAll(\"*\").remove();\n\n    d3.select(layerBackground.current)\n      .attr(\"opacity\", 0.5);\n    d3.select(layerTexts.current)\n      .attr(\"filter\", \"brightness(0.8) contrast(1.2) saturate(1.2)\");\n\n    Object.entries(data).forEach(([key, sensorData]) => {\n      // Create the JS date object and calculate AQI from raw measurements\n      sensorData.historical?.forEach(function (d) {\n        d.timestamp = new Date(d.timestamp);\n        d.aqi = convertToAQI(d[\"pm2.5\"]).aqi;\n      });\n\n      // Calculate the maximum value AQI of this sensor\n      if (sensorData.historical && Array.isArray(sensorData.historical)) {\n        const max = d3.max(sensorData.historical, function (d) {\n          return d.aqi;\n        });\n        if (max > maxAQItoDisplay) maxAQItoDisplay = max;\n      }\n    });\n\n    // Calculate the maximum AQI for the y-axis to display\n    maxAQItoDisplay = Math.ceil(maxAQItoDisplay / 50) * 50; // round to the nearest 50 points\n\n    AQIdatabase.forEach((category) => {\n      if (maxAQItoDisplay >= category.aqiUS.low && maxAQItoDisplay <= category.aqiUS.high) {\n        maxAQItoDisplay = category.aqiUS.high;\n      }\n    });\n\n    // 1. Set up the xAxis domain and range\n    let xAxisMax = new Date();\n    let xAxisMin = new Date();\n    xAxisMin.setHours(xAxisMin.getHours() - numberOfHoursForHistoricalData);\n    xAxis = d3.scaleTime().domain([xAxisMin, xAxisMax]).rangeRound([margin.left, width - margin.right]); // width is inclusive of margin\n\n    // 2. Set up the yAxis domain and range\n    yAxis = d3.scaleLinear().domain([0, maxAQItoDisplay]).range([height + margin.top, margin.top]); // height is already exclusive of margin\n\n    // 7. Add the background category layer and the AQI levels (rectangles) and the grids\n    let font_size = Math.floor((((AQIdatabase[1].aqiUS.high - AQIdatabase[0].aqiUS.high) / maxAQItoDisplay) * height) / 2);\n    let marginText = Math.floor(font_size / 5);\n    // Loop through all the aqi_category and add each category into the graph\n    for (let i = 0; i < AQIdatabase.length; i++) {\n      const category = AQIdatabase[i];\n      if (maxAQItoDisplay <= category.aqiUS.low) break;\n      // Add the rectangles\n      const aqiRange = Math.ceil((category.aqiUS.high - category.aqiUS.low) / 50) * 50;\n      d3.select(layerBackground.current)\n        .append(\"rect\")\n        .attr(\"x\", 0)\n        .attr(\"y\", height - (category.aqiUS.high / maxAQItoDisplay) * height + margin.top)\n        .attr(\"width\", width)\n        .attr(\"height\", aqiRange / maxAQItoDisplay * height)\n        .attr(\"fill\", category.lightThemeColor);\n\n      // Add the AQI categories numbers\n      d3.select(layerTexts.current)\n        .append(\"text\")\n        .attr(\"x\", marginText)\n        .attr(\n          \"y\",\n          height -\n          (category.aqiUS.low / maxAQItoDisplay) * height -\n          3.5 * marginText + margin.top\n        )\n        .attr(\"fill\", category.lightThemeColor)\n        .attr(\"font-size\", font_size)\n        .text(Math.floor(category.aqiUS.low / 50) * 50);\n\n      d3.select(layerTexts.current)\n        .append(\"text\")\n        .attr(\"class\", \"category-text-graph-sm\")\n        .attr(\"x\", marginText + 2)\n        .attr(\n          \"y\",\n          height - (category.aqiUS.low / maxAQItoDisplay) * height - marginText + margin.top\n        )\n        .attr(\"fill\", category.lightThemeColor)\n        .attr(\"font-size\", font_size / 2)\n        .text(category.category);\n    };\n\n    // Add the xAxisWrapper and its texts\n    d3.select(layerXaxisWrapper.current)\n      .append(\"rect\")\n      .attr(\"x\", 0)\n      .attr(\"y\", 0)\n      .attr(\"width\", width)\n      .attr(\"height\", margin.top)\n      .attr(\"fill\", \"white\");\n\n    // 9.2. Add the X Axis on top of the graph, as well as ticks\n    let formatHour = d3.timeFormat(\"%H:%M\");\n    d3.select(layerXaxisWrapper.current)\n      .append(\"g\")\n      .attr(\"transform\", `translate(0,${margin.top})`)\n      .call(\n        d3\n          .axisTop(xAxis)\n          .tickSize(-height) // negative length to make vertical lines\n          .ticks(d3.timeMinute.every(xTickPeriod))\n          .tickFormat(function (d) {\n            return formatHour(d);\n          })\n      )\n      .attr(\"font-size\", font_size / 2.25)\n      .select(\".domain\")\n      .remove();\n    d3.select(layerXaxisWrapper.current)\n      .selectAll('line')\n      .attr('stroke', 'white')\n      .attr('stroke-width', 2)\n      .attr('opacity', 0.5);\n\n    Object.entries(data).forEach(([key, sensorData]) => {\n      // Append the line chart for this location\n      d3.select(layerLines.current)\n        .append(\"path\")\n        .datum(sensorData.historical || [])\n        .attr(\"x\", margin.left)\n        .attr(\"class\", \"line\")\n        .attr(\"d\", lineGenerator)\n        .attr(\"fill\", \"transparent\")\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-width\", \"5px\")\n        .attr(\"opacity\", sensorData.sensor?.location_type === \"outdoors\" ? 1 : 0.5);\n\n      // Append the circle marker at the end of this line chart to denote its liveness\n      const mostRecentData = sensorData.historical?.length > 0 ? sensorData.historical?.[0] : null;\n      if (mostRecentData) {\n        const aqiObject = AQIdatabase[convertToAQI(mostRecentData[\"pm2.5\"]).aqi_category_index];\n        const markerWrapper = d3.select(layerLines.current)\n          .append(\"g\")\n          .attr(\n            \"transform\",\n            \"translate(\" +\n            xAxis(mostRecentData.timestamp) +\n            \",\" +\n            yAxis(mostRecentData.aqi) +\n            \")\"\n          )\n          .attr(\"fill\",\n            sensorData.current?.sensor_status === SensorStatus.active\n              ? aqiObject.lightThemeColor\n              : CustomThemes.universal.palette.inactiveSensor)\n          ;\n\n        sensorData.current?.sensor_status === SensorStatus.active &&\n          markerWrapper.append(\"circle\")\n            .attr(\"cx\", 0)\n            .attr(\"cy\", 0)\n            .attr(\"filter\", \"brightness(0.5)\")\n            .attr(\"class\", \"pulse-ring\")\n            .attr(\"r\", 2.5 * dotRadius);\n\n        markerWrapper.append(\"circle\")\n          .attr(\"cx\", 0)\n          .attr(\"cy\", 0)\n          .attr(\"stroke\", \"#666\")\n          .attr(\"class\", sensorData.current?.sensor_status === SensorStatus.active && \"pulse-dot\")\n          .attr(\"r\", dotRadius);\n\n        markerWrapper.append(\"text\")\n          .attr(\"x\", dotRadius * 1.5)\n          .attr(\"y\", 0)\n          .attr(\"fill\", \"black\")\n          .attr(\"alignment-baseline\", \"middle\")\n          .attr(\"text-anchor\", \"left\")\n          .attr(\"font-size\", font_size / 3)\n          .text(capitalizeFirstCharacter(sensorData.sensor?.location_short));\n      }\n    });\n\n  }, [data])\n\n  return (\n    <Box\n      sx={{\n        '& .pulse-ring': {\n          animation: 'pulse-ring 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes pulse-ring': {\n            '0%': {\n              transform: 'scale(0.2)'\n            },\n            '80%': {},\n            '100%': {\n              opacity: 0\n            }\n          }\n        },\n        '& .pulse-dot': {\n          animation: 'pulse-dot 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes pulse-dot': {\n            '0%': {\n              transform: 'scale(0.5)'\n            },\n            '50%': {\n              transform: 'scale(1)',\n              filter: 'brightness(1.2) contrast(1.2) saturate(1.2)'\n            },\n            '100%': {\n              transform: 'scale(0.5)'\n            }\n          }\n        }\n      }}\n      width=\"100%\"\n      height=\"100%\"\n    >\n      <svg\n        id=\"recent-historical-graph\"\n        width=\"100%\"\n        height=\"100%\"\n        ref={graphContainer}\n      >\n        <g ref={layerBackground} />\n        <g ref={layerXaxisWrapper} />\n        <g ref={layerTexts} />\n        <g ref={layerLines} />\n      </svg>\n    </Box>\n\n  );\n}\n\nexport default RecentHistoricalGraph;","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect } from 'react';\n\nimport { Box, Grid, Typography, Stack, List, ListItem, ListItemText } from '@mui/material';\nimport ThermostatIcon from '@mui/icons-material/Thermostat';\nimport WaterDropIcon from '@mui/icons-material/WaterDrop';\nimport ErrorIcon from '@mui/icons-material/Error';\n\nimport CITIESlogoLinkToHome from '../../Components/Header/CITIESlogoLinkToHome';\n\nimport { returnSensorStatus, SensorStatus, calculateSensorStatus, removeLastDirectoryFromURL } from './ScreenUtils';\nimport { TemperatureUnits, getFormattedTemperature, calculateHeatIndex } from \"./TemperatureUtils\";\n\nimport RecentHistoricalGraph from './RecentHistoricalGraph';\n\nimport { fetchDataFromURL } from '../../Components/DatasetDownload/DatasetFetcher';\nimport AQIdatabase from '../../Utils/AirQualityIndexHelper';\nimport convertToAQI from '../../Utils/AirQualityIndexCalculator';\n\nimport CustomThemes from '../../Themes/CustomThemes';\n\nimport QRCode from \"react-qr-code\";\n\nimport parse from 'html-react-parser';\n\nconst Screen = () => {\n  const [isLayoutReversed, setIsLayoutReversed] = useState();\n  const [temperatureUnit, setTemperatureUnit] = useState(TemperatureUnits.celsius); // default\n\n  const [data, setData] = useState({});\n\n  // Tweak the layout of the screen to prevent burn-in\n  useEffect(() => {\n    // Helper function to change layout of the screen based on current's month\n    // (arrange the left and right sections of the screen)\n    // to mitigate burn-in if the same static image is displayed over a long period of time\n    function returnIsLayoutReversed() {\n      let months = [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1]; // 12 months of a year, change the layout every two months\n      let now = new Date();\n      let thisMonthIndex = now.getMonth(); // get the index of this Month (0-11)\n      // Return a boolean value if the layout should be reversed\n      return (months[thisMonthIndex] !== 0);\n    }\n\n    setIsLayoutReversed(returnIsLayoutReversed());\n\n    // Set up an interval to call the function every day\n    const oneDayInMilliseconds = 24 * 60 * 60 * 1000;\n    const intervalId = setInterval(() => {\n      setIsLayoutReversed(returnIsLayoutReversed());\n    }, oneDayInMilliseconds);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  // Load condensed font for this component\n  useEffect(() => {\n    const link = document.createElement('link');\n    link.href = 'https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+Condensed:wght@400;500&display=swap';\n    link.rel = 'stylesheet';\n    document.head.appendChild(link);\n\n    return () => {\n      // Cleanup if needed (e.g., remove the link element)\n      document.head.removeChild(link);\n    };\n  }, []);\n\n  // Get searchParams for customization\n  // like switching to Fahrenheit / turning on-off heatIndex\n  // urlParams should be something like this /?isFahrenheit\n  useEffect(() => {\n    const url = new URL(document.location.href);\n    const searchParamsKeys = url.searchParams;\n\n    searchParamsKeys.forEach((value, key) => {\n      switch (key) {\n        case 'isFahrenheit':\n          setTemperatureUnit(TemperatureUnits.fahrenheit);\n          break;\n        default:\n          break;\n      }\n    });\n  }, []);\n\n  // Fetch air quality data from database\n  useEffect(() => {\n    const currentUrl = window.location.href;\n    const regex = /\\/screen\\/(.+)/;\n    const match = currentUrl.match(regex);\n\n    let apiUrl;\n    if (match && match.length > 1) {\n      apiUrl = `https://api.citiesair.com/screen/${match[1]}`\n    }\n\n    const fetchScreenData = () => {\n      fetchDataFromURL(apiUrl, 'json', true)\n        .then((data => {\n          Object.entries(data).map(([_, sensorData]) => {\n            // Calculate if the sensor is currently active or not\n            const now = new Date();\n            const currentTimestamp = new Date(sensorData.current?.timestamp);\n            const lastSeenInHours = Math.round((now - currentTimestamp) / 1000 / 3600);\n            if (sensorData.current) {\n              sensorData.current.lastSeenInHours = lastSeenInHours;\n              sensorData.current.sensor_status = calculateSensorStatus(lastSeenInHours);\n            }\n\n            // Calculate AQI from raw measurements\n            if (sensorData.current?.[\"pm2.5\"]) {\n              const aqiObject = convertToAQI(sensorData.current[\"pm2.5\"]);\n              if (aqiObject) {\n                const aqiCategory = AQIdatabase[aqiObject.aqi_category_index];\n                sensorData.current.aqi = aqiObject.aqi;\n                sensorData.current.category = aqiCategory.category;\n\n                // Only add color and healthSuggestion if the sensor is active\n                if (sensorData.current.sensor_status === SensorStatus.active) {\n                  sensorData.current = {\n                    ...sensorData.current,\n                    color: aqiCategory.lightThemeColor,\n                    healthSuggestion: parse(aqiCategory.healthSuggestions[sensorData.sensor?.location_type])\n                  };\n                }\n              }\n            }\n          });\n          setData(data);\n        }))\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n    fetchScreenData();\n\n    // Create an interval that fetch new data every 5 minute\n    const fetchInterval = 5 * 60 * 1000; // 5min\n    const intervalId = setInterval(fetchScreenData, fetchInterval);\n    // Clean up the interval when the component unmounts\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  const AirQualityComparison = () => {\n    // Only display air quality comparison if every sensor is currently active\n    if (!Object.values(data).every((sensorData) => sensorData.current?.sensor_status === SensorStatus.active)) return null;\n\n    let outdoorsAQI, indoorsAQI;\n    // Don't display comparison if outdoor air is good\n    for (let i = 0; i < Object.values(data).length; i++) {\n      const sensorData = Object.values(data)[i];\n      if (sensorData.sensor?.location_type === \"outdoors\") {\n        outdoorsAQI = sensorData.current.aqi;\n        if (outdoorsAQI <= AQIdatabase[0].aqiUS.high) return null;\n      }\n      else indoorsAQI = sensorData.current.aqi;\n    }\n\n    const ratio = outdoorsAQI / indoorsAQI;\n    let comparison;\n    if (ratio >= 2) comparison = `${parseFloat(ratio).toFixed(1)} times`;\n    else if (ratio > 1.2) comparison = `${Math.round(100 * ((outdoorsAQI - indoorsAQI) / indoorsAQI))}%`;\n    else return null;\n\n    return (\n      <ListItem>\n        <ListItemText primary={\n          <>Indoors air is\n            <Typography\n              component=\"span\"\n              color={AQIdatabase[0].lightThemeColor}>{` ${comparison} `}\n            </Typography>\n            better than outdoors</>\n        } />\n      </ListItem>\n    );\n  }\n\n  return (\n    <Grid\n      container\n      alignContent=\"stretch\"\n      alignItems=\"stretch\"\n      height=\"100vh\"\n      sx={{\n        overflow: 'hidden',\n        background: \"white\",\n        '& .MuiSvgIcon-root': {\n          verticalAlign: 'sub'\n        },\n        '& *': {\n          color: CustomThemes.universal.palette.inactiveSensor,\n          fontWeight: '500 !important'\n        },\n        '& .condensedFont': {\n          fontFamily: 'IBM Plex Sans Condensed, sans-serif !important',\n          '& *': {\n            fontFamily: 'IBM Plex Sans Condensed, sans-serif !important'\n          }\n        },\n        '& .flashingRed': {\n          '& .MuiTypography-root ': {\n            color: `${AQIdatabase[3].lightThemeColor} !important`,\n            opacity: 0.8\n          },\n          color: `${AQIdatabase[3].lightThemeColor} !important`,\n          animation: 'flashingRed 3s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes flashingRed': {\n            '0%': {\n              opacity: 1\n            },\n            '50%': {\n              opacity: 0.5\n            },\n            '100%': {\n              opacity: 1\n            }\n          }\n        }\n      }}\n    >\n      <Grid\n        item\n        xs={6}\n        sx={{\n          py: 3,\n          px: 2,\n          order: isLayoutReversed ? 1 : 0,\n          background: '#212529'\n        }}\n      >\n        <Stack\n          direction=\"column\"\n          justifyContent=\"space-between\"\n          height=\"100%\"\n          textAlign=\"center\"\n        >\n          <Box>\n            <Typography variant=\"h4\" fontWeight=\"500\" color=\"white\">\n              PM2.5 AIR QUALITY INDEX\n            </Typography>\n            <Typography variant=\"h5\" className='condensedFont'>\n              Particulate Matter &lt; 2.5μm\n            </Typography>\n          </Box>\n\n          <Grid\n            container\n            justifyContent=\"space-around\"\n          >\n            {\n              Object.entries(data).map(([key, sensorData]) => (\n                <Grid\n                  item\n                  key={key}\n                  xs={12 / Object.keys(data).length}\n                  sx={\n                    sensorData.current?.sensor_status !== SensorStatus.active &&\n                    { '& *': { color: `${CustomThemes.universal.palette.inactiveSensor}!important` } }\n                  }\n                >\n                  <Box sx={{ '& *': { color: sensorData.current?.color } }}>\n                    <Typography variant=\"h4\" data-category=\"\" fontWeight=\"500\" className='condensedFont'>\n                      {sensorData.sensor?.location_long || sensorData.sensor?.location_short || 'No Location Name'}\n                    </Typography>\n                    <Typography variant=\"h1\" data-category=\"\" fontWeight=\"500\" lineHeight={0.8}>\n                      {sensorData.current?.aqi || '--'}\n                    </Typography>\n                    <Typography variant=\"h4\" data-category=\"\" fontWeight=\"500\" className='condensedFont'>\n                      {sensorData.current?.category || '--'}\n                    </Typography>\n                  </Box>\n\n                  <Box sx={{ '& *': { color: '#c8dcff' }, mt: 2 }} className='condensedFont'>\n                    <Typography variant=\"h6\">\n                      <ThermostatIcon />\n                      {\n                        getFormattedTemperature({\n                          rawTemp: sensorData.current?.temperature || \"--\",\n                          currentUnit: TemperatureUnits.celsius,\n                          returnUnit: temperatureUnit\n                        })\n                      }\n                      &nbsp;&nbsp;-&nbsp;\n                      <WaterDropIcon sx={{ transform: 'scaleX(0.9)' }} />\n                      {sensorData.current?.rel_humidity ? Math.round(sensorData.current?.rel_humidity) : \"--\"}%\n                    </Typography>\n                    {\n                      // Show heat index for selected location types\n                      ['outdoors', 'indoors_gym'].includes(sensorData.sensor?.location_type) &&\n                      <Typography variant=\"body1\" sx={{ fontWeight: '300 !important' }}>\n                        {calculateHeatIndex({\n                          rawTemp: sensorData.current?.temperature,\n                          currentUnit: TemperatureUnits.celsius,\n                          rel_humidity: sensorData.current?.rel_humidity,\n                          returnUnit: temperatureUnit\n                        })}\n                      </Typography>\n                    }\n                    {\n                      sensorData.current?.sensor_status !== SensorStatus.active\n                      &&\n                      <Typography variant=\"h6\" sx={{ fontWeight: '500 !important' }}>\n                        <ErrorIcon\n                          sx={{\n                            '& *': {\n                              color: `${AQIdatabase[3].lightThemeColor} !important`\n                            },\n                            mr: 0.5\n                          }} />\n                        Offline\n                        {\n                          sensorData.current?.sensor_status === SensorStatus.temporaryOffline\n                          &&\n                          ` - Last seen ${sensorData.current?.lastSeenInHours}hr${sensorData.current?.lastSeenInHours > 1 && \"s\"} ago`\n                        }\n                      </Typography>\n                    }\n                  </Box>\n\n                  {\n                    // Display outdoor-indoor comparison if both sensors are active\n                    sensorData.sensor_status !== SensorStatus.active &&\n                    <Typography variant=\"h6\" data-category=\"\" className=\"condensedFont\">\n                      {returnSensorStatus(sensorData)}\n                    </Typography>\n                  }\n                </Grid>\n              ))\n            }\n          </Grid>\n\n          <List className='condensedFont'\n            sx={{\n              listStyleType: 'disclosure-closed',\n              '& .MuiTypography-root': {\n                fontSize: '1.5rem'\n              },\n              '& .MuiListItem-root': {\n                display: 'list-item',\n                ml: 3,\n                p: 0,\n                pr: 3\n              }\n            }}>\n            <AirQualityComparison />\n            {\n              Object.entries(data).map(([key, sensorData]) => (\n                sensorData.current?.healthSuggestion &&\n                <ListItem\n                  key={key}\n                  className={sensorData.current?.aqi >= AQIdatabase[2].aqiUS.low && 'flashingRed'}\n                >\n                  <ListItemText primary={sensorData.current?.healthSuggestion} />\n                </ListItem>\n              ))\n            }\n          </List>\n        </Stack>\n      </Grid>\n\n      <Grid item xs={6} sx={{ order: isLayoutReversed ? 0 : 1 }}>\n        <Box\n          sx={{\n            position: 'absolute',\n            top: 0,\n            right: !isLayoutReversed && 0,\n            left: isLayoutReversed && 0,\n            width: '5vw',\n            height: '5vw',\n            m: 1\n          }}\n        >\n          <CITIESlogoLinkToHome />\n        </Box>\n        <Grid\n          container\n          alignContent=\"space-between\"\n          justifyContent=\"center\"\n          height=\"100%\"\n          textAlign=\"center\"\n        >\n          <Grid item xs={12} sx={{ pt: 3, px: 2 }}>\n            <Typography variant=\"h4\" fontWeight=\"500\" sx={{ color: 'black' }} className='condensedFont'>\n              SCAN FOR HISTORICAL DATA\n            </Typography>\n          </Grid>\n          <Grid item xs={2}>\n            <Box height=\"auto\" width=\"100%\">\n              <QRCode\n                size={256}\n                style={{ height: \"auto\", maxWidth: \"100%\", width: \"100%\" }}\n                value={\n                  `${removeLastDirectoryFromURL(document.location.href)}?source=screen`\n                } viewBox={`0 0 256 256`}\n              />\n            </Box>\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            height=\"70%\"\n            className='condensedFont'\n            sx={{ '& *': { fontWeight: '600 !important' } }}\n          >\n            <RecentHistoricalGraph data={data} />\n          </Grid>\n        </Grid>\n\n      </Grid>\n    </Grid >\n  );\n};\n\nexport default Screen;\n","// ---------- Calculate time difference and return appropriate format\nexport const getFormattedElapsedTimeFromNow = (dateString) => {\n  const inputDate = new Date(dateString);\n  const currentDate = new Date();\n  const timeDifference = currentDate - inputDate;\n\n  // Calculate time differences in seconds, minutes, hours, and days\n  const seconds = Math.floor(timeDifference / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  // Determine the most prominent time unit\n  if (days > 0) {\n    return `${days}d`;\n  } else if (hours > 0) {\n    return `${hours}h`;\n  } else if (minutes > 0) {\n    return `${minutes}m`;\n  } else {\n    return `${seconds}s`;\n  }\n}\n\n// ---------- Sensor status\nexport const SensorStatus = {\n  active: \"active\",\n  temporaryOffline: \"temporaryOffline\",\n  offline: \"offline\"\n};\n\nconst SensorStatusCriteria = [\n  {\n    name: SensorStatus.active,\n    cutoffInHours: {\n      low: 0,\n      high: 2\n    }\n  },\n  {\n    name: SensorStatus.temporaryOffline,\n    cutoffInHours: {\n      low: 3,\n      high: 6\n    }\n  },\n  {\n    name: SensorStatus.offline,\n    cutoffInHours: {\n      low: 7,\n      high: Infinity\n    }\n  }\n];\n\nexport const calculateSensorStatus = (lastSeenInHours) => {\n  for (let i = 0; i < SensorStatusCriteria.length; i++) {\n    const category = SensorStatusCriteria[i];\n    if (category.cutoffInHours.low <= lastSeenInHours && lastSeenInHours <= category.cutoffInHours.high) {\n      return category.name;\n    }\n  }\n}\n\nexport const returnSensorStatus = (currentDataForSensor) => {\n  switch (currentDataForSensor.sensor_status) {\n    case SensorStatus.active:\n      return null;\n    case SensorStatus.temporaryOffline:\n      return `Last seen: ${currentDataForSensor.lastSeen}h ago`;\n    case SensorStatus.offline:\n      return \"Sensor offline\";\n    default:\n      return null;\n  }\n}\n\n// ----- Misc\nexport const capitalizeFirstCharacter = (inputString) => {\n  if (inputString) return inputString.charAt(0).toUpperCase() + inputString.slice(1);\n  else return null;\n};\n\nexport const removeLastDirectoryFromURL = (url) => {\n  const urlComponents = url.split('/');\n  // Remove the last component (directory)\n  urlComponents.pop();\n  // Reconstruct the URL with the last directory removed\n  return urlComponents.join('/') + '/';\n}","export const TemperatureUnits = {\n  celsius: 'C',\n  fahrenheit: 'F',\n};\n\n// Converts a temperature to the specified unit\nexport function convertTemperature(temp, toUnit) {\n  if (typeof temp !== 'number') {\n    return temp; // Return as-is if input is not a number\n  }\n\n  if (toUnit === TemperatureUnits.celsius) {\n    return Math.round(((temp - 32) * 5) / 9);\n  } else if (toUnit === TemperatureUnits.fahrenheit) {\n    return Math.round((temp * 9) / 5 + 32);\n  }\n\n  return temp; // Return as-is for unsupported units\n}\n\n// Return formatted temperature in the appropriate system\nexport function getFormattedTemperature({ rawTemp, currentUnit, returnUnit }) {\n  return `${(currentUnit === returnUnit) ? rawTemp : convertTemperature(rawTemp, returnUnit)}°${returnUnit}`;\n}\n\n// -------- Heat index calculation\n// Define the heat index categories and their thresholds\nconst heatIndexCategories = [\n  { name: \"N/A\", threshold: 80 },\n  { name: \"Caution\", threshold: 90 },\n  { name: \"Extreme Caution\", threshold: 105 },\n  { name: \"Danger\", threshold: 130 },\n  { name: \"Extreme Danger\", threshold: Infinity },\n];\n// Calculate heat index temperature and return the category\nexport function calculateHeatIndex({ rawTemp, currentUnit, rel_humidity, returnUnit }) {\n  // Make sure the input values are valid\n  if (typeof rawTemp !== 'number' || typeof rel_humidity !== 'number') return null;\n  const tempF = (currentUnit === TemperatureUnits.fahrenheit)\n    ? rawTemp :\n    convertTemperature(rawTemp, TemperatureUnits.fahrenheit);\n  if (rel_humidity < 0 || rel_humidity > 100) return null;\n\n  let heatIndexF;\n\n  if (tempF < 80) heatIndexF = tempF;\n  else\n    heatIndexF = Math.round(\n      -42.379 +\n      (2.04901523 * tempF) +\n      (10.14333127 * rel_humidity) -\n      (0.22475541 * tempF * rel_humidity) -\n      (0.00683783 * tempF * tempF) -\n      (0.05481717 * rel_humidity * rel_humidity) +\n      (0.00122874 * tempF * tempF * rel_humidity) +\n      (0.00085282 * tempF * rel_humidity * rel_humidity) -\n      (0.00000199 * tempF * tempF * rel_humidity * rel_humidity)\n    );\n\n  // Find the appropriate category for the calculated heat index\n  const category = heatIndexCategories.find((c) => heatIndexF < c.threshold);\n\n  // Return an object with the heat index and the category name\n  const formattedHeatIndex = getFormattedTemperature({\n    rawTemp: heatIndexF,\n    currentUnit: TemperatureUnits.fahrenheit,\n    returnUnit: returnUnit\n  });\n  if (formattedHeatIndex && isNaN(formattedHeatIndex) && category?.name) {\n    return `Heat index: ${formattedHeatIndex} - ${category?.name}`;\n  }\n  else return null;\n}\n\n","import AQIdatabase from \"./AirQualityIndexHelper\";\n\n// Helper function to categorize AQI\nfunction linearPieceWise(aqiHigh, aqiLow, concenHigh, concenLow, val) {\n  return parseInt(\n    ((aqiHigh - aqiLow) / (concenHigh - concenLow)) * (val - concenLow) + aqiLow\n  );\n}\n// Returns AQI number value\nfunction convertToAQI(val) {\n  if (val == null)\n    return {\n      aqi: null,\n      aqi_category_index: null\n    };\n\n  for (let i = 0; i < AQIdatabase.length; i++) {\n    const category = AQIdatabase[i];\n    if (val >= category.rawPM2_5.low && val <= category.rawPM2_5.high) {\n      return {\n        aqi: linearPieceWise(category.aqiUS.high, category.aqiUS.low, category.rawPM2_5.high, category.rawPM2_5.low, val),\n        aqi_category_index: category.id\n      }\n    }\n  };\n}\n\nexport default convertToAQI;","import CustomThemes from '../Themes/CustomThemes';\n\nconst AQIdatabase = [\n  {\n    id: 0,\n    category: 'Good',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[0],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[0],\n    aqiUS: {\n      low: 0,\n      high: 50\n    },\n    rawPM2_5: {\n      low: 0.0,\n      high: 12.0\n    },\n    description: 'Air quality is satisfactory, and air pollution poses little or no risk',\n    healthSuggestions: {\n      outdoors: 'Enjoy outdoor activities, the air is great!',\n      indoors_generic: 'Enjoy clean indoor air',\n      indoors_dining_hall: 'Enjoy clean dining hall air',\n      indoors_gym: 'Enjoy clean air for physical activities indoors',\n      indoors_vulnerable: 'Enjoy clean indoor air'\n    }\n  },\n  {\n    id: 1,\n    category: 'Moderate',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[1],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[1],\n    aqiUS: {\n      low: 51,\n      high: 100\n    },\n    rawPM2_5: {\n      low: 12.1,\n      high: 35.4\n    },\n    description: 'Air quality is acceptable. However, there may be a risk for some people, particularly those who are unusually sensitive to air pollution',\n    healthSuggestions: {\n      outdoors: 'Children and individuals with respiratory issues might need to reduce prolonged outdoor exertion',\n      indoors_generic: 'Indoor air is acceptable, but not great',\n      indoors_dining_hall: 'Indoor air is acceptable, but not great<br>Avoid Grill area',\n      indoors_gym: 'Indoor air is acceptable, but not great',\n      indoors_vulnerable: 'Indoor air is acceptable, but not great'\n    }\n  },\n  {\n    id: 2,\n    category: 'Unhealthy for Sensitive Groups',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[2],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[2],\n    aqiUS: {\n      low: 101,\n      high: 150\n    },\n    rawPM2_5: {\n      low: 35.5,\n      high: 55.4\n    },\n    description: 'Members of sensitive groups may experience health effects. The general public is less likely to be affected',\n    healthSuggestions: {\n      outdoors: 'Children and individuals with respiratory issues should limit outdoor exertion',\n      indoors_generic: '',\n      indoors_dining_hall: 'Consider take-aways<br>Avoid Grill area',\n      indoors_gym: 'Individuals with respiratory issues should lower the intensity of indoor exercises',\n      indoors_vulnerable: 'Monitor closely individuals with respiratory issues for any symptom'\n    }\n  },\n  {\n    id: 3,\n    category: 'Unhealthy',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[3],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[3],\n    aqiUS: {\n      low: 151,\n      high: 200\n    },\n    rawPM2_5: {\n      low: 55.5,\n      high: 150.4\n    },\n    description: 'Some members of the general public may experience health effects; members of sensitive groups may experience more serious health effects',\n    healthSuggestions: {\n      outdoors: 'Everyone should limit outdoor activities<br>Wear masks when going outside',\n      indoors_generic: '',\n      indoors_dining_hall:\n        'Consider take-aways<br>Avoid Grill area<br>Come back at off-peak hours',\n      indoors_gym: 'Everyone should lower the intensity of indoor exercises',\n      indoors_vulnerable: 'Monitor closely individuals with respiratory issues for any symptom'\n    }\n  },\n  {\n    id: 4,\n    category: 'Very Unhealthy',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[4],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[4],\n    aqiUS: {\n      low: 201,\n      high: 300\n    },\n    rawPM2_5: {\n      low: 150.5,\n      high: 250.4\n    },\n    description: 'Health alert: The risk of health effects is increased for everyone',\n    healthSuggestions: {\n      outdoors: 'Avoid outdoor activities at all cost<br>Wear N95 masks when going outside',\n      indoors_generic: '',\n      indoors_dining_hall:\n        'Consider take-aways<br>Avoid Grill area<br>Come back at off-peak hours',\n      indoors_gym: 'Indoor air quality is not suitable for any physical activities',\n      indoors_vulnerable: 'Monitor closely individuals with respiratory issues for any symptom'\n    }\n  },\n  {\n    id: 5,\n    category: 'Hazardous',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[5],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[5],\n    aqiUS: {\n      low: 300,\n      high: 500\n    },\n    rawPM2_5: {\n      low: 250.5,\n      high: 550.5\n    },\n    description: 'Health warning of emergency conditions: everyone is more likely to be affected',\n    healthSuggestions: {\n      outdoors: 'Avoid outdoor activities at all cost<br>Wear N95 masks when going outside',\n      indoors_generic: '',\n      indoors_dining_hall:\n        'Consider take-aways<br>Avoid Grill area<br>Come back at off-peak hours',\n      indoors_gym: 'Indoor air quality is not suitable for any physical activities',\n      indoors_vulnerable: ''\n    }\n  },\n];\n\nexport default AQIdatabase;\n"],"names":["props","width","height","xAxis","yAxis","data","useState","graphContainer","useRef","layerBackground","layerTexts","layerXaxisWrapper","layerLines","maxAQItoDisplay","margin","lineGenerator","d3","x","d","timestamp","y","aqi","curve","useEffect","current","clientWidth","clientHeight","selectAll","remove","attr","Object","entries","forEach","sensorData","historical","Date","convertToAQI","Array","isArray","max","Math","ceil","AQIdatabase","category","aqiUS","low","high","xAxisMax","xAxisMin","setHours","getHours","domain","rangeRound","range","font_size","floor","marginText","i","aqiRange","append","lightThemeColor","text","formatHour","call","tickSize","ticks","tickFormat","select","datum","sensor","location_type","mostRecentData","length","aqiObject","aqi_category_index","markerWrapper","sensor_status","SensorStatus","CustomThemes","dotRadius","capitalizeFirstCharacter","location_short","Box","sx","animation","transform","opacity","filter","id","ref","isLayoutReversed","setIsLayoutReversed","TemperatureUnits","temperatureUnit","setTemperatureUnit","setData","returnIsLayoutReversed","getMonth","intervalId","setInterval","clearInterval","link","document","createElement","href","rel","head","appendChild","removeChild","URL","location","searchParams","value","key","apiUrl","match","window","fetchScreenData","fetchDataFromURL","then","map","now","currentTimestamp","lastSeenInHours","round","calculateSensorStatus","aqiCategory","color","healthSuggestion","parse","healthSuggestions","catch","error","console","log","AirQualityComparison","values","every","outdoorsAQI","indoorsAQI","comparison","ratio","parseFloat","toFixed","ListItem","ListItemText","primary","Typography","component","Grid","container","alignContent","alignItems","overflow","background","verticalAlign","fontWeight","fontFamily","item","xs","py","px","order","Stack","direction","justifyContent","textAlign","variant","className","keys","location_long","lineHeight","mt","Thermostat","getFormattedTemperature","rawTemp","temperature","currentUnit","returnUnit","WaterDrop","rel_humidity","includes","calculateHeatIndex","Error","mr","returnSensorStatus","List","listStyleType","fontSize","display","ml","p","pr","position","top","right","left","m","CITIESlogoLinkToHome","pt","size","style","maxWidth","removeLastDirectoryFromURL","viewBox","getFormattedElapsedTimeFromNow","dateString","inputDate","timeDifference","seconds","minutes","hours","days","active","temporaryOffline","offline","SensorStatusCriteria","name","cutoffInHours","Infinity","currentDataForSensor","lastSeen","inputString","charAt","toUpperCase","slice","url","urlComponents","split","pop","join","celsius","fahrenheit","convertTemperature","temp","toUnit","heatIndexCategories","threshold","heatIndexF","tempF","find","c","formattedHeatIndex","isNaN","linearPieceWise","aqiHigh","aqiLow","concenHigh","concenLow","val","parseInt","rawPM2_5","darkThemeColor","description","outdoors","indoors_generic","indoors_dining_hall","indoors_gym","indoors_vulnerable"],"sourceRoot":""}