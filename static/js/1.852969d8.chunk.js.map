{"version":3,"file":"static/js/1.852969d8.chunk.js","mappings":"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","sources":["Components/AirQuality/AirQualityIndexLegendQuickGlance.jsx","Components/DatasetDownload/DatasetDownloadDialog.jsx","Components/AirQuality/AirQualityScreen/ScreenDialog.jsx","Components/SchoolSelector.jsx","Components/LoadMoreChartsButton.jsx","Pages/Project.jsx","Pages/Dashboard.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { isMobile } from 'react-device-detect';\n\nimport { Fab, Fade, Popper, Paper, Typography, Stack } from '@mui/material';\nimport AirIcon from '@mui/icons-material/Air';\nimport { FadeInButtonForSpeedDial } from '../SpeedDial/FadeInButtonForSpeedDial';\n\nimport * as Tracking from '../../Utils/Tracking';\nimport AirQualityIndexTable from './AirQualityIndexTable';\n\nexport default function AirQualityIndexLegendQuickGlance(props) {\n  // Mechanism for opening and closing the Quick Glance on hover\n  const [anchorEl, setAnchorEl] = useState(null);\n  const handlePopperOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n    Tracking.sendEventAnalytics(Tracking.Events.airQualityIndexLegendQuickGlance);\n  };\n  const handlePopperClose = () => {\n    setAnchorEl(null);\n  };\n  const open = Boolean(anchorEl);\n\n  return (\n    <>\n      <FadeInButtonForSpeedDial {...props} distanceFromBottomOfWindow=\"5.5rem\">\n        <Fab\n          sx={{ mt: 1 }}\n          aria-owns={open ? Tracking.Events.airQualityIndexLegendQuickGlance : undefined}\n          aria-haspopup=\"true\"\n          onMouseEnter={handlePopperOpen}\n          onMouseLeave={handlePopperClose}\n          onClick={(event) => isMobile && (open ? handlePopperClose() : handlePopperOpen(event))}\n          aria-label={Tracking.Events.airQualityIndexLegendQuickGlance}\n          color=\"primary\"\n        >\n          <Stack direction=\"column\" alignItems=\"center\">\n            <AirIcon fontSize=\"1rem\" />\n            <Typography variant=\"body2\" fontWeight=\"500\">\n              AQI\n            </Typography>\n          </Stack>\n        </Fab>\n      </FadeInButtonForSpeedDial>\n\n      <Popper\n        id={Tracking.Events.airQualityIndexLegendQuickGlance}\n        sx={{\n          pointerEvents: 'none',\n          mt: -1\n        }}\n        open={open}\n        anchorEl={anchorEl}\n        placement=\"top-end\"\n        onClose={handlePopperClose}\n        keepMounted\n        disableRestoreFocus\n        transition\n      >\n        {({ TransitionProps }) => (\n          <Fade {...TransitionProps} timeout={350}>\n            <Paper elevation={8} sx={{ py: 0.5, mb: 1 }}>\n              <Typography sx={{ mx: 2, mt: 1 }} color=\"text.disabled\" variant=\"body1\" fontWeight={500}>\n                AQI at quick glance\n              </Typography>\n              <AirQualityIndexTable isTiny hideAQIDescription />\n            </Paper>\n          </Fade>\n        )}\n\n      </Popper>\n    </>\n  );\n}\n","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useContext } from 'react';\nimport { Box, Link, Typography, Stack, Select, FormControl, MenuItem, Grid, Chip, Dialog, Button, DialogActions, DialogContent, useMediaQuery, Table, TableBody, TableCell, TableHead, TableRow } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\nimport DownloadIcon from '@mui/icons-material/Download';\nimport DataObjectIcon from '@mui/icons-material/DataObject';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\n\nimport * as Tracking from '../../Utils/Tracking';\nimport { fetchDataFromURL } from './DatasetFetcher';\nimport { RawDatasetType, getRawDatasetUrl } from '../../Utils/ApiUtils';\nimport LoadingAnimation from '../LoadingAnimation';\n\nimport { DashboardContext } from '../../ContextProviders/DashboardContext';\n\nexport default function DatasetDownloadDialog(props) {\n  const { currentSchoolID, current } = useContext(DashboardContext);\n\n  const [sensorsDatasets, updateSensorsDatasets] = useState({});\n\n  const [previewingDataset, setPreviewingDataset] = useState(\"placeholder\");\n\n  // Construct the structure of sensorsDatasets based on current data\n  useEffect(() => {\n    if (!current) return;\n\n    const sensorsDatasets = current\n      .filter(item => item && item.sensor)  // Filter out null or undefined items and sensors\n      .reduce((acc, item) => {\n        // Use location_short as the key for each sensor\n        const key = item.sensor.location_short;\n        acc[key] = {\n          location_type: item.sensor.location_type,\n          location_short: item.sensor.location_short,\n          location_long: item.sensor.location_long,\n          last_seen: item.sensor.last_seen.split('T')[0],\n          rawDatasets: Object.keys(RawDatasetType).reduce((datasetAcc, datasetKey) => {\n            datasetAcc[RawDatasetType[datasetKey]] = {\n              sample: null,\n              full: null\n            };\n            return datasetAcc;\n          }, {})\n        };\n        return acc;\n      }, {});\n\n    updateSensorsDatasets(sensorsDatasets);\n  }, [current]);\n\n  const theme = useTheme();\n  const smallScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => {\n    setPreviewingDataset(null);\n    setOpen(true);\n  }\n  const handleClose = () => {\n    setOpen(false);\n  }\n\n  return (\n    <>\n      <Button\n        onClick={() => {\n          handleOpen();\n          Tracking.sendEventAnalytics(Tracking.Events.rawDatasetButtonClicked);\n        }}\n        variant=\"contained\"\n      >\n        <DataObjectIcon sx={{ fontSize: '1rem' }} />&nbsp;Raw Dataset\n      </Button>\n\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        maxWidth=\"lg\"\n        fullWidth\n        fullScreen={smallScreen}\n        keepMounted\n        zIndex={10000}\n      >\n        {(\n          smallScreen &&\n          <DialogActions sx={{ justifyContent: \"start\" }}>\n            <Button autoFocus onClick={handleClose}>\n              <ChevronLeftIcon sx={{ fontSize: '1rem' }} />Back\n            </Button>\n          </DialogActions>\n        )}\n\n        <DialogContent sx={{\n          px: smallScreen ? 2 : 3,\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'start'\n        }}>\n          <Chip label={currentSchoolID ? `School: ${currentSchoolID.toUpperCase()}` : \"No School\"} size=\"small\" sx={{ mb: 1 }} />\n          <Typography variant=\"h6\" zIndex=\"10000\" sx={{ mb: 1 }}>\n            Preview and download raw dataset(s)\n          </Typography>\n\n          <DatasetSelectorAndPreviewer\n            sensorsDatasets={sensorsDatasets}\n            updateSensorsDatasets={updateSensorsDatasets}\n            previewingDataset={previewingDataset}\n            setPreviewingDataset={setPreviewingDataset}\n            smallScreen={smallScreen}\n            schoolID={currentSchoolID}\n          />\n          {\n            sensorsDatasets &&\n            <Typography variant=\"caption\" sx={{ my: 3, fontStyle: 'italic' }} >\n              These datasets are provided by CITIESair from sensors operated by CITIESair. Should you intend to utilize them for your project, research, or publication, we kindly request that you notify us at <Link href='mailto:nyuad.cities@nyu.edu'>nyuad.cities@nyu.edu</Link> to discuss citation requirements.\n            </Typography>\n          }\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\nconst DatasetSelectorAndPreviewer = (props) => {\n  const { sensorsDatasets, updateSensorsDatasets, previewingDataset, setPreviewingDataset, smallScreen, schoolID } = props;\n\n  // Preview the hourly type of the first sensor initially\n  useEffect(() => {\n    if (Object.keys(sensorsDatasets).length > 0 && !previewingDataset) {\n      const firstSensor = Object.keys(sensorsDatasets)[0];\n      const initialDatasetType = RawDatasetType.hourly;\n\n      setPreviewingDataset({\n        sensor: firstSensor,\n        datasetType: initialDatasetType\n      });\n\n      // If this dataset has been fetched before, early return\n      if (sensorsDatasets[firstSensor].rawDatasets[initialDatasetType].sample) return;\n\n      const url = getRawDatasetUrl({\n        school_id: schoolID,\n        sensor_location_short: firstSensor,\n        datasetType: initialDatasetType,\n        isSample: true\n      });\n\n      fetchDataFromURL({ url, extension: 'csv', needsAuthorization: true })\n        .then((data) => {\n          const tmp = { ...sensorsDatasets };\n          tmp[firstSensor].rawDatasets[initialDatasetType].sample = data;\n          updateSensorsDatasets(tmp);\n        })\n        .catch((error) => console.log(error));\n    }\n  }, [sensorsDatasets, previewingDataset]);\n\n  return (\n    <Grid container justifyContent=\"center\" alignItems=\"start\" spacing={smallScreen ? 1 : 2} sx={{ mt: 0 }} overflow=\"scroll\">\n      <Grid item sm={12} md={6}>\n        <DatasetsTable\n          schoolID={schoolID}\n          sensorsDatasets={sensorsDatasets}\n          updateSensorsDatasets={updateSensorsDatasets}\n          smallScreen={smallScreen}\n          previewingDataset={previewingDataset}\n          setPreviewingDataset={setPreviewingDataset}\n        />\n      </Grid>\n      <Grid item sm={12} md={6} maxWidth={smallScreen ? '100%' : 'unset'} sx={{ mt: 1 }}>\n        <PreviewDataset\n          sensorsDatasets={sensorsDatasets}\n          updateSensorsDatasets={updateSensorsDatasets}\n          previewingDataset={previewingDataset}\n          schoolID={schoolID}\n          smallScreen={smallScreen}\n        />\n      </Grid>\n    </Grid>\n  )\n};\n\nconst DatasetsTable = (props) => {\n  const { schoolID, sensorsDatasets, smallScreen, previewingDataset, setPreviewingDataset, updateSensorsDatasets } = props;\n  return (\n    <Table\n      size=\"small\"\n      sx={{\n        tableLayout: 'fixed',\n        '& td, div, .MuiMenuItem-root': {\n          fontSize: smallScreen ? '0.625rem' : '0.8rem'\n        }\n      }}\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell sx={{ pl: 1 }}>\n            Sensor Location\n          </TableCell>\n          <TableCell sx={{ width: smallScreen ? '9.5rem' : '11rem' }}>\n            Dataset Type\n          </TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {sensorsDatasets && Object.keys(sensorsDatasets).map((location_short) => (\n          <Dataset\n            schoolID={schoolID}\n            smallScreen={smallScreen}\n            sensor={location_short}\n            sensorsDatasets={sensorsDatasets}\n            previewingDataset={previewingDataset}\n            setPreviewingDataset={setPreviewingDataset}\n            isPreviewing={location_short === previewingDataset?.sensor}\n            updateSensorsDatasets={updateSensorsDatasets}\n          />\n        ))}\n      </TableBody>\n    </Table>\n  )\n}\n\nconst Dataset = (props) => {\n  const { schoolID, sensorsDatasets, sensor, previewingDataset, setPreviewingDataset, isPreviewing, updateSensorsDatasets } = props;\n\n  const [selectedDatasetType, setSelectedDatasetType] = useState(RawDatasetType.hourly);\n\n  useEffect(() => {\n    if (selectedDatasetType !== RawDatasetType.hourly) setSelectedDatasetType(RawDatasetType.hourly);\n  }, [schoolID])\n\n  const handleDatasetTypeChange = (event) => {\n    const selectedVal = event.target.value;\n    setSelectedDatasetType(selectedVal);\n    setPreviewingDataset({ datasetType: selectedVal, sensor });\n    fetchThisDataset(selectedVal);\n  };\n\n  const fetchThisDataset = (datasetType) => {\n    // If this dataset version hasn't been fetched yet,\n    // fetch it and append it into the object fetchedDatasets\n    if (!sensorsDatasets[sensor].rawDatasets[datasetType].sample) {\n      const url = getRawDatasetUrl({\n        school_id: schoolID,\n        sensor_location_short: sensorsDatasets[sensor].location_short,\n        datasetType: datasetType,\n        isSample: true\n      });\n\n      fetchDataFromURL({ url, extension: 'csv', needsAuthorization: true })\n        .then((data) => {\n          const tmp = { ...sensorsDatasets };\n          tmp[sensor].rawDatasets[datasetType].sample = data;\n          updateSensorsDatasets(tmp);\n        });\n    }\n  }\n\n  const setThisSensorToPreview = () => {\n    if (previewingDataset?.sensor !== sensor) {\n      setPreviewingDataset({\n        datasetType: selectedDatasetType,\n        sensor: sensor\n      });\n      fetchThisDataset(selectedDatasetType);\n    }\n  }\n\n  const theme = useTheme();\n\n  return (\n    <>\n      <TableRow key={sensor}>\n        <TableCell\n          sx={{\n            pl: 1,\n            cursor: 'pointer',\n            background: isPreviewing && theme.palette.background.NYUpurpleLight\n          }}\n          onClick={setThisSensorToPreview}>\n          {sensorsDatasets[sensor].location_long}\n        </TableCell>\n\n        <TableCell\n          sx={{\n            position: 'relative',\n            background: isPreviewing && theme.palette.background.NYUpurpleLight\n          }}>\n          <FormControl size=\"small\">\n            <Select\n              value={selectedDatasetType}\n              onChange={handleDatasetTypeChange}\n              variant=\"standard\"\n              MenuProps={{ disablePortal: true }}\n            >\n              {Object.keys(sensorsDatasets[sensor].rawDatasets).reverse().map((datasetType, index) => (\n                <MenuItem\n                  key={index}\n                  value={datasetType}\n                >\n                  <Stack direction=\"row\" alignItems=\"center\">\n                    {datasetType.charAt(0).toUpperCase() + datasetType.slice(1).toLowerCase()}\n                  </Stack>\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </TableCell>\n      </TableRow >\n    </>\n  )\n}\n\nconst PreviewDataset = (props) => {\n  const { sensorsDatasets, updateSensorsDatasets, previewingDataset, schoolID, smallScreen } = props;\n  const theme = useTheme();\n\n  const [previewingDatasetName, setPreviewingDatasetName] = useState(\"Not previewing any dataset\");\n  const [csvFileName, setCsvFileName] = useState(\"No dataset\");\n  const [isDatasetLoading, setIsDatasetLoading] = useState(false);\n\n  const downloadPreviewingDataset = () => {\n    if (!previewingDataset) return;\n\n    const fetchedDataset = sensorsDatasets[previewingDataset.sensor].rawDatasets[previewingDataset.datasetType].full;\n\n    // Fetch the full dataset if it has not been fetched before\n    if (!fetchedDataset) {\n      const url = getRawDatasetUrl({\n        school_id: schoolID,\n        sensor_location_short: previewingDataset.sensor,\n        datasetType: previewingDataset.datasetType,\n        isSample: false\n      });\n\n      fetchDataFromURL({ url, extension: 'csv', needsAuthorization: true }).then((data) => {\n        const tmp = { ...sensorsDatasets };\n        tmp[previewingDataset.sensor].rawDatasets[previewingDataset.datasetType].full = data;\n        updateSensorsDatasets(tmp);\n\n        convertCSVforDownload(data);\n      });\n    }\n    else {\n      convertCSVforDownload(fetchedDataset);\n    }\n\n  };\n\n  const convertCSVforDownload = (dataset) => {\n    const blob = new Blob([dataset], { type: 'application/octet-stream' }); // create a Blob with the raw data\n    const url = URL.createObjectURL(blob); // create a download link for the Blob\n    const downloadLink = document.createElement('a');\n    downloadLink.href = url;\n    downloadLink.download = csvFileName;\n    document.body.appendChild(downloadLink);\n    downloadLink.click(); // simulate a click on the download link\n    URL.revokeObjectURL(url); // clean up by revoking the object URL\n    document.body.removeChild(downloadLink);\n  }\n\n  const [formattedData, setFormattedData] = useState('');\n  const [rowNumber, setRowNumber] = useState('');\n\n  useEffect(() => {\n    // If no dataset is chosen to be previewed, early return\n    if (!previewingDataset) return;\n\n    // Update previewing dataset name regardless if the dataset preview has finished loading\n    setPreviewingDatasetName(`Previewing: ${previewingDataset.sensor} (${previewingDataset.datasetType})`);\n\n    // Get the raw dataset\n    const csvData = sensorsDatasets[previewingDataset.sensor]?.rawDatasets[previewingDataset.datasetType]?.sample;\n\n    // If it is empty, then it hasn't been loaded yet\n    if (!csvData) {\n      setRowNumber(null);\n      setFormattedData(null);\n      setCsvFileName(\"Loading...\");\n      setIsDatasetLoading(true);\n      return;\n    };\n\n    if (isDatasetLoading) setIsDatasetLoading(false);\n\n    const lines = csvData.split('\\n');\n\n    const headers = lines[0].split(',');\n    const rows = lines.slice(1);\n\n    setRowNumber([\n      \"\",\n      ...rows.map(row => row.split(',')[0])\n    ].join('\\n'));\n\n    setFormattedData([\n      headers.slice(1).join(','), // Keep the headers for the rest of the columns\n      ...rows.map(row => row.split(',').slice(1).join(',')) // Remove the first column from each row\n    ].join('\\n'));\n\n    // Get the second column of the last row and extract the date part to set the csv's file name\n    let dateString;\n    if (rows.length > 0) {\n      const lastRow = rows[rows.length - 1];\n      const columns = lastRow.split(',');\n      if (columns.length >= 2) {\n        const dateTimeString = columns[1]; // Get the second column\n        dateString = dateTimeString.split('T')[0]; // Extract the date part\n      }\n    }\n\n    const csvFileName = `${schoolID}-${previewingDataset.sensor}-${previewingDataset.datasetType}-${dateString}.csv`;\n    setCsvFileName(csvFileName);\n  }, [previewingDataset, sensorsDatasets]);\n\n  return (\n    <Stack spacing={1}>\n      <Box sx={{ '& *': { fontFamily: \"monospace !important\" } }}>\n        <Stack direction=\"row\">\n          <Typography variant='body2' gutterBottom fontWeight={500}>\n            {previewingDatasetName}\n          </Typography>\n        </Stack>\n\n        <Box\n          component=\"pre\"\n          sx={{\n            overflowX: 'auto',\n            color: theme.palette.text.secondary,\n            backgroundColor: theme.palette.customBackground,\n            p: 2,\n            pt: 1.5,\n            borderRadius: theme.shape.borderRadius,\n            borderTopLeftRadius: 0,\n            height: smallScreen ? '11.8rem' : '14rem',\n            width: smallScreen ? '100%' : 'unset',\n            marginTop: 0\n          }}\n        >\n          <Stack\n            direction=\"row\"\n            sx={{ fontSize: smallScreen ? '0.625rem !important' : '0.8rem !important' }}\n          >\n            {\n              formattedData ?\n                <>\n                  <Box sx={{ mr: 2, userSelect: 'none' }}>\n                    {rowNumber}\n                  </Box>\n                  <Box>\n                    {formattedData}\n                  </Box>\n                </>\n                :\n                <LoadingAnimation optionalText=\"Loading\" />\n            }\n          </Stack>\n        </Box>\n      </Box>\n      <Box textAlign=\"center\" >\n        <Button\n          variant=\"contained\"\n          sx={{\n            textTransform: 'none',\n            textAlign: 'left',\n            lineHeight: 1.1,\n            px: 1.5,\n            py: 1\n          }}\n          onClick={() => {\n            downloadPreviewingDataset();\n            Tracking.sendEventAnalytics(Tracking.Events.rawDatasetDownloaded, {\n              dataset_type: previewingDataset?.datasetType,\n              sensor: previewingDataset?.sensor\n            });\n          }}\n          disabled={isDatasetLoading}\n        >\n          <DownloadIcon sx={{ fontSize: '1.25rem', mr: 0.5 }} />\n          {csvFileName}\n        </Button>\n      </Box>\n    </Stack >\n  )\n}","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useContext } from \"react\";\nimport { Button, Menu } from \"@mui/material\";\nimport { Link } from 'react-router-dom';\nimport TvIcon from '@mui/icons-material/Tv';\nimport MenuItemAsNavLink from \"../../Header/MenuItemAsNavLink\";\nimport NavLinkBehavior from \"../../Header/NavLinkBehavior\";\nimport { DashboardContext } from \"../../../ContextProviders/DashboardContext\";\n\nconst ScreenDialog = () => {\n  const { currentSchoolID, schoolMetadata } = useContext(DashboardContext);\n\n  if (!schoolMetadata) return;\n  const screens = schoolMetadata.screens;\n\n  if (!Array.isArray(screens)) return null;\n\n  // If there is only 1 screen, display a button linked to that screen\n  if (screens.length <= 1) {\n    return (\n      <Button\n        variant=\"contained\"\n        component={Link}\n        to={`/screen/${currentSchoolID}`}\n      >\n        <TvIcon sx={{ fontSize: '1rem' }} />&nbsp;TV Screen\n      </Button>\n    )\n  }\n  // If there are more than 1 screens to choose from, display a popup dropdown menu\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n      <Button\n        id=\"basic-button\"\n        aria-controls={open ? 'tv-screen-list-menu' : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={open ? 'true' : undefined}\n        onClick={handleClick}\n        variant=\"contained\"\n      >\n        <TvIcon sx={{ fontSize: '1rem' }} />\n        &nbsp;\n        TV Screens List\n      </Button>\n      <Menu\n        id=\"tv-screen-list-menu\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        MenuListProps={{\n          'aria-labelledby': 'basic-button',\n        }}\n      >\n        {\n          screens.map((screen, index) => (\n            <MenuItemAsNavLink\n              key={index}\n              behavior={NavLinkBehavior.toNewPage}\n              to={`/screen/${currentSchoolID}/${screen.screen_name}`}\n              label={screen.location_long}\n              sx={{ fontSize: '0.8rem' }}\n            />\n          ))}\n      </Menu>\n    </>\n  );\n};\n\nexport default ScreenDialog;","// disable eslint for this file\n/* eslint-disable */\n\nimport { useContext, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { Box, Menu, MenuItem, MenuList } from \"@mui/material\";\nimport { CustomChip } from \"../Pages/Project\";\n\nimport PlaceIcon from '@mui/icons-material/Place';\nimport { LocalStorage } from \"../Utils/LocalStorage\";\nimport { UniqueRoutes } from \"../Utils/RoutesUtils\";\n\nimport * as Tracking from '../Utils/Tracking';\n\nimport { DashboardContext } from \"../ContextProviders/DashboardContext\";\nimport { UserContext } from \"../ContextProviders/UserContext\";\n\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport ArrowDropUpIcon from '@mui/icons-material/ArrowDropUp';\n\nconst SchoolSelector = () => {\n  const { currentSchoolID, schoolMetadata } = useContext(DashboardContext);\n  const { user } = useContext(UserContext);\n\n  // If there is only one school, return a Chip displaying the name of that school\n  if (!Array.isArray(user.allowedSchools) || user.allowedSchools.length <= 1)\n    return (\n      <CustomChip\n        icon={<PlaceIcon />}\n        label={schoolMetadata?.name || \"N/A\"}\n        tooltipTitle={\"School\"}\n      />\n    );\n\n  // Else, display a drop down menu that allows choosing between different schools\n  const [schoolID, setSchoolID] = useState('');\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const navigate = useNavigate();\n\n  const handleItemSelect = (schoolID) => () => {\n    if (currentSchoolID !== schoolID) {\n      localStorage.setItem(LocalStorage.schoolID, schoolID)\n      setSchoolID(schoolID);\n\n      Tracking.sendEventAnalytics(Tracking.Events.internalNavigation,\n        {\n          origin_school: currentSchoolID,\n          destination_school_id: schoolID,\n          origin_id: 'school_selector'\n        });\n\n      navigate(`${UniqueRoutes.dashboard}/${schoolID}`)\n    }\n    handleClose();\n  };\n\n  const returnChipLabel = () => {\n    return (\n      <Box sx={{\n        '& svg': {\n          fontSize: \"1rem\", verticalAlign: \"sub\", marginLeft: \"0.25rem\"\n        }\n      }\n      }>\n        {schoolMetadata?.name || \"N/A\"}\n        {Boolean(anchorEl) ? (\n          <ArrowDropUpIcon />\n        ) : (\n          <ArrowDropDownIcon />\n        )}\n      </Box>\n    );\n  };\n\n  return (\n    <>\n      <CustomChip\n        icon={<PlaceIcon />}\n        label={returnChipLabel()}\n        tooltipTitle={\"Click to Select School\"}\n        clickable\n        onClick={handleClick}\n        aria-controls={open ? 'basic-menu' : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={open ? 'true' : undefined}\n      />\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n        MenuListProps={{\n          'aria-labelledby': 'basic-button',\n        }}\n      >\n        <MenuList dense>\n          {user.allowedSchools.map((school, index) => (\n            <MenuItem\n              key={index}\n              onClick={handleItemSelect(school.school_id)}\n            >\n              {school.name}\n            </MenuItem>\n          ))}\n        </MenuList>\n      </Menu>\n    </>\n  );\n};\n\nexport default SchoolSelector;","import { Button, Stack } from \"@mui/material\";\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport { useContext } from \"react\";\nimport { DashboardContext } from \"../ContextProviders/DashboardContext\";\n\nconst LoadMoreChartsButton = () => {\n  const { setLoadMoreCharts } = useContext(DashboardContext);\n\n  return (\n    <Stack sx={{ mt: 6, mx: 'auto', maxWidth: 'sm' }}>\n      <Button\n        variant=\"contained\"\n        onClick={() => {\n          setLoadMoreCharts(true);\n        }}\n      >\n        <KeyboardArrowDownIcon sx={{ fontSize: '1rem' }} />&nbsp;Load More Charts\n      </Button>\n    </Stack>\n  )\n}\nexport default LoadMoreChartsButton;","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useContext } from 'react';\nimport { LinkContext } from '../ContextProviders/LinkContext';\nimport parse from 'html-react-parser';\nimport ChartComponentWrapper from '../Graphs/ChartComponentWrapper';\nimport UppercaseTitle from '../Components/UppercaseTitle';\nimport CommentSection, { PAGE_NAME } from '../Components/CommentSection';\nimport { Box, Typography, Container, Divider, Chip, Grid, Tooltip, Stack, Skeleton } from '@mui/material';\n\nimport { useTheme } from '@mui/material/styles';\n\nimport ThemePreferences from '../Themes/ThemePreferences';\n\nimport AirQualityIndexLegendQuickGlance from '../Components/AirQuality/AirQualityIndexLegendQuickGlance';\n\nimport jsonData from '../section_data.json';\n\nimport PersonIcon from '@mui/icons-material/Person';\nimport EmailIcon from '@mui/icons-material/Email';\nimport PublishedWithChangesIcon from '@mui/icons-material/PublishedWithChanges';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport CommentIcon from '@mui/icons-material/Comment';\n\nimport { replacePlainHTMLWithMuiComponents } from '../Utils/Utils';\nimport DatasetDownloadDialog from '../Components/DatasetDownload/DatasetDownloadDialog';\nimport ScreenDialog from '../Components/AirQuality/AirQualityScreen/ScreenDialog';\n\nimport { scrollToSection } from '../Components/Header/MenuItemAsNavLink';\nimport FullWidthBox from '../Components/FullWidthBox';\n\nimport * as Tracking from '../Utils/Tracking';\n\nimport CurrentAQIGrid from '../Components/AirQuality/CurrentAQIGrid';\nimport SchoolSelector from '../Components/SchoolSelector';\n\nimport LoadingAnimation from '../Components/LoadingAnimation';\n\nimport { CommentCountsContext } from '../ContextProviders/CommentCountsContext';\n\nimport NYUADbanner from './Embeds/NYUADbanner';\n\nimport { DashboardContext } from '../ContextProviders/DashboardContext';\nimport { PreferenceContext } from '../ContextProviders/PreferenceContext';\nimport LoadMoreChartsButton from '../Components/LoadMoreChartsButton';\nimport AQIexplanation from '../Components/AirQuality/AQIexplanation';\n\n// Custom Chip component to display metadata\nexport const CustomChip = (props) => {\n  const { tooltipTitle, label, ...otherProps } = props;\n  return (\n    <Tooltip title={tooltipTitle} enterDelay={0} leaveDelay={200}>\n      <Chip\n        size=\"small\"\n        label={label || <Skeleton variant=\"text\" sx={{ minWidth: '5rem' }} />}\n        {...otherProps}\n      />\n    </Tooltip>\n  );\n}\n\nconst Project = () => {\n  let lastUpdate;\n\n  const { setChartsTitlesList } = useContext(LinkContext);\n  const { commentCounts, fetchCommentCounts, setCommentCounts } = useContext(CommentCountsContext);\n  const { schoolMetadata, current, allChartsData, loadMoreCharts } = useContext(DashboardContext);\n  const { themePreference, temperatureUnitPreference } = useContext(PreferenceContext);\n\n  const [displayCommentSection, setDisplayCommentSection] = useState(false);\n  const [displayMapOfSensors, setDisplayMapOfSensors] = useState(false);\n\n  // If NYUAD, display comment section and map of sensors\n  useEffect(() => {\n    if (!schoolMetadata) return;\n\n    const isNYUAD = schoolMetadata.school_id === 'nyuad';\n    setDisplayCommentSection(isNYUAD);\n    setDisplayMapOfSensors(isNYUAD);\n\n    // Fetch comment count for NYUAD\n    if (isNYUAD && !commentCounts) {\n      fetchCommentCounts().then((data) => {\n        setCommentCounts(data);\n      });\n    }\n  }, [schoolMetadata])\n\n  // Update the chart title list for quick navigation\n  useEffect(() => {\n    if (!allChartsData?.charts) return;\n\n    const chartsTitles = allChartsData?.charts.map((element, index) => ({ chartTitle: element.title, chartID: `chart-${index + 1}` }));\n    setChartsTitlesList(chartsTitles);\n  }, [allChartsData]);\n\n  const theme = useTheme();\n\n  const getDashboardTitle = () => {\n    if (schoolMetadata?.school_id) return `Air Quality | ${schoolMetadata?.school_id}`\n  }\n\n  const displayProjectDescription = () => {\n    if (schoolMetadata) return (\n      <Typography\n        component=\"div\"\n        variant=\"body1\"\n        color=\"text.secondary\"\n        sx={{\n          textAlign: 'justify', pb: 2, mb: 0, \"& table *\": {\n            color: `${theme.palette.text.secondary}`\n          }\n        }}\n        gutterBottom\n      >\n        {\n          parse(schoolMetadata.description || '', {\n            replace: replacePlainHTMLWithMuiComponents,\n          })\n        }\n      </Typography>\n    )\n    else {\n      return (\n        Array.from({ length: 3 }).map((_, index) => (\n          <Skeleton key={index} variant='text' />\n        ))\n      )\n    }\n  };\n\n  const displayCharts = () => {\n    // Display if there are at least one chart\n    if (Object.keys(allChartsData).length > 0) {\n      return (\n        <>\n          {Object.keys(allChartsData).map((chartID, index) => (\n            <FullWidthBox\n              key={chartID}\n              backgroundColor={index % 2 !== 0 ? 'customAlternateBackground' : ''}\n            >\n              <Container\n                sx={{ pt: 4, pb: 4 }}\n                height=\"auto\"\n                className={themePreference === ThemePreferences.dark ? 'dark' : ''}\n                id={`chart-${index + 1}`}\n              >\n                <Typography variant=\"h6\" color=\"text.primary\">\n                  {index + 1}. {allChartsData[chartID].title}\n                </Typography>\n\n                <ChartComponentWrapper\n                  generalChartSubtitle={allChartsData[chartID].subtitle}\n                  generalChartReference={allChartsData[chartID].reference}\n                  chartData={{\n                    chartIndex: index,\n                    ...allChartsData[chartID],\n                  }}\n                />\n\n                {\n                  // Optionally display the button to load more charts at the bottom of the last chart\n                  // (if not already fetched every chart)\n                  displayLoadMoreButton(index === Object.keys(allChartsData).length - 1)\n                }\n              </Container>\n            </FullWidthBox>\n          ))}\n\n        </>\n      );\n    } else {\n      // Else display loading animation\n      return <LoadingAnimation optionalText=\"Loading Visualizations\" />;\n    }\n  };\n\n  const displayLoadMoreButton = (isLastChartInList) => {\n    if (isLastChartInList === true && loadMoreCharts === false) {\n      return <LoadMoreChartsButton />;\n    }\n    else {\n      return null;\n    }\n  }\n\n  const GridOfMetadataChips = () => {\n    return (\n      <Grid container spacing={1} sx={{ mt: -3, pb: 3 }}>\n        <Grid item>\n          <SchoolSelector />\n        </Grid>\n\n        <Grid item>\n          <CustomChip\n            icon={<PersonIcon />}\n            label={schoolMetadata?.contactPerson}\n            tooltipTitle=\"Contact Person\"\n          />\n        </Grid>\n\n        <Grid item>\n          <CustomChip\n            icon={<EmailIcon />}\n            label={schoolMetadata?.contactEmail}\n            tooltipTitle=\"Contact Email\"\n            component=\"a\"\n            href={`mailto:${schoolMetadata?.contactEmail}`}\n            clickable\n          />\n        </Grid>\n\n        <Grid item>\n          <CustomChip\n            icon={<BarChartIcon />}\n            label={`${Object.keys(allChartsData).length || \"...\"} Chart${Object.keys(allChartsData).length !== 1 ? 's' : ''}`}\n            tooltipTitle=\"Number of Charts\"\n            onClick={() => {\n              scrollToSection(jsonData.charts.id);\n              Tracking.sendEventAnalytics(Tracking.Events.internalNavigation,\n                {\n                  destination_id: jsonData.charts.id,\n                  destination_label: jsonData.chartData?.toString(),\n                  origin_id: 'chip'\n                });\n            }}\n          />\n        </Grid>\n\n        {\n          lastUpdate &&\n          <Grid item>\n            <CustomChip\n              icon={<PublishedWithChangesIcon />}\n              label={`Last update: ${lastUpdate}`}\n              tooltipTitle=\"Last Update\" />\n          </Grid>\n        }\n\n        {(displayCommentSection === true && commentCounts !== null) &&\n          <Grid item>\n            <CustomChip\n              icon={<CommentIcon />}\n              label={`${commentCounts[PAGE_NAME]} Comment${commentCounts[PAGE_NAME] > 1 ? \"s\" : \"\"}`}\n              tooltipTitle=\"Number of Comments\"\n              onClick={() => {\n                scrollToSection(jsonData.commentSection.id);\n                Tracking.sendEventAnalytics(Tracking.Events.internalNavigation,\n                  {\n                    destination_id: jsonData.commentSection.id,\n                    destination_label: jsonData.commentSection.toString(),\n                    origin_id: 'chip'\n                  })\n              }}\n            />\n          </Grid>}\n      </Grid>\n    )\n  }\n\n  return (\n    <Box width=\"100%\">\n      <AirQualityIndexLegendQuickGlance />\n\n      <FullWidthBox backgroundColor='customAlternateBackground'>\n        <Container sx={{ pt: 5 }}>\n          <UppercaseTitle text={getDashboardTitle()} />\n          <GridOfMetadataChips />\n        </Container>\n      </FullWidthBox>\n      {displayMapOfSensors === true &&\n        (\n          <NYUADbanner\n            initialNyuadCurrentData={current}\n            isOnBannerPage={false}\n            themePreference={themePreference}\n            minMapHeight={\"250px\"}\n          />\n        )\n      }\n      <FullWidthBox backgroundColor='customAlternateBackground'>\n        <Container sx={{ pt: 3, pb: 3 }}>\n          {displayMapOfSensors === false &&\n            (<Box textAlign=\"center\" sx={{ mb: 2 }}>\n              <CurrentAQIGrid\n                currentSensorsData={current}\n                isScreen={false}\n                temperatureUnitPreference={temperatureUnitPreference}\n              />\n            </Box>)\n          }\n\n          {displayProjectDescription()}\n\n          <Stack direction=\"row\" spacing={2}>\n            <ScreenDialog />\n            <DatasetDownloadDialog />\n          </Stack>\n\n          <AQIexplanation />\n\n        </Container>\n      </FullWidthBox>\n\n      <Box id={jsonData.charts.id}>\n        {displayCharts(allChartsData)}\n      </Box>\n      <Divider />\n\n      {displayCommentSection === true &&\n        <FullWidthBox id={jsonData.commentSection.id} sx={{ pt: 3, pb: 4 }}>\n          <CommentSection pageID={PAGE_NAME} />\n        </FullWidthBox>\n      }\n    </Box >\n  );\n};\n\nexport default Project;\n","// disable eslint for this file\n/* eslint-disable */\n\nimport { useEffect, useContext } from \"react\";\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\n\nimport { fetchDataFromURL } from \"../Components/DatasetDownload/DatasetFetcher\";\nimport Project from \"./Project\";\nimport { ChartEndpoints, GeneralEndpoints, fetchAndProcessCurrentSensorsData, getApiUrl, getChartApiUrl, getHistoricalChartApiUrl } from \"../Utils/ApiUtils\";\nimport { LinkContext } from \"../ContextProviders/LinkContext\";\nimport { DashboardContext } from \"../ContextProviders/DashboardContext\";\n\nimport { UserContext } from \"../ContextProviders/UserContext\";\nimport { LocalStorage } from \"../Utils/LocalStorage\";\nimport { UniqueRoutes } from \"../Utils/RoutesUtils\";\n\nconst initialCharts = [\n  ChartEndpoints.historical,\n  ChartEndpoints.dailyAverageAllTime\n];\n\nconst restOfCharts = [\n  ChartEndpoints.percentageByMonth,\n  ChartEndpoints.yearlyAverageByDoW,\n  ChartEndpoints.hourlyAverageByMonth,\n  ChartEndpoints.correlationDailyAverage\n];\n\nconst Dashboard = () => {\n  const { school_id_param } = useParams();\n  const navigate = useNavigate();\n\n  const location = useLocation();\n  const locationPath = location.pathname;\n\n  // Update the page's title based on school_id_param\n  useEffect(() => {\n    if (!school_id_param) return;\n\n    document.title = `CITIESair | ${school_id_param.toUpperCase()}`;\n  }, [school_id_param]);\n\n  // Update current page type\n  const { setCurrentPage } = useContext(LinkContext);\n  useEffect(() => {\n    setCurrentPage(UniqueRoutes.dashboard);\n  }, []);\n\n  const {\n    currentSchoolID, setCurrentSchoolID,\n    schoolMetadata, setSchoolMetadata,\n    current, setCurrent,\n    allChartsData, setIndividualChartData,\n    loadMoreCharts\n  } = useContext(DashboardContext);\n  const { user } = useContext(UserContext);\n\n  useEffect(() => {\n    // NYUAD is public --> skip authentication and just fetch data\n    if (school_id_param === \"nyuad\") {\n      fetchInitialDataForDashboard('nyuad');\n      setCurrentSchoolID('nyuad');\n      return;\n    };\n\n    if (user.checkedAuthentication === true && user.authenticated === false) {\n      navigate(`${UniqueRoutes.login}?${UniqueRoutes.redirectQuery}=${locationPath}`);\n    }\n\n    const allowedSchools = user.allowedSchools;\n\n    if (Array.isArray(allowedSchools) && allowedSchools.length > 0) {\n      // If no school_id_param is given\n      if (!school_id_param) {\n        let school_id;\n\n        // If there has been a previouslySelectedSchoolID, then load dashboard data for this one\n        const previouslySelectedSchoolID = localStorage.getItem(LocalStorage.schoolID);\n        if (allowedSchools.map((school) => school.school_id).includes(previouslySelectedSchoolID)) school_id = previouslySelectedSchoolID;\n        // If not existed yet, then just get the first school in the list\n        else {\n          school_id = allowedSchools[0].school_id;\n          setCurrentSchoolID(school_id);\n          localStorage.setItem(LocalStorage.schoolID, school_id);\n        }\n\n        navigate(school_id, { replace: true }); // navigate to the correct url: /dashboard/:school_id_param\n\n        // If there is no schoolMetadata or current or chartData, then fetch them\n        if (!(!schoolMetadata && !current && !allChartsData)) fetchInitialDataForDashboard(school_id);\n      }\n\n      // If there is school_id_param, check if school_id_param is in the allowedSchools\n      if (allowedSchools.map((school) => school.school_id).includes(school_id_param)) {\n        setCurrentSchoolID(school_id_param);\n        fetchInitialDataForDashboard(school_id_param);\n        localStorage.setItem(LocalStorage.schoolID, school_id_param);\n        return;\n      }\n    }\n  }, [user, school_id_param]);\n\n  const fetchInitialDataForDashboard = async (school_id) => {\n    try {\n      setSchoolMetadata();\n      setCurrent();\n\n      const response = await Promise.all([\n        fetchDataFromURL({\n          url: getApiUrl({\n            endpoint: GeneralEndpoints.schoolmetadata,\n            school_id: school_id\n          }),\n          extension: 'json',\n          needsAuthorization: true\n        }),\n        fetchAndProcessCurrentSensorsData(getApiUrl({\n          endpoint: GeneralEndpoints.current,\n          school_id: school_id\n        }))\n      ])\n\n      setSchoolMetadata(response[0]);\n      setCurrent(response[1]);\n\n    } catch (error) {\n      console.log(error);\n    }\n\n    const chartsToFetch = loadMoreCharts ? initialCharts.concat(restOfCharts) : initialCharts;\n    chartsToFetch.forEach((endpoint) => {\n      fetchDataFromURL({\n        url: getHistoricalChartApiUrl({\n          endpoint: endpoint,\n          school_id: school_id\n        }),\n        extension: 'json',\n        needsAuthorization: true\n      })\n        .then(data => {\n          setIndividualChartData(data);\n        })\n        .catch((error) => {\n          console.log(error);\n        })\n    });\n  }\n\n  useEffect(() => {\n    if (loadMoreCharts === true) {\n      restOfCharts.forEach((endpoint) => {\n        const url = getChartApiUrl({\n          endpoint: endpoint,\n          school_id: currentSchoolID\n        });\n\n        fetchDataFromURL({\n          url: url,\n          extension: 'json',\n          needsAuthorization: true\n        })\n          .then(data => {\n            setIndividualChartData(data);\n          })\n          .catch((error) => {\n            console.log(error);\n          })\n      });\n    }\n\n  }, [loadMoreCharts]);\n\n  return (\n    <>\n      <Project />\n    </>\n  )\n};\n\nexport default Dashboard;"],"names":["AirQualityIndexLegendQuickGlance","props","anchorEl","setAnchorEl","useState","handlePopperOpen","event","currentTarget","Tracking","airQualityIndexLegendQuickGlance","handlePopperClose","open","Boolean","_jsxs","_Fragment","children","_jsx","FadeInButtonForSpeedDial","distanceFromBottomOfWindow","Fab","sx","mt","undefined","onMouseEnter","onMouseLeave","onClick","isMobile","color","Stack","direction","alignItems","AirIcon","fontSize","Typography","variant","fontWeight","Popper","id","pointerEvents","placement","onClose","keepMounted","disableRestoreFocus","transition","_ref","TransitionProps","Fade","timeout","Paper","elevation","py","mb","mx","AirQualityIndexTable","isTiny","hideAQIDescription","DatasetDownloadDialog","currentSchoolID","current","useContext","DashboardContext","sensorsDatasets","updateSensorsDatasets","previewingDataset","setPreviewingDataset","useEffect","filter","item","sensor","reduce","acc","location_short","location_type","location_long","last_seen","split","rawDatasets","Object","keys","RawDatasetType","datasetAcc","datasetKey","sample","full","theme","useTheme","smallScreen","useMediaQuery","breakpoints","down","setOpen","handleClose","Button","rawDatasetButtonClicked","DataObjectIcon","Dialog","maxWidth","fullWidth","fullScreen","zIndex","DialogActions","justifyContent","autoFocus","ChevronLeftIcon","DialogContent","px","display","flexDirection","Chip","label","concat","toUpperCase","size","DatasetSelectorAndPreviewer","schoolID","my","fontStyle","Link","href","length","firstSensor","initialDatasetType","hourly","datasetType","url","getRawDatasetUrl","school_id","sensor_location_short","isSample","fetchDataFromURL","extension","needsAuthorization","then","data","tmp","catch","error","console","log","Grid","container","spacing","overflow","sm","md","DatasetsTable","PreviewDataset","Table","tableLayout","TableHead","TableRow","TableCell","pl","width","TableBody","map","Dataset","isPreviewing","selectedDatasetType","setSelectedDatasetType","fetchThisDataset","cursor","background","palette","NYUpurpleLight","setThisSensorToPreview","position","FormControl","Select","value","onChange","selectedVal","target","MenuProps","disablePortal","reverse","index","MenuItem","charAt","slice","toLowerCase","previewingDatasetName","setPreviewingDatasetName","csvFileName","setCsvFileName","isDatasetLoading","setIsDatasetLoading","convertCSVforDownload","dataset","blob","Blob","type","URL","createObjectURL","downloadLink","document","createElement","download","body","appendChild","click","revokeObjectURL","removeChild","formattedData","setFormattedData","rowNumber","setRowNumber","_sensorsDatasets$prev","_sensorsDatasets$prev2","csvData","lines","headers","rows","dateString","row","join","columns","Box","fontFamily","gutterBottom","component","overflowX","text","secondary","backgroundColor","customBackground","p","pt","borderRadius","shape","borderTopLeftRadius","height","marginTop","mr","userSelect","LoadingAnimation","optionalText","textAlign","textTransform","lineHeight","downloadPreviewingDataset","fetchedDataset","rawDatasetDownloaded","dataset_type","disabled","DownloadIcon","ScreenDialog","schoolMetadata","screens","Array","isArray","to","TvIcon","Menu","MenuListProps","screen","MenuItemAsNavLink","behavior","NavLinkBehavior","toNewPage","screen_name","SchoolSelector","user","UserContext","allowedSchools","CustomChip","icon","PlaceIcon","name","tooltipTitle","setSchoolID","navigate","useNavigate","handleItemSelect","localStorage","setItem","LocalStorage","internalNavigation","origin_school","destination_school_id","origin_id","UniqueRoutes","dashboard","verticalAlign","marginLeft","ArrowDropUpIcon","ArrowDropDownIcon","clickable","MenuList","dense","school","LoadMoreChartsButton","setLoadMoreCharts","KeyboardArrowDownIcon","otherProps","Tooltip","title","enterDelay","leaveDelay","Skeleton","minWidth","Project","lastUpdate","setChartsTitlesList","LinkContext","commentCounts","fetchCommentCounts","setCommentCounts","CommentCountsContext","allChartsData","loadMoreCharts","themePreference","temperatureUnitPreference","PreferenceContext","displayCommentSection","setDisplayCommentSection","displayMapOfSensors","setDisplayMapOfSensors","isNYUAD","charts","chartsTitles","element","chartTitle","chartID","displayLoadMoreButton","isLastChartInList","GridOfMetadataChips","pb","PersonIcon","contactPerson","EmailIcon","contactEmail","BarChartIcon","_jsonData$chartData","scrollToSection","jsonData","destination_id","destination_label","chartData","toString","CommentIcon","PAGE_NAME","FullWidthBox","Container","UppercaseTitle","getDashboardTitle","NYUADbanner","initialNyuadCurrentData","isOnBannerPage","minMapHeight","CurrentAQIGrid","currentSensorsData","isScreen","parse","description","replace","replacePlainHTMLWithMuiComponents","from","_","AQIexplanation","className","ThemePreferences","dark","ChartComponentWrapper","generalChartSubtitle","subtitle","generalChartReference","reference","chartIndex","Divider","CommentSection","pageID","initialCharts","ChartEndpoints","historical","dailyAverageAllTime","restOfCharts","percentageByMonth","yearlyAverageByDoW","hourlyAverageByMonth","correlationDailyAverage","Dashboard","school_id_param","useParams","locationPath","useLocation","pathname","setCurrentPage","setCurrentSchoolID","setSchoolMetadata","setCurrent","setIndividualChartData","fetchInitialDataForDashboard","checkedAuthentication","authenticated","login","redirectQuery","previouslySelectedSchoolID","getItem","includes","async","response","Promise","all","getApiUrl","endpoint","GeneralEndpoints","schoolmetadata","fetchAndProcessCurrentSensorsData","forEach","getHistoricalChartApiUrl","getChartApiUrl"],"sourceRoot":""}