{"version":3,"file":"static/js/442.6f66aa72.chunk.js","mappings":"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","sources":["Components/AirQuality/AirQualityScreen/RecentHistoricalGraph.jsx","Pages/Screen.jsx"],"sourcesContent":["// disable eslint for this file\n/* eslint-disable */\nimport { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\n\nimport convertToAQI from '../../../Utils/AirQuality/AirQualityIndexCalculator';\nimport AQIdatabase from '../../../Utils/AirQuality/AirQualityIndexHelper';\nimport { SensorStatus } from '../SensorStatus';\nimport { Box } from '@mui/material';\n\nimport { capitalizeFirstCharacter, areDOMOverlapped } from './ScreenUtils';\n\nimport CustomThemes from '../../../Themes/CustomThemes';\n\nconst numberOfHoursForHistoricalData = 6;\n\nconst RecentHistoricalGraph = (props) => {\n  const { data } = props;\n\n  const graphContainer = useRef();\n  const layerBackground = useRef();\n  const layerTexts = useRef();\n  const layerXaxisWrapper = useRef();\n  const layerLines = useRef();\n\n  let svg, width, height, xAxis, yAxis;\n  let maxAQItoDisplay = 200;\n  const xTickPeriod = 120; // xAxis ticks every 2 hour\n  const dotRadius = 10;\n  const margin = { top: 30, right: 80, bottom: 0, left: 70 };\n\n  // Set up D3's line generator\n  const lineGenerator = d3\n    .line()\n    .x(function (d) {\n      return xAxis(d.timestamp);\n    }) // set the x values for the line generator\n    .y(function (d) {\n      return yAxis(d.aqi);\n    }) // set the y values for the line generator\n    .curve(d3.curveCardinal.tension(0)); // apply smoothing to the line\n\n  useEffect(() => {\n    if (!data) return;\n    if (!graphContainer.current) return;\n    if (!layerBackground.current) return;\n    if (!layerTexts.current) return;\n    if (!layerXaxisWrapper.current) return;\n    if (!layerLines.current) return;\n\n    svg = d3.select(graphContainer.current);\n    width = graphContainer.current.clientWidth;\n    height = graphContainer.current.clientHeight - margin.top;\n\n    // Clear all previous drawings\n    d3.select(layerBackground.current).selectAll(\"*\").remove();\n    d3.select(layerTexts.current).selectAll(\"*\").remove();\n    d3.select(layerXaxisWrapper.current).selectAll(\"*\").remove();\n    d3.select(layerLines.current).selectAll(\"*\").remove();\n\n    d3.select(layerBackground.current)\n      .attr(\"opacity\", 0.5);\n    d3.select(layerTexts.current)\n      .attr(\"filter\", \"brightness(0.8) contrast(1.2) saturate(1.2)\");\n\n    Object.entries(data).forEach(([key, sensorData]) => {\n      // Create the JS date object and calculate AQI from raw measurements\n      sensorData.historical?.forEach(function (d) {\n        d.timestamp = new Date(d.timestamp);\n        d.aqi = convertToAQI(d[\"pm2.5\"]).aqi;\n      });\n\n      // Calculate the maximum value AQI of this sensor\n      if (sensorData.historical && Array.isArray(sensorData.historical)) {\n        const max = d3.max(sensorData.historical, function (d) {\n          return d.aqi;\n        });\n        if (max > maxAQItoDisplay) maxAQItoDisplay = max;\n      }\n    });\n\n    // Calculate the maximum AQI for the y-axis to display\n    maxAQItoDisplay = Math.ceil(maxAQItoDisplay / 50) * 50; // round to the nearest 50 points\n\n    for (let category of AQIdatabase) {\n      if (maxAQItoDisplay >= category.aqiUS.low && maxAQItoDisplay <= category.aqiUS.high) {\n        maxAQItoDisplay = category.aqiUS.high;\n        break;\n      }\n    };\n\n    // 1. Set up the xAxis domain and range\n    let xAxisMax = new Date();\n    let xAxisMin = new Date();\n    xAxisMin.setHours(xAxisMin.getHours() - numberOfHoursForHistoricalData);\n    xAxis = d3.scaleTime().domain([xAxisMin, xAxisMax]).rangeRound([margin.left, width - margin.right]); // width is inclusive of margin\n\n    // 2. Set up the yAxis domain and range\n    yAxis = d3.scaleLinear().domain([0, maxAQItoDisplay]).range([height + margin.top, margin.top]); // height is already exclusive of margin\n\n    // 7. Add the background category layer and the AQI levels (rectangles) and the grids\n    let font_size = Math.floor((((AQIdatabase[1].aqiUS.high - AQIdatabase[0].aqiUS.high) / maxAQItoDisplay) * height) / 2);\n    let marginText = Math.floor(font_size / 5);\n    // Loop through all the aqi_category and add each category into the graph\n    for (let i = 0; i < AQIdatabase.length; i++) {\n      const category = AQIdatabase[i];\n      if (maxAQItoDisplay <= category.aqiUS.low) break;\n      // Add the rectangles\n      const aqiRange = Math.ceil((category.aqiUS.high - category.aqiUS.low) / 50) * 50;\n      d3.select(layerBackground.current)\n        .append(\"rect\")\n        .attr(\"x\", 0)\n        .attr(\"y\", height - (category.aqiUS.high / maxAQItoDisplay) * height + margin.top)\n        .attr(\"width\", width)\n        .attr(\"height\", aqiRange / maxAQItoDisplay * height)\n        .attr(\"fill\", category.lightThemeColor);\n\n      // Add the AQI categories numbers\n      d3.select(layerTexts.current)\n        .append(\"text\")\n        .attr(\"x\", marginText)\n        .attr(\n          \"y\",\n          height -\n          (category.aqiUS.low / maxAQItoDisplay) * height -\n          3.5 * marginText + margin.top\n        )\n        .attr(\"fill\", category.lightThemeColor)\n        .attr(\"font-size\", font_size)\n        .text(Math.floor(category.aqiUS.low / 50) * 50);\n\n      d3.select(layerTexts.current)\n        .append(\"text\")\n        .attr(\"class\", \"category-text-graph-sm\")\n        .attr(\"x\", marginText + 2)\n        .attr(\n          \"y\",\n          height - (category.aqiUS.low / maxAQItoDisplay) * height - marginText + margin.top\n        )\n        .attr(\"fill\", category.lightThemeColor)\n        .attr(\"font-size\", font_size / 2)\n        .text(category.category);\n    };\n\n    // Add the xAxisWrapper and its texts\n    d3.select(layerXaxisWrapper.current)\n      .append(\"rect\")\n      .attr(\"x\", 0)\n      .attr(\"y\", 0)\n      .attr(\"width\", width)\n      .attr(\"height\", margin.top)\n      .attr(\"fill\", \"white\");\n\n    // 9.2. Add the X Axis on top of the graph, as well as ticks\n    let formatHour = d3.timeFormat(\"%H:%M\");\n    d3.select(layerXaxisWrapper.current)\n      .append(\"g\")\n      .attr(\"transform\", `translate(0,${margin.top})`)\n      .call(\n        d3\n          .axisTop(xAxis)\n          .tickSize(-height) // negative length to make vertical lines\n          .ticks(d3.timeMinute.every(xTickPeriod))\n          .tickFormat(function (d) {\n            return formatHour(d);\n          })\n      )\n      .attr(\"font-size\", font_size / 2.25)\n      .attr(\"color\", CustomThemes.universal.palette.inactiveSensor)\n      .select(\".domain\")\n      .remove();\n    d3.select(layerXaxisWrapper.current)\n      .selectAll('line')\n      .attr('stroke', 'white')\n      .attr('stroke-width', 2)\n      .attr('opacity', 0.5);\n\n    Object.entries(data).forEach(([key, sensorData]) => {\n      // Append the line chart for this location\n      d3.select(layerLines.current)\n        .append(\"path\")\n        .datum(sensorData.historical || [])\n        .attr(\"x\", margin.left)\n        .attr(\"class\", \"line\")\n        .attr(\"d\", lineGenerator)\n        .attr(\"fill\", \"transparent\")\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-width\", \"5px\")\n        .attr(\"opacity\", sensorData.sensor?.location_type === \"outdoors\" ? 1 : 0.5);\n\n      // Append the circle marker at the end of this line chart to denote its liveness\n      const mostRecentData = sensorData.historical?.length > 0 ? sensorData.historical?.[0] : null;\n      if (mostRecentData) {\n        const aqiObject = AQIdatabase[convertToAQI(mostRecentData[\"pm2.5\"]).aqi_category_index];\n        const markerWrapper = d3.select(layerLines.current)\n          .append(\"g\")\n          .attr(\n            \"transform\",\n            \"translate(\" +\n            xAxis(mostRecentData.timestamp) +\n            \",\" +\n            yAxis(mostRecentData.aqi) +\n            \")\"\n          )\n          .attr(\"fill\",\n            sensorData.current?.sensor_status === SensorStatus.active\n              ? aqiObject.lightThemeColor\n              : CustomThemes.universal.palette.inactiveSensor)\n          ;\n\n        sensorData.current?.sensor_status === SensorStatus.active &&\n          markerWrapper.append(\"circle\")\n            .attr(\"cx\", 0)\n            .attr(\"cy\", 0)\n            .attr(\"filter\", \"brightness(0.5)\")\n            .attr(\"class\", \"pulse-ring\")\n            .attr(\"r\", 2.5 * dotRadius);\n\n        markerWrapper.append(\"circle\")\n          .attr(\"cx\", 0)\n          .attr(\"cy\", 0)\n          .attr(\"stroke\", \"#666\")\n          .attr(\"class\", sensorData.current?.sensor_status === SensorStatus.active && \"pulse-dot\")\n          .attr(\"r\", dotRadius);\n\n        markerWrapper.append(\"text\")\n          .attr(\"class\", \"location-label\")\n          .attr(\"x\", dotRadius * 1.5)\n          .attr(\"y\", 0)\n          .attr(\"fill\", \"black\")\n          .attr(\"alignment-baseline\", \"middle\")\n          .attr(\"text-anchor\", \"left\")\n          .attr(\"font-size\", font_size / 3)\n          .text(capitalizeFirstCharacter(sensorData.sensor?.location_short));\n\n        const locationLabels = document.getElementsByClassName(\"location-label\");\n        for (let i = 1; i < locationLabels.length; i++) {\n          const locationLabel_1 = locationLabels[i - 1];\n          const locationLabel_2 = locationLabels[i];\n          const overlapped = areDOMOverlapped(locationLabel_1.getBoundingClientRect(), locationLabel_2.getBoundingClientRect());\n\n          if (overlapped !== 0) {\n            locationLabel_1.setAttribute(\"y\", overlapped * dotRadius);\n            locationLabel_2.setAttribute(\"y\", - overlapped * dotRadius);\n          }\n        }\n      }\n    });\n\n  }, [data])\n\n  return (\n    <Box\n      sx={{\n        '& .pulse-ring': {\n          animation: 'pulse-ring 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes pulse-ring': {\n            '0%': {\n              transform: 'scale(0.2)'\n            },\n            '80%': {},\n            '100%': {\n              opacity: 0\n            }\n          }\n        },\n        '& .pulse-dot': {\n          animation: 'pulse-dot 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes pulse-dot': {\n            '0%': {\n              transform: 'scale(0.5)'\n            },\n            '50%': {\n              transform: 'scale(1)',\n              filter: 'brightness(1.2) contrast(1.2) saturate(1.2)'\n            },\n            '100%': {\n              transform: 'scale(0.5)'\n            }\n          }\n        }\n      }}\n      width=\"100%\"\n      height=\"100%\"\n    >\n      <svg\n        id=\"recent-historical-graph\"\n        width=\"100%\"\n        height=\"100%\"\n        ref={graphContainer}\n      >\n        <g ref={layerBackground} />\n        <g ref={layerXaxisWrapper} />\n        <g ref={layerTexts} />\n        <g ref={layerLines} />\n      </svg>\n    </Box>\n\n  );\n}\n\nexport default RecentHistoricalGraph;","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useContext } from 'react';\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { UserContext } from '../ContextProviders/UserContext';\n\nimport { Box, Grid, Typography, Stack, List, ListItem, ListItemText } from '@mui/material';\n\nimport CITIESlogoLinkToHome from '../Components/Header/CITIESlogoLinkToHome';\n\nimport { SensorStatus } from '../Components/AirQuality/SensorStatus';\nimport { getDomainName, getUrlAfterScreen } from '../Components/AirQuality/AirQualityScreen/ScreenUtils';\n\nimport RecentHistoricalGraph from '../Components/AirQuality/AirQualityScreen/RecentHistoricalGraph';\n\nimport AQIdatabase from '../Utils/AirQuality/AirQualityIndexHelper';\n\nimport CustomThemes from '../Themes/CustomThemes';\n\nimport QRCode from \"react-qr-code\";\n\nimport CurrentAQIGrid, { CurrentAQIGridSize } from '../Components/AirQuality/CurrentAQIGrid';\nimport { GeneralEndpoints, fetchAndProcessCurrentSensorsData, getApiUrl } from '../Utils/ApiUtils';\nimport { UniqueRoutes } from '../Utils/RoutesUtils';\nimport { PreferenceContext } from '../ContextProviders/PreferenceContext';\n\nconst Screen = ({ title }) => {\n  const { temperatureUnitPreference } = useContext(PreferenceContext);\n\n  const { user } = useContext(UserContext);\n  const navigate = useNavigate();\n\n  const location = useLocation();\n  const locationPath = location.pathname;\n\n  // Update the page's title\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n\n  const [isLayoutReversed, setIsLayoutReversed] = useState();\n\n  const [data, setData] = useState({});\n\n  // Tweak the layout of the screen to prevent burn-in\n  useEffect(() => {\n    // Helper function to change layout of the screen based on current's month\n    // (arrange the left and right sections of the screen)\n    // to mitigate burn-in if the same static image is displayed over a long period of time\n    function returnIsLayoutReversed() {\n      let months = [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1]; // 12 months of a year, change the layout every two months\n      let now = new Date();\n      let thisMonthIndex = now.getMonth(); // get the index of this Month (0-11)\n      // Return a boolean value if the layout should be reversed\n      return (months[thisMonthIndex] !== 0);\n    }\n\n    setIsLayoutReversed(returnIsLayoutReversed());\n\n    // Set up an interval to call the function every day\n    const oneDayInMilliseconds = 24 * 60 * 60 * 1000;\n    const intervalId = setInterval(() => {\n      setIsLayoutReversed(returnIsLayoutReversed());\n    }, oneDayInMilliseconds);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  // Fetch air quality data from database, depends on the state of 'user' object\n  useEffect(() => {\n    // Only attempt to fetch data if the user has been authenticated\n    if (user.checkedAuthentication === false) return;\n\n    if (user.authenticated === true) {\n      // Do nothing if the data has been fetched before\n      if (Object.keys(data).length != 0) return;\n\n      const url = getApiUrl({ endpoint: GeneralEndpoints.screen });\n      if (!url) return;\n\n      fetchAndProcessCurrentSensorsData(url)\n        .then((data) => {\n          setData(data)\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n\n      // Create an interval that fetch new data every 5 minute\n      const fetchInterval = 5 * 60 * 1000; // 5min\n      const intervalId = setInterval(() => {\n        fetchAndProcessCurrentSensorsData(url)\n          .then((data) => {\n            setData(data)\n          })\n          .catch((error) => console.log(error))\n      },\n        fetchInterval);\n      // Clean up the interval when the component unmounts\n      return () => {\n        clearInterval(intervalId);\n      };\n    } else {\n      navigate(`${UniqueRoutes.login}?${UniqueRoutes.redirectQuery}=${locationPath}`);\n    }\n  }, [user]);\n\n  const AirQualityComparison = () => {\n    // Only display air quality comparison if every sensor is currently active\n    if (!Object.values(data).every((sensorData) => sensorData.current?.sensor_status === SensorStatus.active)) return null;\n\n    let outdoorsAQI, indoorsAQI;\n    // Don't display comparison if outdoor air is good\n    for (let i = 0; i < Object.values(data).length; i++) {\n      const sensorData = Object.values(data)[i];\n      if (sensorData.sensor?.location_type === \"outdoors\") {\n        outdoorsAQI = sensorData.current.aqi;\n        if (outdoorsAQI <= AQIdatabase[0].aqiUS.high) return null;\n      }\n      else indoorsAQI = sensorData.current.aqi;\n    }\n\n    const ratio = outdoorsAQI / indoorsAQI;\n    let comparison;\n    if (ratio >= 2) comparison = `${parseFloat(ratio).toFixed(1)} times`;\n    else if (ratio > 1.2) comparison = `${Math.round(100 * ((outdoorsAQI - indoorsAQI) / indoorsAQI))}%`;\n    else return null;\n\n    return (\n      <ListItem>\n        <ListItemText primary={\n          <>Indoors air is\n            <Typography\n              component=\"span\"\n              color={`${AQIdatabase[0].lightThemeColor} !important`}\n            >\n              {` ${comparison} `}\n            </Typography>\n            better than outdoors</>\n        } />\n      </ListItem>\n    );\n  }\n\n  return (\n    <Grid\n      container\n      alignContent=\"stretch\"\n      alignItems=\"stretch\"\n      height=\"100vh\"\n      sx={{\n        overflow: 'hidden',\n        background: \"white\",\n        '& *': {\n          fontWeight: '500 !important'\n        },\n        '& .condensedFont': {\n          fontFamily: 'IBM Plex Sans Condensed, sans-serif !important',\n          '& *': {\n            fontFamily: 'IBM Plex Sans Condensed, sans-serif !important'\n          }\n        },\n        '& .flashingRed': {\n          '& .MuiTypography-root ': {\n            color: `${AQIdatabase[3].lightThemeColor} !important`,\n            opacity: 0.8\n          },\n          color: `${AQIdatabase[3].lightThemeColor} !important`,\n          animation: 'flashingRed 3s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes flashingRed': {\n            '0%': {\n              opacity: 1\n            },\n            '50%': {\n              opacity: 0.5\n            },\n            '100%': {\n              opacity: 1\n            }\n          }\n        }\n      }}\n    >\n      <Grid\n        item\n        xs={6}\n        sx={{\n          py: 3,\n          px: 2,\n          order: isLayoutReversed ? 1 : 0,\n          background: '#212529'\n        }}\n      >\n        <Stack\n          direction=\"column\"\n          justifyContent=\"space-between\"\n          height=\"100%\"\n          textAlign=\"center\"\n        >\n          <Box>\n            <Typography variant=\"h4\" fontWeight=\"500\" color=\"white\">\n              PM2.5 AIR QUALITY INDEX\n            </Typography>\n            <Typography variant=\"h5\" className='condensedFont' color={CustomThemes.universal.palette.inactiveSensor}>\n              Particulate Matter &lt; 2.5μm\n            </Typography>\n          </Box>\n\n          <Grid\n            container\n            justifyContent=\"space-around\"\n          >\n            <CurrentAQIGrid\n              currentSensorsData={data}\n              temperatureUnitPreference={temperatureUnitPreference}\n              isScreen={true}\n              size={CurrentAQIGridSize.large}\n            />\n          </Grid>\n\n          <List className='condensedFont'\n            sx={{\n              listStyleType: 'disclosure-closed',\n              '& .MuiTypography-root': {\n                fontSize: '1.5rem',\n              },\n              '& .MuiListItem-root': {\n                display: 'list-item',\n                ml: 3,\n                p: 0,\n                pr: 3,\n              },\n              '& .MuiTypography-root, .MuiListItem-root': {\n                color: CustomThemes.universal.palette.inactiveSensor\n              }\n            }}>\n            <AirQualityComparison />\n            {\n              Object.entries(data).map(([key, sensorData]) => (\n                sensorData.current?.healthSuggestion &&\n                <ListItem\n                  key={key}\n                  className={sensorData.current?.aqi >= AQIdatabase[2].aqiUS.low && 'flashingRed'}\n                >\n                  <ListItemText\n                    primary={sensorData.current?.healthSuggestion}\n                  />\n                </ListItem>\n              ))\n            }\n          </List>\n        </Stack>\n      </Grid>\n\n      <Grid item xs={6} sx={{ order: isLayoutReversed ? 0 : 1 }}>\n        <Box\n          sx={{\n            position: 'absolute',\n            top: 0,\n            right: !isLayoutReversed && 0,\n            left: isLayoutReversed && 0,\n            width: '5vw',\n            height: '5vw',\n            m: 1\n          }}\n        >\n          <CITIESlogoLinkToHome />\n        </Box>\n        <Grid\n          container\n          alignContent=\"space-between\"\n          justifyContent=\"center\"\n          height=\"100%\"\n          textAlign=\"center\"\n        >\n          <Grid item xs={12} sx={{ pt: 3, px: 2 }}>\n            <Typography variant=\"h4\" fontWeight=\"500\" sx={{ color: 'black' }}>\n              AN INITIATIVE BY CITIESair\n            </Typography>\n          </Grid>\n          <Grid item xs={2}>\n            <Box height=\"auto\" width=\"100%\">\n              <QRCode\n                size={256}\n                style={{ height: \"auto\", maxWidth: \"100%\", width: \"100%\" }}\n                value={\n                  `${getDomainName(document.location.href)}?source=${getUrlAfterScreen(document.location.href)}`\n                } viewBox={`0 0 256 256`}\n              />\n            </Box>\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            height=\"70%\"\n            className='condensedFont'\n            sx={{ '& *': { fontWeight: '600 !important' } }}\n          >\n            <RecentHistoricalGraph data={data} />\n          </Grid>\n        </Grid>\n\n      </Grid>\n    </Grid >\n  );\n};\n\nexport default Screen;\n"],"names":["props","data","graphContainer","useRef","layerBackground","layerTexts","layerXaxisWrapper","layerLines","svg","width","height","xAxis","yAxis","maxAQItoDisplay","margin","lineGenerator","d3","x","d","timestamp","y","aqi","curve","tension","useEffect","current","clientWidth","clientHeight","selectAll","remove","attr","Object","entries","forEach","_ref","_sensorData$historica","key","sensorData","historical","Date","convertToAQI","Array","isArray","max","Math","ceil","category","AQIdatabase","aqiUS","low","high","xAxisMax","xAxisMin","setHours","getHours","domain","rangeRound","range","font_size","floor","marginText","i","length","aqiRange","append","lightThemeColor","text","formatHour","concat","call","tickSize","ticks","every","tickFormat","CustomThemes","universal","palette","inactiveSensor","select","_ref2","_sensorData$sensor","_sensorData$historica2","_sensorData$historica3","datum","sensor","location_type","mostRecentData","_sensorData$current","_sensorData$current2","_sensorData$current3","_sensorData$sensor2","aqiObject","aqi_category_index","markerWrapper","sensor_status","SensorStatus","active","dotRadius","capitalizeFirstCharacter","location_short","locationLabels","document","getElementsByClassName","locationLabel_1","locationLabel_2","overlapped","areDOMOverlapped","getBoundingClientRect","setAttribute","_jsx","Box","sx","animation","transform","opacity","filter","children","_jsxs","id","ref","title","temperatureUnitPreference","useContext","PreferenceContext","user","UserContext","navigate","useNavigate","locationPath","useLocation","pathname","isLayoutReversed","setIsLayoutReversed","useState","setData","returnIsLayoutReversed","getMonth","intervalId","setInterval","clearInterval","checkedAuthentication","authenticated","keys","url","getApiUrl","endpoint","GeneralEndpoints","screen","fetchAndProcessCurrentSensorsData","then","catch","error","console","log","UniqueRoutes","login","redirectQuery","AirQualityComparison","values","outdoorsAQI","indoorsAQI","ratio","comparison","parseFloat","toFixed","round","ListItem","ListItemText","primary","_Fragment","Typography","component","color","Grid","container","alignContent","alignItems","overflow","background","fontWeight","fontFamily","item","xs","py","px","order","Stack","direction","justifyContent","textAlign","variant","className","CurrentAQIGrid","currentSensorsData","isScreen","size","CurrentAQIGridSize","large","List","listStyleType","fontSize","display","ml","p","pr","map","_sensorData$current4","healthSuggestion","position","top","right","left","m","CITIESlogoLinkToHome","pt","QRCode","style","maxWidth","value","getDomainName","location","href","getUrlAfterScreen","viewBox","RecentHistoricalGraph"],"sourceRoot":""}