{"version":3,"file":"static/js/871.e37b8a86.chunk.js","mappings":"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","sources":["Components/CurrentAQIGrid.jsx","Pages/Home/About.jsx","Pages/Home/GetInTouch.jsx","Pages/Home/Home.jsx","Pages/Project/ExpandableSection.jsx"],"sourcesContent":["// disable eslint for this file\n/* eslint-disable */\nimport { Box, Grid, Typography, Skeleton, Stack } from '@mui/material';\nimport ThermostatIcon from '@mui/icons-material/Thermostat';\nimport WaterDropIcon from '@mui/icons-material/WaterDrop';\nimport ErrorIcon from '@mui/icons-material/Error';\n\nimport { returnSensorStatus, SensorStatus, getFormattedElapsedTimeFromNow } from '../Pages/Screen/ScreenUtils';\nimport { TemperatureUnits, getFormattedTemperature, calculateHeatIndex } from \"../Pages/Screen/TemperatureUtils\";\n\nimport AQIdatabase from '../Utils/AirQualityIndexHelper';\n\nimport CustomThemes from '../Themes/CustomThemes';\n\nconst CurrentAQIGrid = (props) => {\n  const { currentSensorsData, temperatureUnitPreference, isScreen = true } = props;\n\n  const getGridItemSize = (numOfItems) => {\n    return {\n      xs: Math.max(12 / numOfItems, 6),\n      sm: Math.max(12 / numOfItems, 4),\n      lg: isScreen ? (12 / numOfItems) : Math.min(5, Math.max(12 / numOfItems, 2))\n    }\n  }\n\n  return (\n    <Grid\n      container\n      justifyContent=\"center\"\n      sx={{\n        '& .MuiSvgIcon-root': {\n          verticalAlign: 'sub',\n          fontSize: isScreen ? null : '1rem'\n        },\n        '& *': {\n          fontWeight: '500'\n        },\n        '& .condensedFont': {\n          fontFamily: 'IBM Plex Sans Condensed, sans-serif !important',\n          '& *': {\n            fontFamily: 'IBM Plex Sans Condensed, sans-serif !important'\n          }\n        }\n      }}\n    >\n      {\n        currentSensorsData ?\n\n          (Object.entries(currentSensorsData).map(([key, sensorData], index) => (\n            <Grid\n              item\n              key={key}\n              {...getGridItemSize(Object.keys(currentSensorsData).length)}\n              sx={\n                sensorData.current?.sensor_status !== SensorStatus.active &&\n                { '& *': { color: `${CustomThemes.universal.palette.inactiveSensor}` } }\n              }\n            >\n              <Box sx={{ '& *': { color: sensorData.current?.color } }}>\n                <Typography variant={isScreen ? \"h4\" : 'h5'} fontWeight=\"500\" className='condensedFont'>\n                  {sensorData.sensor?.location_long || sensorData.sensor?.location_short || 'No Location Name'}\n                </Typography>\n                <Typography variant={isScreen ? \"h1\" : 'h2'} fontWeight=\"500\" lineHeight={isScreen ? 0.8 : 0.9}>\n                  {sensorData.current?.aqi || '--'}\n                </Typography>\n                <Typography variant={isScreen ? \"h4\" : 'h5'} fontWeight=\"500\" className='condensedFont'>\n                  {sensorData.current?.category || '--'}\n                </Typography>\n              </Box>\n\n              <Box sx={{\n                '& *': {\n                  color:\n                    isScreen ? (\n                      sensorData.current?.sensor_status === SensorStatus.active ?\n                        '#c8dcff' : CustomThemes.universal.palette.inactiveSensor\n                    )\n                      : 'text.secondary'\n                }, mt: isScreen ? 2 : 1\n              }} className='condensedFont'>\n                <Typography variant={isScreen ? \"h6\" : 'body1'}>\n                  <ThermostatIcon />\n                  {\n                    getFormattedTemperature({\n                      rawTemp: sensorData.current?.temperature,\n                      currentUnit: TemperatureUnits.celsius,\n                      returnUnit: temperatureUnitPreference\n                    })\n                  }\n                  &nbsp;&nbsp;-&nbsp;\n                  <WaterDropIcon sx={{ transform: 'scaleX(0.9)' }} />\n                  {sensorData.current?.rel_humidity ? Math.round(sensorData.current?.rel_humidity) : \"--\"}%\n                </Typography>\n                {\n                  // Show heat index for selected location types\n                  ['outdoors', 'indoors_gym'].includes(sensorData.sensor?.location_type) &&\n                  <Typography variant={isScreen ? \"body1\" : 'body2'} sx={{ fontWeight: '300 !important' }}>\n                    {calculateHeatIndex({\n                      rawTemp: sensorData.current?.temperature,\n                      currentUnit: TemperatureUnits.celsius,\n                      rel_humidity: sensorData.current?.rel_humidity,\n                      returnUnit: temperatureUnitPreference\n                    })}\n                  </Typography>\n                }\n                {\n                  displayLastUpdateAndSensorStatus({ sensorData, isScreen })\n                }\n              </Box>\n\n              {\n                // Display outdoor-indoor comparison if both sensors are active\n                sensorData.sensor_status !== SensorStatus.active &&\n                <Typography variant={isScreen ? \"h6\" : 'body1'} className=\"condensedFont\">\n                  {returnSensorStatus(sensorData)}\n                </Typography>\n              }\n            </Grid>\n          ))\n          )\n          :\n          (\n            <Stack direction=\"column\" alignItems=\"center\" justifyContent=\"center\">\n              <Skeleton variant='text' sx={{ width: '15rem', fontSize: '2rem' }} />\n              <Skeleton variant='text' sx={{ width: '5rem', fontSize: '4rem', my: -1.5 }} />\n              <Skeleton variant='text' sx={{ width: '10rem', fontSize: '2rem' }} />\n              <Skeleton variant='text' sx={{ width: '7.5rem', fontSize: '1rem' }} />\n              <Skeleton variant='text' sx={{ width: '7.5rem', fontSize: '1rem' }} />\n            </Stack>\n          )\n      }\n    </Grid>\n  );\n};\n\nconst displayLastUpdateAndSensorStatus = ({ sensorData, isScreen }) => {\n  if (isScreen && sensorData.current.sensor_status === SensorStatus.active) return null;\n  else\n    return (\n      <Typography\n        variant={isScreen ? 'h6' : 'caption'}\n        sx={{\n          mt: 0,\n          fontWeight: isScreen && '500 !important'\n        }}\n      >\n        {\n          sensorData.current?.sensor_status !== SensorStatus.active\n          &&\n          <>\n            <ErrorIcon\n              sx={{\n                '& *': {\n                  color: `${AQIdatabase[3].lightThemeColor} !important`\n                },\n                mr: 0.5\n              }} />\n            Offline.&nbsp;\n          </>\n        }\n        Last update:\n        {(sensorData.current?.timestamp || sensorData.sensor?.last_seen)\n          ? ` ${getFormattedElapsedTimeFromNow(sensorData.current?.timestamp || sensorData.sensor?.last_seen)} ago`\n          : '--'}\n      </Typography>\n    )\n}\n\nexport default CurrentAQIGrid;\n","import { Stack, Typography, Paper } from '@mui/material';\n\nimport parse from 'html-react-parser';\nimport UppercaseTitle from '../../Components/UppercaseTitle';\nimport ExpandableSection from '../Project/ExpandableSection';\n\nimport jsonData from '../../section_data.json';\nimport { replacePlainHTMLWithMuiComponents, capitalizePhrase } from '../../Utils/Utils';\n\nfunction About() {\n  return (\n    <>\n      <UppercaseTitle text={capitalizePhrase(jsonData.about.id)} />\n      <Stack spacing={3}>\n        {jsonData.about.content.map((element, index) => (\n          <Paper key={index} elevation={2} sx={{ p: 3 }}>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {parse(element.mainText, {\n                replace: replacePlainHTMLWithMuiComponents,\n              })}\n            </Typography>\n            {\n              element.reference && (\n                <ExpandableSection\n                  title={\"Reference\"}\n                  content={(\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      {parse(element.reference, {\n                        replace: replacePlainHTMLWithMuiComponents,\n                      })}\n                    </Typography>\n                  )}\n                />\n              )\n            }\n          </Paper>\n        ))}\n        <Typography variant=\"caption\" color=\"text.secondary\" sx={{ px: 3 }}>\n          {parse(jsonData.disclaimer.content, {\n            replace: replacePlainHTMLWithMuiComponents,\n          })}\n        </Typography>\n      </Stack>\n    </>\n  );\n}\n\nexport default About;\n","import { Typography, Paper } from '@mui/material';\n\nimport parse from 'html-react-parser';\nimport UppercaseTitle from '../../Components/UppercaseTitle';\n\nimport jsonData from '../../section_data.json';\nimport { replacePlainHTMLWithMuiComponents, capitalizePhrase } from '../../Utils/Utils';\n\nfunction GetInTouch() {\n  return (\n    <>\n      <UppercaseTitle text={capitalizePhrase(jsonData.getInTouch.id)} />\n      <Paper elevation={2} sx={{ p: 3, pb: 1 }}>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {parse(jsonData.getInTouch.content, {\n            replace: replacePlainHTMLWithMuiComponents,\n          })}\n        </Typography>\n      </Paper>\n    </>\n  );\n}\n\nexport default GetInTouch;\n","import { useEffect, useContext, useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\nimport { Button, Box, Stack, Typography, Container, Divider } from '@mui/material';\nimport { LinkContext } from '../../ContextProviders/LinkContext';\n\nimport UppercaseTitle from '../../Components/UppercaseTitle';\nimport FullWidthBox from '../../Components/FullWidthBox';\n\n// import AtAGlance from './AtAGlance';\nimport About from './About';\n\nimport jsonData from '../../section_data.json';\n\nimport * as Tracking from '../../Utils/Tracking';\nimport parse from 'html-react-parser';\nimport { replacePlainHTMLWithMuiComponents } from '../../Utils/Utils';\n\nimport AQImap, { TileOptions } from '../../Components/AQImap';\n\nimport CurrentAQIGrid from '../../Components/CurrentAQIGrid';\nimport { EndPoints, fetchAndProcessCurrentSensorsData, getApiUrl } from '../../Utils/ApiUtils';\n\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport GetInTouch from './GetInTouch';\nimport { UniqueRoutes } from '../../Utils/RoutesUtils';\n\nfunction Home({ themePreference, temperatureUnitPreference, title }) {\n  // Update the page's title\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n\n  // useState for home page data\n  // eslint-disable-next-line no-unused-vars\n  const [_, setCurrentPage, __, setChartsTitlesList] = useContext(LinkContext);\n\n  // set underline link to home\n  useEffect(() => {\n    setCurrentPage(UniqueRoutes.home);\n    setChartsTitlesList([]);\n  }, [setCurrentPage, setChartsTitlesList]);\n\n  // Fetch public NYUAD sensors data and public map data\n  const [nyuadCurrentSensorData, setNyuadCurrentSensorData] = useState({});\n  const [rawMapData, setRawMapData] = useState();\n\n  useEffect(() => {\n    const nyuadUrl = getApiUrl({ endpoint: EndPoints.current, school_id: 'nyuad' });\n    fetchAndProcessCurrentSensorsData(nyuadUrl)\n      .then((data) => {\n        setNyuadCurrentSensorData(data)\n      })\n      .catch((error) => console.log(error));\n\n    const mapUrl = getApiUrl({ endpoint: EndPoints.map });\n    fetchAndProcessCurrentSensorsData(mapUrl)\n      .then((data) => {\n        setRawMapData(data)\n      })\n      .catch((error) => console.log(error));\n  }, []);\n\n\n  return (\n    <Box width=\"100%\">\n      <FullWidthBox>\n        <Container sx={{ pt: 3, pb: 4 }}>\n          <UppercaseTitle text=\"real-time air quality at NYUAD\" />\n          <Typography variant='body1' color='text.secondary' sx={{ mt: -2, mb: 2 }}>\n            PM2.5 (Particulate Matter Smaller Than 2.5 Micrometer)\n          </Typography>\n\n          <Stack spacing={2} alignItems=\"center\" textAlign=\"center\">\n            <CurrentAQIGrid\n              currentSensorsData={nyuadCurrentSensorData}\n              isScreen={false}\n              temperatureUnitPreference={temperatureUnitPreference}\n            />\n            <Stack width=\"fit-content\" alignItems=\"center\" margin=\"auto\">\n              <Button\n                component={RouterLink}\n                variant='contained'\n                sx={{ width: \"fit-content\", mb: 1 }}\n                to={UniqueRoutes.nyuad}\n                onClick={() => {\n                  Tracking.sendEventAnalytics(\n                    Tracking.Events.internalNavigation,\n                    {\n                      destination_id: UniqueRoutes.nyuad,\n                      destination_school_id: \"nyuad\",\n                      origin_id: UniqueRoutes.home\n                    }\n                  );\n                }}\n              >\n                <BarChartIcon sx={{ fontSize: '0.8rem' }} />&nbsp;NYUAD Dashboard (Public Access)\n              </Button>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                See detailed analysis of historical air quality data at NYUAD\n              </Typography>\n            </Stack>\n          </Stack>\n        </Container>\n      </FullWidthBox>\n\n      <FullWidthBox sx={{ backgroundColor: 'customAlternateBackground' }}>\n        <Container sx={{ py: 3 }}>\n          <UppercaseTitle text=\"public outdoor stations\" />\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            {parse(jsonData.publicOutdoorStations.content, {\n              replace: replacePlainHTMLWithMuiComponents,\n            })}\n          </Typography>\n        </Container>\n        <AQImap\n          tileOption={TileOptions.default}\n          themePreference={themePreference}\n          temperatureUnitPreference={temperatureUnitPreference}\n          placeholderText={\"Map of CITIESair public outdoor air quality stations in Abu Dhabi.\"}\n          centerCoordinates={[24.46, 54.52]}\n          maxBounds={[\n            [22.608292, 51.105185],\n            [26.407575, 56.456571],\n          ]}\n          rawMapData={rawMapData}\n        />\n\n      </FullWidthBox>\n\n      <Divider />\n\n      <FullWidthBox id={jsonData.about.id} sx={{ pt: 3, pb: 4 }}>\n        <Container>\n          <About />\n        </Container>\n      </FullWidthBox>\n\n      <Divider />\n\n      <FullWidthBox id={jsonData.getInTouch.id} sx={{ pt: 3, pb: 4 }}>\n        <Container>\n          <GetInTouch />\n        </Container>\n      </FullWidthBox>\n\n    </Box >\n  );\n}\n\nexport default Home;\n","// disable eslint for this file\n/* eslint-disable */\nimport { useState } from 'react';\nimport { styled } from '@mui/material/styles';\n\nimport MuiAccordion from '@mui/material/Accordion';\nimport MuiAccordionSummary from '@mui/material/AccordionSummary';\nimport MuiAccordionDetails from '@mui/material/AccordionDetails';\nimport { Box, Typography, Tooltip } from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n\nimport * as Tracking from '../../Utils/Tracking';\n\nconst StyledAccordion = styled(MuiAccordion)(({ theme, expanded }) => ({\n  color: theme.palette.text.secondary,\n  backgroundImage: 'none',\n  backgroundColor: expanded ? theme.palette.background.default : 'transparent',\n  boxShadow: expanded ? theme.shadows : 'none',\n  transition: 'none',\n}));\n\nconst StyledAccordionSummary = styled(MuiAccordionSummary)(({ theme, expanded }) => ({\n  marginTop: expanded ? theme.spacing(3) : 0,\n  flexDirection: 'row-reverse',\n  paddingLeft: expanded ? theme.spacing(1) : 0,\n  '& .MuiTypography-root': {\n    color: theme.palette.text.primary,\n    textDecoration: 'underline',\n    transition: 'none',\n    '&:hover': {\n      color: theme.palette.primary.main,\n    },\n  },\n}));\n\nconst ExpandableSection = ({ title, content }) => {\n  const [expanded, setExpanded] = useState(undefined);\n\n  const handleAccordionChange = (panel) => (event, isExpanded) => {\n    setExpanded(isExpanded ? panel : undefined);\n    Tracking.sendEventAnalytics(\n      isExpanded ? Tracking.Events.expandSection : Tracking.Events.collapseSection,\n      {\n        section: title\n      }\n    );\n  };\n\n  return (\n    <Box>\n      <StyledAccordion\n        expanded={expanded === \"panel1\"}\n        onChange={handleAccordionChange(\"panel1\")}\n        transitionDuration={0}\n      >\n        <StyledAccordionSummary expanded={expanded} expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1a-content\" id=\"panel1a-header\">\n          <Tooltip title={expanded ? \"Click to collapse\" : \"Click to expand\"} enterDelay={0} leaveDelay={200}>\n            <Typography component=\"a\" variant=\"body2\">\n              {title}\n            </Typography>\n          </Tooltip>\n        </StyledAccordionSummary>\n        <MuiAccordionDetails>\n          {content}\n        </MuiAccordionDetails>\n      </StyledAccordion>\n    </Box>\n  );\n}\n\nexport default ExpandableSection;"],"names":["displayLastUpdateAndSensorStatus","sensorData","isScreen","current","sensor_status","SensorStatus","variant","sx","mt","fontWeight","color","AQIdatabase","mr","timestamp","sensor","last_seen","getFormattedElapsedTimeFromNow","props","currentSensorsData","temperatureUnitPreference","container","justifyContent","verticalAlign","fontSize","fontFamily","Object","entries","map","index","numOfItems","key","item","keys","length","xs","Math","max","sm","lg","min","CustomThemes","className","location_long","location_short","lineHeight","aqi","category","getFormattedTemperature","rawTemp","temperature","currentUnit","TemperatureUnits","returnUnit","transform","rel_humidity","round","includes","location_type","calculateHeatIndex","returnSensorStatus","direction","alignItems","width","my","UppercaseTitle","text","capitalizePhrase","jsonData","Stack","spacing","element","Paper","elevation","p","Typography","parse","mainText","replace","replacePlainHTMLWithMuiComponents","reference","ExpandableSection","title","content","px","pb","themePreference","useEffect","document","useContext","LinkContext","setCurrentPage","setChartsTitlesList","UniqueRoutes","useState","nyuadCurrentSensorData","setNyuadCurrentSensorData","rawMapData","setRawMapData","nyuadUrl","getApiUrl","endpoint","EndPoints","school_id","fetchAndProcessCurrentSensorsData","then","data","catch","error","console","log","mapUrl","Box","FullWidthBox","Container","pt","mb","textAlign","CurrentAQIGrid","margin","Button","component","RouterLink","to","onClick","Tracking","destination_id","destination_school_id","origin_id","BarChart","backgroundColor","py","AQImap","tileOption","TileOptions","placeholderText","centerCoordinates","maxBounds","Divider","id","StyledAccordion","styled","MuiAccordion","theme","expanded","palette","secondary","backgroundImage","background","default","boxShadow","shadows","transition","StyledAccordionSummary","MuiAccordionSummary","marginTop","flexDirection","paddingLeft","primary","textDecoration","main","panel","undefined","setExpanded","onChange","event","isExpanded","section","transitionDuration","expandIcon","enterDelay","leaveDelay"],"sourceRoot":""}