{"version":3,"file":"static/js/538.23392510.chunk.js","mappings":"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","sources":["Components/CurrentAQIGrid.jsx","Pages/Screen/RecentHistoricalGraph.jsx","Pages/Screen/Screen.jsx"],"sourcesContent":["// disable eslint for this file\n/* eslint-disable */\nimport { Box, Grid, Typography, Skeleton, Stack } from '@mui/material';\nimport ThermostatIcon from '@mui/icons-material/Thermostat';\nimport WaterDropIcon from '@mui/icons-material/WaterDrop';\nimport ErrorIcon from '@mui/icons-material/Error';\n\nimport { returnSensorStatus, SensorStatus, getFormattedElapsedTimeFromNow } from '../Pages/Screen/ScreenUtils';\nimport { TemperatureUnits, getFormattedTemperature, calculateHeatIndex } from \"../Pages/Screen/TemperatureUtils\";\n\nimport AQIdatabase from '../Utils/AirQualityIndexHelper';\n\nimport CustomThemes from '../Themes/CustomThemes';\n\nconst CurrentAQIGrid = (props) => {\n  const { currentSensorsData, temperatureUnitPreference, isScreen = true } = props;\n\n  const getGridItemSize = (numOfItems) => {\n    return {\n      xs: Math.max(12 / numOfItems, 6),\n      sm: Math.max(12 / numOfItems, 4),\n      lg: isScreen ? (12 / numOfItems) : Math.min(5, Math.max(12 / numOfItems, 2))\n    }\n  }\n\n  return (\n    <Grid\n      container\n      justifyContent=\"center\"\n      sx={{\n        '& .MuiSvgIcon-root': {\n          verticalAlign: 'sub',\n          fontSize: isScreen ? null : '1rem'\n        },\n        '& *': {\n          fontWeight: '500'\n        },\n        '& .condensedFont': {\n          fontFamily: 'IBM Plex Sans Condensed, sans-serif !important',\n          '& *': {\n            fontFamily: 'IBM Plex Sans Condensed, sans-serif !important'\n          }\n        }\n      }}\n    >\n      {\n        currentSensorsData ?\n\n          (Object.entries(currentSensorsData).map(([key, sensorData], index) => (\n            <Grid\n              item\n              key={key}\n              {...getGridItemSize(Object.keys(currentSensorsData).length)}\n              sx={\n                sensorData.current?.sensor_status !== SensorStatus.active &&\n                { '& *': { color: `${CustomThemes.universal.palette.inactiveSensor}` } }\n              }\n            >\n              <Box sx={{ '& *': { color: sensorData.current?.color } }}>\n                <Typography variant={isScreen ? \"h4\" : 'h5'} fontWeight=\"500\" className='condensedFont'>\n                  {sensorData.sensor?.location_long || sensorData.sensor?.location_short || 'No Location Name'}\n                </Typography>\n                <Typography variant={isScreen ? \"h1\" : 'h2'} fontWeight=\"500\" lineHeight={isScreen ? 0.8 : 0.9}>\n                  {sensorData.current?.aqi || '--'}\n                </Typography>\n                <Typography variant={isScreen ? \"h4\" : 'h5'} fontWeight=\"500\" className='condensedFont'>\n                  {sensorData.current?.category || '--'}\n                </Typography>\n              </Box>\n\n              <Box sx={{\n                '& *': {\n                  color:\n                    isScreen ? (\n                      sensorData.current?.sensor_status === SensorStatus.active ?\n                        '#c8dcff' : CustomThemes.universal.palette.inactiveSensor\n                    )\n                      : 'text.secondary'\n                }, mt: isScreen ? 2 : 1\n              }} className='condensedFont'>\n                <Typography variant={isScreen ? \"h6\" : 'body1'}>\n                  <ThermostatIcon />\n                  {\n                    getFormattedTemperature({\n                      rawTemp: sensorData.current?.temperature,\n                      currentUnit: TemperatureUnits.celsius,\n                      returnUnit: temperatureUnitPreference\n                    })\n                  }\n                  &nbsp;&nbsp;-&nbsp;\n                  <WaterDropIcon sx={{ transform: 'scaleX(0.9)' }} />\n                  {sensorData.current?.rel_humidity ? Math.round(sensorData.current?.rel_humidity) : \"--\"}%\n                </Typography>\n                {\n                  // Show heat index for selected location types\n                  ['outdoors', 'indoors_gym'].includes(sensorData.sensor?.location_type) &&\n                  <Typography variant={isScreen ? \"body1\" : 'body2'} sx={{ fontWeight: '300 !important' }}>\n                    {calculateHeatIndex({\n                      rawTemp: sensorData.current?.temperature,\n                      currentUnit: TemperatureUnits.celsius,\n                      rel_humidity: sensorData.current?.rel_humidity,\n                      returnUnit: temperatureUnitPreference\n                    })}\n                  </Typography>\n                }\n                {\n                  displayLastUpdateAndSensorStatus({ sensorData, isScreen })\n                }\n              </Box>\n\n              {\n                // Display outdoor-indoor comparison if both sensors are active\n                sensorData.sensor_status !== SensorStatus.active &&\n                <Typography variant={isScreen ? \"h6\" : 'body1'} className=\"condensedFont\">\n                  {returnSensorStatus(sensorData)}\n                </Typography>\n              }\n            </Grid>\n          ))\n          )\n          :\n          (\n            <Stack direction=\"column\" alignItems=\"center\" justifyContent=\"center\">\n              <Skeleton variant='text' sx={{ width: '15rem', fontSize: '2rem' }} />\n              <Skeleton variant='text' sx={{ width: '5rem', fontSize: '4rem', my: -1.5 }} />\n              <Skeleton variant='text' sx={{ width: '10rem', fontSize: '2rem' }} />\n              <Skeleton variant='text' sx={{ width: '7.5rem', fontSize: '1rem' }} />\n              <Skeleton variant='text' sx={{ width: '7.5rem', fontSize: '1rem' }} />\n            </Stack>\n          )\n      }\n    </Grid>\n  );\n};\n\nconst displayLastUpdateAndSensorStatus = ({ sensorData, isScreen }) => {\n  if (isScreen && sensorData.current.sensor_status === SensorStatus.active) return null;\n  else\n    return (\n      <Typography\n        variant={isScreen ? 'h6' : 'caption'}\n        sx={{\n          mt: 0,\n          fontWeight: isScreen && '500 !important'\n        }}\n      >\n        {\n          sensorData.current?.sensor_status !== SensorStatus.active\n          &&\n          <>\n            <ErrorIcon\n              sx={{\n                '& *': {\n                  color: `${AQIdatabase[3].lightThemeColor} !important`\n                },\n                mr: 0.5\n              }} />\n            Offline.&nbsp;\n          </>\n        }\n        Last update:\n        {(sensorData.current?.timestamp || sensorData.sensor?.last_seen)\n          ? ` ${getFormattedElapsedTimeFromNow(sensorData.current?.timestamp || sensorData.sensor?.last_seen)} ago`\n          : '--'}\n      </Typography>\n    )\n}\n\nexport default CurrentAQIGrid;\n","// disable eslint for this file\n/* eslint-disable */\nimport { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\n\nimport convertToAQI from '../../Utils/AirQualityIndexCalculator';\nimport AQIdatabase from '../../Utils/AirQualityIndexHelper';\nimport { SensorStatus } from './ScreenUtils';\nimport { Box } from '@mui/material';\n\nimport { capitalizeFirstCharacter, areDOMOverlapped } from './ScreenUtils';\n\nimport CustomThemes from '../../Themes/CustomThemes';\n\nconst numberOfHoursForHistoricalData = 6;\n\nconst RecentHistoricalGraph = (props) => {\n  const { data } = props;\n\n  const [firstDraw, setFirstDraw] = useState(true);\n\n  const graphContainer = useRef();\n  const layerBackground = useRef();\n  const layerTexts = useRef();\n  const layerXaxisWrapper = useRef();\n  const layerLines = useRef();\n\n  let svg, width, height, xAxis, yAxis;\n  let maxAQItoDisplay = 200;\n  const xTickPeriod = 120; // xAxis ticks every 2 hour\n  const dotRadius = 10;\n  const margin = { top: 30, right: 80, bottom: 0, left: 70 };\n\n  // Set up D3's line generator\n  const lineGenerator = d3\n    .line()\n    .x(function (d) {\n      return xAxis(d.timestamp);\n    }) // set the x values for the line generator\n    .y(function (d) {\n      return yAxis(d.aqi);\n    }) // set the y values for the line generator\n    .curve(d3.curveCardinal.tension(0)); // apply smoothing to the line\n\n  useEffect(() => {\n    if (!data) return;\n    if (!graphContainer.current) return;\n    if (!layerBackground.current) return;\n    if (!layerTexts.current) return;\n    if (!layerXaxisWrapper.current) return;\n    if (!layerLines.current) return;\n\n    svg = d3.select(graphContainer.current);\n    width = graphContainer.current.clientWidth;\n    height = graphContainer.current.clientHeight - margin.top;\n\n    // Clear all previous drawings\n    d3.select(layerBackground.current).selectAll(\"*\").remove();\n    d3.select(layerTexts.current).selectAll(\"*\").remove();\n    d3.select(layerXaxisWrapper.current).selectAll(\"*\").remove();\n    d3.select(layerLines.current).selectAll(\"*\").remove();\n\n    d3.select(layerBackground.current)\n      .attr(\"opacity\", 0.5);\n    d3.select(layerTexts.current)\n      .attr(\"filter\", \"brightness(0.8) contrast(1.2) saturate(1.2)\");\n\n    Object.entries(data).forEach(([key, sensorData]) => {\n      // Create the JS date object and calculate AQI from raw measurements\n      sensorData.historical?.forEach(function (d) {\n        d.timestamp = new Date(d.timestamp);\n        d.aqi = convertToAQI(d[\"pm2.5\"]).aqi;\n      });\n\n      // Calculate the maximum value AQI of this sensor\n      if (sensorData.historical && Array.isArray(sensorData.historical)) {\n        const max = d3.max(sensorData.historical, function (d) {\n          return d.aqi;\n        });\n        if (max > maxAQItoDisplay) maxAQItoDisplay = max;\n      }\n    });\n\n    // Calculate the maximum AQI for the y-axis to display\n    maxAQItoDisplay = Math.ceil(maxAQItoDisplay / 50) * 50; // round to the nearest 50 points\n\n    for (let category of AQIdatabase) {\n      if (maxAQItoDisplay >= category.aqiUS.low && maxAQItoDisplay <= category.aqiUS.high) {\n        maxAQItoDisplay = category.aqiUS.high;\n        break;\n      }\n    };\n\n    // 1. Set up the xAxis domain and range\n    let xAxisMax = new Date();\n    let xAxisMin = new Date();\n    xAxisMin.setHours(xAxisMin.getHours() - numberOfHoursForHistoricalData);\n    xAxis = d3.scaleTime().domain([xAxisMin, xAxisMax]).rangeRound([margin.left, width - margin.right]); // width is inclusive of margin\n\n    // 2. Set up the yAxis domain and range\n    yAxis = d3.scaleLinear().domain([0, maxAQItoDisplay]).range([height + margin.top, margin.top]); // height is already exclusive of margin\n\n    // 7. Add the background category layer and the AQI levels (rectangles) and the grids\n    let font_size = Math.floor((((AQIdatabase[1].aqiUS.high - AQIdatabase[0].aqiUS.high) / maxAQItoDisplay) * height) / 2);\n    let marginText = Math.floor(font_size / 5);\n    // Loop through all the aqi_category and add each category into the graph\n    for (let i = 0; i < AQIdatabase.length; i++) {\n      const category = AQIdatabase[i];\n      if (maxAQItoDisplay <= category.aqiUS.low) break;\n      // Add the rectangles\n      const aqiRange = Math.ceil((category.aqiUS.high - category.aqiUS.low) / 50) * 50;\n      d3.select(layerBackground.current)\n        .append(\"rect\")\n        .attr(\"x\", 0)\n        .attr(\"y\", height - (category.aqiUS.high / maxAQItoDisplay) * height + margin.top)\n        .attr(\"width\", width)\n        .attr(\"height\", aqiRange / maxAQItoDisplay * height)\n        .attr(\"fill\", category.lightThemeColor);\n\n      // Add the AQI categories numbers\n      d3.select(layerTexts.current)\n        .append(\"text\")\n        .attr(\"x\", marginText)\n        .attr(\n          \"y\",\n          height -\n          (category.aqiUS.low / maxAQItoDisplay) * height -\n          3.5 * marginText + margin.top\n        )\n        .attr(\"fill\", category.lightThemeColor)\n        .attr(\"font-size\", font_size)\n        .text(Math.floor(category.aqiUS.low / 50) * 50);\n\n      d3.select(layerTexts.current)\n        .append(\"text\")\n        .attr(\"class\", \"category-text-graph-sm\")\n        .attr(\"x\", marginText + 2)\n        .attr(\n          \"y\",\n          height - (category.aqiUS.low / maxAQItoDisplay) * height - marginText + margin.top\n        )\n        .attr(\"fill\", category.lightThemeColor)\n        .attr(\"font-size\", font_size / 2)\n        .text(category.category);\n    };\n\n    // Add the xAxisWrapper and its texts\n    d3.select(layerXaxisWrapper.current)\n      .append(\"rect\")\n      .attr(\"x\", 0)\n      .attr(\"y\", 0)\n      .attr(\"width\", width)\n      .attr(\"height\", margin.top)\n      .attr(\"fill\", \"white\");\n\n    // 9.2. Add the X Axis on top of the graph, as well as ticks\n    let formatHour = d3.timeFormat(\"%H:%M\");\n    d3.select(layerXaxisWrapper.current)\n      .append(\"g\")\n      .attr(\"transform\", `translate(0,${margin.top})`)\n      .call(\n        d3\n          .axisTop(xAxis)\n          .tickSize(-height) // negative length to make vertical lines\n          .ticks(d3.timeMinute.every(xTickPeriod))\n          .tickFormat(function (d) {\n            return formatHour(d);\n          })\n      )\n      .attr(\"font-size\", font_size / 2.25)\n      .attr(\"color\", CustomThemes.universal.palette.inactiveSensor)\n      .select(\".domain\")\n      .remove();\n    d3.select(layerXaxisWrapper.current)\n      .selectAll('line')\n      .attr('stroke', 'white')\n      .attr('stroke-width', 2)\n      .attr('opacity', 0.5);\n\n    Object.entries(data).forEach(([key, sensorData]) => {\n      // Append the line chart for this location\n      d3.select(layerLines.current)\n        .append(\"path\")\n        .datum(sensorData.historical || [])\n        .attr(\"x\", margin.left)\n        .attr(\"class\", \"line\")\n        .attr(\"d\", lineGenerator)\n        .attr(\"fill\", \"transparent\")\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-width\", \"5px\")\n        .attr(\"opacity\", sensorData.sensor?.location_type === \"outdoors\" ? 1 : 0.5);\n\n      // Append the circle marker at the end of this line chart to denote its liveness\n      const mostRecentData = sensorData.historical?.length > 0 ? sensorData.historical?.[0] : null;\n      if (mostRecentData) {\n        const aqiObject = AQIdatabase[convertToAQI(mostRecentData[\"pm2.5\"]).aqi_category_index];\n        const markerWrapper = d3.select(layerLines.current)\n          .append(\"g\")\n          .attr(\n            \"transform\",\n            \"translate(\" +\n            xAxis(mostRecentData.timestamp) +\n            \",\" +\n            yAxis(mostRecentData.aqi) +\n            \")\"\n          )\n          .attr(\"fill\",\n            sensorData.current?.sensor_status === SensorStatus.active\n              ? aqiObject.lightThemeColor\n              : CustomThemes.universal.palette.inactiveSensor)\n          ;\n\n        sensorData.current?.sensor_status === SensorStatus.active &&\n          markerWrapper.append(\"circle\")\n            .attr(\"cx\", 0)\n            .attr(\"cy\", 0)\n            .attr(\"filter\", \"brightness(0.5)\")\n            .attr(\"class\", \"pulse-ring\")\n            .attr(\"r\", 2.5 * dotRadius);\n\n        markerWrapper.append(\"circle\")\n          .attr(\"cx\", 0)\n          .attr(\"cy\", 0)\n          .attr(\"stroke\", \"#666\")\n          .attr(\"class\", sensorData.current?.sensor_status === SensorStatus.active && \"pulse-dot\")\n          .attr(\"r\", dotRadius);\n\n        markerWrapper.append(\"text\")\n          .attr(\"class\", \"location-label\")\n          .attr(\"x\", dotRadius * 1.5)\n          .attr(\"y\", 0)\n          .attr(\"fill\", \"black\")\n          .attr(\"alignment-baseline\", \"middle\")\n          .attr(\"text-anchor\", \"left\")\n          .attr(\"font-size\", font_size / 3)\n          .text(capitalizeFirstCharacter(sensorData.sensor?.location_short));\n\n        const locationLabels = document.getElementsByClassName(\"location-label\");\n        for (let i = 1; i < locationLabels.length; i++) {\n          const locationLabel_1 = locationLabels[i - 1];\n          const locationLabel_2 = locationLabels[i];\n          const overlapped = areDOMOverlapped(locationLabel_1.getBoundingClientRect(), locationLabel_2.getBoundingClientRect());\n\n          if (overlapped !== 0) {\n            locationLabel_1.setAttribute(\"y\", overlapped * dotRadius);\n            locationLabel_2.setAttribute(\"y\", - overlapped * dotRadius);\n          }\n        }\n      }\n    });\n\n  }, [data])\n\n  return (\n    <Box\n      sx={{\n        '& .pulse-ring': {\n          animation: 'pulse-ring 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes pulse-ring': {\n            '0%': {\n              transform: 'scale(0.2)'\n            },\n            '80%': {},\n            '100%': {\n              opacity: 0\n            }\n          }\n        },\n        '& .pulse-dot': {\n          animation: 'pulse-dot 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes pulse-dot': {\n            '0%': {\n              transform: 'scale(0.5)'\n            },\n            '50%': {\n              transform: 'scale(1)',\n              filter: 'brightness(1.2) contrast(1.2) saturate(1.2)'\n            },\n            '100%': {\n              transform: 'scale(0.5)'\n            }\n          }\n        }\n      }}\n      width=\"100%\"\n      height=\"100%\"\n    >\n      <svg\n        id=\"recent-historical-graph\"\n        width=\"100%\"\n        height=\"100%\"\n        ref={graphContainer}\n      >\n        <g ref={layerBackground} />\n        <g ref={layerXaxisWrapper} />\n        <g ref={layerTexts} />\n        <g ref={layerLines} />\n      </svg>\n    </Box>\n\n  );\n}\n\nexport default RecentHistoricalGraph;","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useContext } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { UserContext } from '../../ContextProviders/UserContext';\n\nimport { Box, Grid, Typography, Stack, List, ListItem, ListItemText } from '@mui/material';\n\nimport CITIESlogoLinkToHome from '../../Components/Header/CITIESlogoLinkToHome';\n\nimport { SensorStatus, getDomainName, getUrlAfterScreen } from './ScreenUtils';\nimport { TemperatureUnits } from \"./TemperatureUtils\";\n\nimport RecentHistoricalGraph from './RecentHistoricalGraph';\n\nimport AQIdatabase from '../../Utils/AirQualityIndexHelper';\n\nimport CustomThemes from '../../Themes/CustomThemes';\n\nimport QRCode from \"react-qr-code\";\n\nimport CurrentAQIGrid from '../../Components/CurrentAQIGrid';\nimport { EndPoints, fetchAndProcessCurrentSensorsData, getApiUrl } from '../../Utils/ApiUtils';\n\nconst Screen = ({ title, temperatureUnitPreference }) => {\n  const { user } = useContext(UserContext);\n  const navigate = useNavigate();\n\n  // useEffect(() => {\n  //   if (user.checkedAuthentication === true && user.authenticated === false) {\n  //     navigate('/login');\n  //   }\n  // }, [user])\n\n  // Update the page's title\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n\n  const [isLayoutReversed, setIsLayoutReversed] = useState();\n\n  const [data, setData] = useState({});\n\n  // Tweak the layout of the screen to prevent burn-in\n  useEffect(() => {\n    // Helper function to change layout of the screen based on current's month\n    // (arrange the left and right sections of the screen)\n    // to mitigate burn-in if the same static image is displayed over a long period of time\n    function returnIsLayoutReversed() {\n      let months = [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1]; // 12 months of a year, change the layout every two months\n      let now = new Date();\n      let thisMonthIndex = now.getMonth(); // get the index of this Month (0-11)\n      // Return a boolean value if the layout should be reversed\n      return (months[thisMonthIndex] !== 0);\n    }\n\n    setIsLayoutReversed(returnIsLayoutReversed());\n\n    // Set up an interval to call the function every day\n    const oneDayInMilliseconds = 24 * 60 * 60 * 1000;\n    const intervalId = setInterval(() => {\n      setIsLayoutReversed(returnIsLayoutReversed());\n    }, oneDayInMilliseconds);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  // Fetch air quality data from database\n  useEffect(() => {\n    const url = getApiUrl({ endpoint: EndPoints.screen });\n    if (!url) return;\n\n    fetchAndProcessCurrentSensorsData(url)\n      .then((data) => {\n        setData(data)\n      })\n      .catch((error) => {\n        console.log(error);\n        // Check if the error indicates that authentication is required\n        navigate('/login');\n      });\n\n    // Create an interval that fetch new data every 5 minute\n    const fetchInterval = 5 * 60 * 1000; // 5min\n    const intervalId = setInterval(() => {\n      fetchAndProcessCurrentSensorsData(url)\n        .then((data) => {\n          setData(data)\n        })\n        .catch((error) => console.log(error))\n    },\n      fetchInterval);\n    // Clean up the interval when the component unmounts\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  const AirQualityComparison = () => {\n    // Only display air quality comparison if every sensor is currently active\n    if (!Object.values(data).every((sensorData) => sensorData.current?.sensor_status === SensorStatus.active)) return null;\n\n    let outdoorsAQI, indoorsAQI;\n    // Don't display comparison if outdoor air is good\n    for (let i = 0; i < Object.values(data).length; i++) {\n      const sensorData = Object.values(data)[i];\n      if (sensorData.sensor?.location_type === \"outdoors\") {\n        outdoorsAQI = sensorData.current.aqi;\n        if (outdoorsAQI <= AQIdatabase[0].aqiUS.high) return null;\n      }\n      else indoorsAQI = sensorData.current.aqi;\n    }\n\n    const ratio = outdoorsAQI / indoorsAQI;\n    let comparison;\n    if (ratio >= 2) comparison = `${parseFloat(ratio).toFixed(1)} times`;\n    else if (ratio > 1.2) comparison = `${Math.round(100 * ((outdoorsAQI - indoorsAQI) / indoorsAQI))}%`;\n    else return null;\n\n    return (\n      <ListItem>\n        <ListItemText primary={\n          <>Indoors air is\n            <Typography\n              component=\"span\"\n              color={`${AQIdatabase[0].lightThemeColor} !important`}\n            >\n              {` ${comparison} `}\n            </Typography>\n            better than outdoors</>\n        } />\n      </ListItem>\n    );\n  }\n\n  return (\n    <Grid\n      container\n      alignContent=\"stretch\"\n      alignItems=\"stretch\"\n      height=\"100vh\"\n      sx={{\n        overflow: 'hidden',\n        background: \"white\",\n        '& *': {\n          fontWeight: '500 !important'\n        },\n        '& .condensedFont': {\n          fontFamily: 'IBM Plex Sans Condensed, sans-serif !important',\n          '& *': {\n            fontFamily: 'IBM Plex Sans Condensed, sans-serif !important'\n          }\n        },\n        '& .flashingRed': {\n          '& .MuiTypography-root ': {\n            color: `${AQIdatabase[3].lightThemeColor} !important`,\n            opacity: 0.8\n          },\n          color: `${AQIdatabase[3].lightThemeColor} !important`,\n          animation: 'flashingRed 3s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes flashingRed': {\n            '0%': {\n              opacity: 1\n            },\n            '50%': {\n              opacity: 0.5\n            },\n            '100%': {\n              opacity: 1\n            }\n          }\n        }\n      }}\n    >\n      <Grid\n        item\n        xs={6}\n        sx={{\n          py: 3,\n          px: 2,\n          order: isLayoutReversed ? 1 : 0,\n          background: '#212529'\n        }}\n      >\n        <Stack\n          direction=\"column\"\n          justifyContent=\"space-between\"\n          height=\"100%\"\n          textAlign=\"center\"\n        >\n          <Box>\n            <Typography variant=\"h4\" fontWeight=\"500\" color=\"white\">\n              PM2.5 AIR QUALITY INDEX\n            </Typography>\n            <Typography variant=\"h5\" className='condensedFont' color={CustomThemes.universal.palette.inactiveSensor}>\n              Particulate Matter &lt; 2.5μm\n            </Typography>\n          </Box>\n\n          <Grid\n            container\n            justifyContent=\"space-around\"\n          >\n            <CurrentAQIGrid currentSensorsData={data} temperatureUnitPreference={temperatureUnitPreference} />\n          </Grid>\n\n          <List className='condensedFont'\n            sx={{\n              listStyleType: 'disclosure-closed',\n              '& .MuiTypography-root': {\n                fontSize: '1.5rem',\n              },\n              '& .MuiListItem-root': {\n                display: 'list-item',\n                ml: 3,\n                p: 0,\n                pr: 3,\n              },\n              '& .MuiTypography-root, .MuiListItem-root': {\n                color: CustomThemes.universal.palette.inactiveSensor\n              }\n            }}>\n            <AirQualityComparison />\n            {\n              Object.entries(data).map(([key, sensorData]) => (\n                sensorData.current?.healthSuggestion &&\n                <ListItem\n                  key={key}\n                  className={sensorData.current?.aqi >= AQIdatabase[2].aqiUS.low && 'flashingRed'}\n                >\n                  <ListItemText\n                    primary={sensorData.current?.healthSuggestion}\n                  />\n                </ListItem>\n              ))\n            }\n          </List>\n        </Stack>\n      </Grid>\n\n      <Grid item xs={6} sx={{ order: isLayoutReversed ? 0 : 1 }}>\n        <Box\n          sx={{\n            position: 'absolute',\n            top: 0,\n            right: !isLayoutReversed && 0,\n            left: isLayoutReversed && 0,\n            width: '5vw',\n            height: '5vw',\n            m: 1\n          }}\n        >\n          <CITIESlogoLinkToHome />\n        </Box>\n        <Grid\n          container\n          alignContent=\"space-between\"\n          justifyContent=\"center\"\n          height=\"100%\"\n          textAlign=\"center\"\n        >\n          <Grid item xs={12} sx={{ pt: 3, px: 2 }}>\n            <Typography variant=\"h4\" fontWeight=\"500\" sx={{ color: 'black' }}>\n              AN INITIATIVE BY CITIESair\n            </Typography>\n          </Grid>\n          <Grid item xs={2}>\n            <Box height=\"auto\" width=\"100%\">\n              <QRCode\n                size={256}\n                style={{ height: \"auto\", maxWidth: \"100%\", width: \"100%\" }}\n                value={\n                  `${getDomainName(document.location.href)}?source=${getUrlAfterScreen(document.location.href)}`\n                } viewBox={`0 0 256 256`}\n              />\n            </Box>\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            height=\"70%\"\n            className='condensedFont'\n            sx={{ '& *': { fontWeight: '600 !important' } }}\n          >\n            <RecentHistoricalGraph data={data} />\n          </Grid>\n        </Grid>\n\n      </Grid>\n    </Grid >\n  );\n};\n\nexport default Screen;\n"],"names":["displayLastUpdateAndSensorStatus","sensorData","isScreen","current","sensor_status","SensorStatus","variant","sx","mt","fontWeight","color","AQIdatabase","mr","timestamp","sensor","last_seen","getFormattedElapsedTimeFromNow","props","currentSensorsData","temperatureUnitPreference","container","justifyContent","verticalAlign","fontSize","fontFamily","Object","entries","map","index","numOfItems","key","item","keys","length","xs","Math","max","sm","lg","min","CustomThemes","className","location_long","location_short","lineHeight","aqi","category","getFormattedTemperature","rawTemp","temperature","currentUnit","TemperatureUnits","returnUnit","transform","rel_humidity","round","includes","location_type","calculateHeatIndex","returnSensorStatus","direction","alignItems","width","my","height","xAxis","yAxis","data","useState","graphContainer","useRef","layerBackground","layerTexts","layerXaxisWrapper","layerLines","maxAQItoDisplay","margin","lineGenerator","d3","x","d","y","curve","useEffect","clientWidth","clientHeight","selectAll","remove","attr","forEach","historical","Date","convertToAQI","Array","isArray","ceil","aqiUS","low","high","xAxisMax","xAxisMin","setHours","getHours","domain","rangeRound","range","font_size","floor","marginText","i","aqiRange","append","lightThemeColor","text","formatHour","call","tickSize","ticks","tickFormat","select","datum","mostRecentData","aqiObject","aqi_category_index","markerWrapper","dotRadius","capitalizeFirstCharacter","locationLabels","document","getElementsByClassName","locationLabel_1","locationLabel_2","overlapped","areDOMOverlapped","getBoundingClientRect","setAttribute","Box","animation","opacity","filter","id","ref","title","navigate","useContext","UserContext","user","useNavigate","isLayoutReversed","setIsLayoutReversed","setData","returnIsLayoutReversed","getMonth","intervalId","setInterval","clearInterval","url","getApiUrl","endpoint","EndPoints","fetchAndProcessCurrentSensorsData","then","catch","error","console","log","AirQualityComparison","values","every","outdoorsAQI","indoorsAQI","comparison","ratio","parseFloat","toFixed","ListItem","ListItemText","primary","Typography","component","Grid","alignContent","overflow","background","py","px","order","Stack","textAlign","CurrentAQIGrid","List","listStyleType","display","ml","p","pr","healthSuggestion","position","top","right","left","m","CITIESlogoLinkToHome","pt","size","style","maxWidth","value","getDomainName","location","href","getUrlAfterScreen","viewBox"],"sourceRoot":""}