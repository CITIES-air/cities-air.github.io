{"version":3,"file":"static/js/270.76139122.chunk.js","mappings":"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","sources":["Components/CurrentAQIGrid.jsx","Components/UppercaseTitle.jsx","Graphs/ChartComponent.jsx","Graphs/ChartSubstituteComponents/AirQualityIndexTable.jsx","Graphs/ChartSubstituteComponents/ChartSubstituteComponentLoader.jsx","Graphs/GoogleChartHelper.jsx","Graphs/HeatMap.jsx","Graphs/Subchart/GoogleChartStyleWrapper.jsx","Graphs/Subchart/SeriesSelector.jsx","Graphs/Subchart/SubChart.jsx","Components/AirQualityHelper.jsx","Components/DatasetDownload/DatasetCalendar.jsx","Components/DatasetDownload/DatasetDownloadDialog.jsx","Components/ScreenDialog.jsx","Pages/Dashboard/SchoolSelector.jsx","sample.jsx","Pages/Project/Project.jsx","Pages/Dashboard/Dashboard.jsx","Pages/Screen/ScreenUtils.jsx","Utils/AirQualityIndexCalculator.jsx","Utils/AirQualityIndexHelper.jsx","Utils/ApiUtils.jsx","Graphs/ChartSubstituteComponents|lazy|/^/.//.*$/|groupOptions: {}|namespace object"],"sourcesContent":["// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect } from 'react';\n\nimport { Box, Grid, Typography } from '@mui/material';\nimport ThermostatIcon from '@mui/icons-material/Thermostat';\nimport WaterDropIcon from '@mui/icons-material/WaterDrop';\nimport ErrorIcon from '@mui/icons-material/Error';\n\nimport { returnSensorStatus, SensorStatus, getFormattedElapsedTimeFromNow } from '../Pages/Screen/ScreenUtils';\nimport { TemperatureUnits, getFormattedTemperature, calculateHeatIndex } from \"../Pages/Screen/TemperatureUtils\";\n\nimport AQIdatabase from '../Utils/AirQualityIndexHelper';\n\nimport CustomThemes from '../Themes/CustomThemes';\n\nconst CurrentAQIGrid = (props) => {\n\n  const { currentData, temperatureUnitPreference, isScreen = true, orderOfItems } = props;\n\n  const getGridItemSize = (numOfItems) => {\n    return {\n      xs: Math.max(12 / numOfItems, 6),\n      sm: Math.max(12 / numOfItems, 4),\n      lg: isScreen ? (12 / numOfItems) : Math.min(5, Math.max(12 / numOfItems, 3))\n    }\n  }\n\n  return (\n    <Grid\n      container\n      justifyContent=\"center\"\n      sx={{\n        '& .MuiSvgIcon-root': {\n          verticalAlign: 'sub',\n          fontSize: isScreen ? null : '1rem'\n        },\n        '& *': {\n          fontWeight: '500'\n        },\n        '& .condensedFont': {\n          fontFamily: 'IBM Plex Sans Condensed, sans-serif !important',\n          '& *': {\n            fontFamily: 'IBM Plex Sans Condensed, sans-serif !important'\n          }\n        }\n      }}\n    >\n      {\n        Object.entries(currentData).map(([key, sensorData], index) => (\n          <Grid\n            item\n            order={orderOfItems && orderOfItems[index]}\n            key={key}\n            {...getGridItemSize(Object.keys(currentData).length)}\n            sx={\n              sensorData.current?.sensor_status !== SensorStatus.active &&\n              { '& *': { color: `${CustomThemes.universal.palette.inactiveSensor}` } }\n            }\n          >\n            <Box sx={{ '& *': { color: sensorData.current?.color } }}>\n              <Typography variant={isScreen ? \"h4\" : 'h5'} fontWeight=\"500\" className='condensedFont'>\n                {sensorData.sensor?.location_long || sensorData.sensor?.location_short || 'No Location Name'}\n              </Typography>\n              <Typography variant={isScreen ? \"h1\" : 'h2'} fontWeight=\"500\" lineHeight={isScreen ? 0.8 : 0.9}>\n                {sensorData.current?.aqi || '--'}\n              </Typography>\n              <Typography variant={isScreen ? \"h4\" : 'h5'} fontWeight=\"500\" className='condensedFont'>\n                {sensorData.current?.category || '--'}\n              </Typography>\n            </Box>\n\n            <Box sx={{\n              '& *': {\n                color:\n                  isScreen ? (\n                    sensorData.current?.sensor_status === SensorStatus.active ?\n                      '#c8dcff' : CustomThemes.universal.palette.inactiveSensor\n                  )\n                    : 'text.secondary'\n              }, mt: isScreen ? 2 : 1\n            }} className='condensedFont'>\n              <Typography variant={isScreen ? \"h6\" : 'body1'}>\n                <ThermostatIcon />\n                {\n                  getFormattedTemperature({\n                    rawTemp: sensorData.current?.temperature || \"--\",\n                    currentUnit: TemperatureUnits.celsius,\n                    returnUnit: temperatureUnitPreference\n                  })\n                }\n                &nbsp;&nbsp;-&nbsp;\n                <WaterDropIcon sx={{ transform: 'scaleX(0.9)' }} />\n                {sensorData.current?.rel_humidity ? Math.round(sensorData.current?.rel_humidity) : \"--\"}%\n              </Typography>\n              {\n                // Show heat index for selected location types\n                ['outdoors', 'indoors_gym'].includes(sensorData.sensor?.location_type) &&\n                <Typography variant={isScreen ? \"body1\" : 'body2'} sx={{ fontWeight: '300 !important' }}>\n                  {calculateHeatIndex({\n                    rawTemp: sensorData.current?.temperature,\n                    currentUnit: TemperatureUnits.celsius,\n                    rel_humidity: sensorData.current?.rel_humidity,\n                    returnUnit: temperatureUnitPreference\n                  })}\n                </Typography>\n              }\n              {\n                displayLastUpdateAndSensorStatus({ sensorData, isScreen })\n              }\n            </Box>\n\n            {\n              // Display outdoor-indoor comparison if both sensors are active\n              sensorData.sensor_status !== SensorStatus.active &&\n              <Typography variant={isScreen ? \"h6\" : 'body1'} className=\"condensedFont\">\n                {returnSensorStatus(sensorData)}\n              </Typography>\n            }\n          </Grid>\n        ))\n      }\n    </Grid>\n  );\n};\n\nconst displayLastUpdateAndSensorStatus = ({ sensorData, isScreen }) => {\n  if (isScreen && sensorData.current.sensor_status === SensorStatus.active) return null;\n  else\n    return (\n      <Typography\n        variant={isScreen ? 'h6' : 'caption'}\n        sx={{\n          mt: 0,\n          fontWeight: isScreen && '500 !important'\n        }}\n      >\n        {\n          sensorData.current?.sensor_status !== SensorStatus.active\n          &&\n          <>\n            <ErrorIcon\n              sx={{\n                '& *': {\n                  color: `${AQIdatabase[3].lightThemeColor} !important`\n                },\n                mr: 0.5\n              }} />\n            Offline.&nbsp;\n          </>\n        }\n        Last update:\n        {sensorData.current?.timestamp\n          ? ` ${getFormattedElapsedTimeFromNow(sensorData.current.timestamp)} ago`\n          : '--'}\n      </Typography>\n    )\n}\n\nexport default CurrentAQIGrid;\n","import Typography from '@mui/material/Typography';\n\nexport default function UppercaseTitle({ text }) {\n  return (\n    <Typography\n      variant=\"h4\"\n      color=\"text.primary\"\n      sx={{\n        fontWeight: 'medium',\n        display: 'inline-block',\n        textTransform: 'uppercase',\n        pb: 3,\n        lineHeight: 1\n      }}\n    >\n      {text}\n    </Typography>\n  );\n}\n","import { useState, useEffect, useContext } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Box, Tabs, Tab, useMediaQuery } from '@mui/material/';\nimport { TabContext } from '../ContextProviders/TabContext';\n\nimport SubChart from './Subchart/SubChart';\n\nconst debounceMilliseconds = 100;\n\nconst ChartStyleWrapper = styled(Box)(({ theme }) => ({\n  // CSS for dark theme only\n  ...(theme.palette.mode === 'dark' && {\n    // De-saturate a bit\n    filter: 'saturate(0.85)',\n    // Invert iframe\n    '& .heat-map-iframe': {\n      filter: 'invert(0.848) hue-rotate(180deg)',\n    }\n  }),\n  // Special CSS for historical-snapshot-aqi chart\n  '& .historical-snapshot-aqi svg [clip-path*=\"ABSTRACT_RENDERER\"] > g:nth-of-type(1), .historical-snapshot-aqi [id*=\"googlechart-control\"] svg [clip-path*=\"ABSTRACT_RENDERER\"] > g:nth-of-type(2)': {\n    opacity: 0.6\n  },\n  // Center Calendar chart in wrapper\n  '& .Calendar [dir]:not(:empty)': {\n    margin: 'auto'\n  },\n\n  // add horizontal scrollbar to Calendar charts\n  '& .Calendar > div > div:last-of-type > div': {\n    overflowX: 'auto',\n    overflowY: 'hidden',\n    scrollbarGutter: 'stable'\n  }\n}));\n\nconst StyledTabs = styled(Tabs)(({ theme }) => ({\n  '& .MuiTabScrollButton-root': {\n    color: theme.palette.text.primary\n  },\n  '& .MuiTab-root': {\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '0.75rem',\n      paddingLeft: theme.spacing(1),\n      paddingRight: theme.spacing(1)\n    },\n  }\n}));\n\n// eslint-disable-next-line max-len\nfunction ChartComponent({ chartData: passedChartData, chartHeight: passedChartHeight, isHomepage, dataArray: passedDataArray }) {\n  const isSmallWidth = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n\n  const [isPortrait, setIsPortrait] = useState(window.matchMedia('(orientation: portrait)').matches);\n  const [windowSize, setWindowSize] = useState([\n    window.innerWidth,\n    window.innerHeight,\n  ]);\n\n  let chartMaxHeight;\n  let chartHeight = passedChartHeight;\n  let chartData = passedChartData;\n\n  // use tab context\n  const [_, setTab] = useContext(TabContext);\n\n  // Props for tab panels (multiple data visualizations in the same chart area,\n  // navigate with tab panels)\n  const [indexValue, setIndexValue] = useState(0); // start with the first elem\n\n  // eventListener for window resize\n  // redraw \"Calendar\" charts and charts with a time filter upon window resize.\n  // Filter & Calendar charts are not automatically respnsive, so we have to redraw them.\n  // redraw other charts when device orientation changes\n  useEffect(() => {\n    let timeoutID = null;\n\n    const handleWindowResize = () => {\n      clearTimeout(timeoutID);\n\n      // debounce before triggering re-render. as user is resizing window, the state could\n      // change multiple times causing many expensive rerenders. we try to rerender at the\n      // end of the resize.\n      timeoutID = setTimeout(() => {\n        // Redraw all charts on device orientation change, as the chartWrapperHeights\n        // have changed.\n        setIsPortrait(window.matchMedia('(orientation: portrait)').matches);\n\n        // Redraw all charts on window resized\n        setWindowSize([window.innerWidth, window.innerHeight]);\n      }, debounceMilliseconds);\n    };\n\n    // listen to window resize events\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, [chartData]);\n\n  if (chartData.chartType !== 'Calendar' && !chartHeight) {\n    chartHeight = isPortrait ? '80vw' : '35vw';\n    chartMaxHeight = isPortrait ? '800px' : '500px';\n  }\n\n  // Assign the subcharts array for HeatMap based on the device orientation\n  if (chartData.chartType === 'HeatMap') {\n    chartData = {\n      ...chartData,\n      ...chartData[isPortrait ? 'subchartsPortrait' : 'subchartsLandscape'],\n    };\n  }\n\n  let renderedComponent;\n\n  // Display multiple subcharts\n  // but not in homepage\n  if (chartData.subcharts) {\n    // Handle tab change\n    const handleChange = (__, newValue) => {\n      // use setTab to copy the tab object and update the subIndex\n      setTab((prevState) => ({ ...prevState, [chartData.chartIndex]: newValue }));\n      setIndexValue(newValue);\n    };\n\n    // If the chart in in homepage, just display the first subChart\n    if (isHomepage) {\n      renderedComponent = (\n        <SubChart\n          dataArray={passedDataArray}\n          chartData={chartData}\n          subchartIndex={0}\n          isPortrait={isPortrait}\n          isHomepage={isHomepage}\n          windowSize={windowSize}\n          height={chartData.height ? chartData.height : chartHeight}\n          maxHeight={\n            chartData.chartType === 'HeatMap' ? '' : chartMaxHeight\n          }\n        />\n      );\n    } else {\n      renderedComponent = (\n        <>\n          <StyledTabs\n            value={indexValue}\n            onChange={handleChange}\n            variant={isSmallWidth ? 'fullWidth' : 'standard'}\n          >\n            {chartData.subcharts.map((element, index) => (\n              <Tab\n                key={index}\n                value={index}\n                label={chartData.subcharts[index].subchartTitle}\n              />\n            ))}\n          </StyledTabs>\n          <Box position=\"relative\">\n            {chartData.subcharts.map((__, index) => (\n              <Box\n                key={index}\n                width=\"100%\"\n                height=\"100%\"\n                role=\"tabpanel\"\n                sx={{\n                  transition: '0.35s',\n                  position: (index === 0) ? '' : 'absolute',\n                  opacity: indexValue === index ? '1' : '0',\n                  pointerEvents: indexValue === index ? 'auto' : 'none',\n                  top: (index === 0) ? '' : 0\n                }}\n              >\n                <SubChart\n                  dataArray={passedDataArray}\n                  chartData={chartData}\n                  subchartIndex={index}\n                  isPortrait={isPortrait}\n                  isHomepage={isHomepage}\n                  windowSize={windowSize}\n                  height={chartData.height ? chartData.height : chartHeight}\n                  maxHeight={\n                    ['HeatMap', 'Calendar'].includes(chartData.chartType)\n                      ? ''\n                      : chartMaxHeight\n                  }\n                />\n              </Box>\n            ))}\n          </Box>\n        </>\n      );\n    }\n  } else {\n    // If there is only one single chart\n    renderedComponent = (\n      <SubChart\n        dataArray={passedDataArray}\n        chartData={chartData}\n        isPortrait={isPortrait}\n        isHomepage={isHomepage}\n        windowSize={windowSize}\n        height={chartData.height ? chartData.height : chartHeight}\n        maxHeight={\n          chartData.chartType === 'HeatMap' ? '' : chartMaxHeight\n        }\n      />\n    );\n  }\n\n  return (\n    <ChartStyleWrapper height=\"100%\">\n      {renderedComponent}\n    </ChartStyleWrapper>\n  );\n}\n\nexport default ChartComponent;\n","import { Box, Table, TableBody, TableCell, TableHead, TableRow, styled } from '@mui/material';\nimport parse from 'html-react-parser';\nimport { replacePlainHTMLWithMuiComponents } from '../../Utils/Utils';\nimport ChartComponent from '../ChartComponent';\nimport AQIdatabase from '../../Utils/AirQualityIndexHelper';\nimport ThemePreferences from '../../Themes/ThemePreferences';\n\nexport const StyledTable = styled(Table)(({ theme, isTiny }) => ({\n  minWidth: isTiny || 700,\n  '& th, td': {\n    fontSize: isTiny ? '0.625rem' : '0.6875rem',\n    color: theme.palette.text.secondary,\n    [theme.breakpoints.down('sm')]: {\n      fontSize: isTiny ? '0.5rem' : '0.6875rem',\n    },\n  },\n  '& th': {\n    fontWeight: 500,\n    color: theme.palette.text.primary,\n    lineHeight: '1rem'\n  }\n}));\n\nfunction AirQualityIndexTable(props) {\n  const { isTiny, hideAQIDescription, themePreference } = props;\n\n  return (\n    <>\n      <Box overflow=\"auto\">\n        <StyledTable size=\"small\" isTiny={isTiny}>\n          <TableHead>\n            <TableRow>\n              <TableCell sx={{ pr: 0 }}>\n                <Box sx={{ width: '1em', height: '1em' }} />\n              </TableCell>\n              <TableCell sx={{ pl: 1 }}>\n                Category\n              </TableCell>\n              <TableCell align=\"right\">US AQI</TableCell>\n              <TableCell align=\"right\">\n                PM2.5 Concentration\n                (µg/m\n                <sup>3</sup>\n                )\n              </TableCell>\n              {!hideAQIDescription && <TableCell align=\"left\">Description</TableCell>}\n              {!hideAQIDescription && <TableCell align=\"left\">CITIESair&apos; Suggested Actions</TableCell>}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {AQIdatabase.map((element, index) => (\n              <TableRow\n                key={index}\n                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n              >\n                <TableCell sx={{ pr: 0 }}>\n                  <Box sx={{ width: '1em', height: '1em', backgroundColor: themePreference === ThemePreferences.light ? element.lightThemeColor : element.darkThemeColor }} />\n                </TableCell>\n                <TableCell sx={{ pl: 1 }}>\n                  {element.name}\n                </TableCell>\n                <TableCell align=\"right\">\n                  {element.aqiUS.low}\n                  &nbsp;\n                  -\n                  &nbsp;\n                  {element.aqiUS.high}\n                </TableCell>\n                <TableCell align=\"right\">\n                  {element.rawPM2_5.low}\n                  &nbsp;\n                  -\n                  &nbsp;\n                  {element.rawPM2_5.high}\n                </TableCell>\n                {!hideAQIDescription && <TableCell align=\"left\">{element.description}</TableCell>}\n                {!hideAQIDescription\n                  && (\n                    <TableCell align=\"left\">\n                      {\n                        parse(element.healthSuggestions.outdoors, {\n                          replace: replacePlainHTMLWithMuiComponents,\n                        })\n                      }\n                    </TableCell>\n                  )}\n              </TableRow>\n            ))}\n          </TableBody>\n        </StyledTable>\n      </Box>\n      {/* {!hideAQIDescription\n        && (\n          <ChartComponent\n            chartHeight=\"4rem\"\n            chartData={\n              {\n                sheetId: '157f6vu47RBEvnBnW24jGI7cz-ov1aSBUFPdkb5sDKDc',\n                gid: 1958405288,\n                query: 'SELECT * WHERE A = \"US AQI\"',\n                headers: 1,\n                chartType: 'BarChart',\n                columns: [0, 1, 3, 5, 7, 9, 11],\n                options: {\n                  legend: { position: 'none' },\n                  enableInteractivity: false,\n                  hAxis: {\n                    ticks: [0, 50, 100, 150, 200, 300, 500]\n                  },\n                  chartArea:\n                  {\n                    width: { portrait: '98%', landscape: '50%' },\n                    height: { portrait: '20%', landscape: '30%' }\n                  },\n                  isStacked: true,\n                  colors: 'aqi',\n                  bar: { groupWidth: '100%' }\n                }\n              }\n            }\n          />\n        )} */}\n    </>\n\n  );\n}\n\nexport default AirQualityIndexTable;\n","import { lazy, Suspense } from 'react';\nimport LoadingAnimation from '../../Components/LoadingAnimation';\n\nexport default function ChartSubstituteComponentLoader({ chartSubstituteComponentName }) {\n  return (\n    <Suspense fallback={<LoadingAnimation />}>\n      {(() => {\n        const ChartSubstituteComponent = lazy(\n          () => import(`./${chartSubstituteComponentName}`)\n        );\n        return <ChartSubstituteComponent />;\n      })()}\n    </Suspense>\n  );\n}\n","/* eslint-disable */\n\nexport const ChartControlType = {\n  CategoryFilter: { position: 'top', stackDirection: 'column' },\n  DateRangeFilter: { position: 'bottom', stackDirection: 'column-reverse' },\n  ChartRangeFilter: { position: 'bottom', stackDirection: 'column-reverse' },\n  NumberRangeFilter: { position: 'top', stackDirection: 'column' }\n}\n// Async function to fetch data from sheet using Google Visualization query language\nexport const fetchDataFromSheet = ({ chartData, subchartIndex }) => {\n  const urlParams =\n    subchartIndex == null\n      ? {\n        headers: chartData.headers || 1,\n        query: chartData.query,\n        gid: chartData.gid,\n      }\n      : {\n        headers:\n          chartData.headers\n          || chartData.subcharts[subchartIndex].headers\n          || null,\n        query:\n          chartData.query\n          || chartData.subcharts[subchartIndex].query\n          || null,\n        gid:\n          chartData.gid\n          || chartData.subcharts[subchartIndex].gid\n          || null,\n      };\n\n  const url = `https://docs.google.com/spreadsheets/d/${chartData.sheetId}/gviz/tq?gid=${urlParams.gid}&headers=${urlParams.headers}&tqx${urlParams.query ? `&tq=${encodeURIComponent(urlParams.query)}` : ''}`;\n  const query = new google.visualization.Query(url);\n\n  return new Promise((resolve, reject) => {\n    query.send(response => {\n      if (response.isError()) {\n        reject(response.getMessage() + ' ' + response.getDetailedMessage());\n      } else {\n        resolve(response);\n      }\n    });\n  });\n};\n\n// Function to generate a random ID for the google chart container\nexport const generateRandomID = () => {\n  return Math.random().toString(36).substr(2, 9); // Generates a random string of length 9\n}\n\n// -------- Chart options --------\n\nconst hideAnnotations = {\n  stem: {\n    length: 0,\n  },\n  textStyle: {\n    opacity: 0,\n  },\n  boxStyle: null,\n};\n\nconst returnResponsiveFontSizeInPixels = ({ isPortrait, isSmaller }) => {\n  return (\n    isSmaller ? (isPortrait ? 6 : 8) : (isPortrait ? 8 : 10)\n  );\n}\n\nexport const returnGenericOptions = (props) => {\n  const { chartData, subchartIndex, isPortrait, isHomepage, theme } = props;\n\n  // Define some shared styling rules for the chart\n  const axisTitleTextStyle = {\n    italic: false,\n    bold: true,\n    color: theme.palette.chart.axisTitle,\n    fontSize: returnResponsiveFontSizeInPixels({ isPortrait })\n  };\n  const axisTextStyle = {\n    color: theme.palette.chart.axisText,\n    fontSize: returnResponsiveFontSizeInPixels({ isPortrait })\n  };\n\n  // ---- Formulate the options for this specific chart:\n  // 1. Populate first with subchart's options (if any)\n  let options = chartData.subcharts?.[subchartIndex].options\n    ? { ...chartData.subcharts[subchartIndex].options }\n    : {};\n\n  // 2. Append own chart's options and then populate with universal options for all charts\n  options = {\n    ...options,\n    ...chartData.options,\n    theme: 'material',\n    curveType: options.curveType || chartData.options?.curveType || 'function',\n    crosshair: { orientation: 'both', trigger: 'focus', opacity: 0.5 },\n    backgroundColor: { fill: 'transparent' },\n    chartArea: {\n      ...chartData.options?.chartArea,\n      width: isPortrait ? (chartData.options?.chartArea?.width?.portrait || '80%') : (chartData.options?.chartArea?.width?.landscape || '75%'),\n      height: isPortrait ? (chartData.options?.chartArea?.height?.portrait || '60%') : (chartData.options?.chartArea?.height?.landscape || '70%'),\n    },\n    width: isPortrait ? (chartData.options?.width?.portrait || '100%') : (chartData.options?.width?.landscape || '100%'),\n    // if there is a filter, we make space for the chartFilter from the chart's height.\n    // value is divided in 2 because the calculation is applied twice due to\n    // how react-google-charts nest components\n    height: chartData.height || '100%',\n    tooltip: {\n      isHtml: true,\n      showColorCode: false\n    },\n    legend: {\n      alignment: isPortrait ? 'center' : 'start',\n      position:\n        chartData.options?.legend?.position\n        ?? (isPortrait ? 'top' : 'right'),\n      scrollArrows: {\n        activeColor: theme.palette.chart.axisTitle,\n        inactiveColor: theme.palette.text.secondary,\n      },\n      pagingTextStyle: {\n        fontSize: 10,\n        color: theme.palette.chart.axisTitle,\n        bold: true,\n      }\n    }\n  };\n\n  // 3. Append to vAxis and hAxis properties\n  options.vAxis = {\n    ...options.vAxis,\n    format: options.vAxis?.format ?? 'decimal',\n    title: options.vAxis?.title ?? '',\n    viewWindow: {\n      min: options.vAxis?.viewWindow?.min ?? 0,\n    },\n  };\n  options.hAxis = {\n    ...options.hAxis,\n    title: options.hAxis?.title ?? '',\n  };\n  // 3.1. If in portrait mode, slant the text of the hAxis\n  if (isPortrait) {\n    options.hAxis = {\n      ...options.hAxis,\n      slantedText: true,\n      slantedTextAngle: 30,\n    };\n  }\n\n  // 4. Override with custom colors:\n  // 4.1. Color scheme of all the series of this chart\n  if (typeof options.colors === 'string' || !options.colors) options.colors = theme.palette.chart.optionsColors[options.colors || 'multiColor'];\n  // 4.2. Individual color of a single serie (if given)\n  if (options.series) {\n    Object.values(options.series).forEach((_serie) => {\n      const serie = _serie;\n      if (serie.color === 'default') {\n        serie.color = theme.palette.primary.main;\n      }\n    });\n  }\n  // 4.3. Color of the trendline\n  if (options.trendlines) {\n    options.trendlines.forEach((_item) => {\n      const item = _item;\n      item.color = theme.palette.primary.main;\n    });\n  }\n  // 4.4. Color axis of the Calendar chart\n  if (options.colorAxis) {\n    switch (options.colorAxis.colors) {\n      case 'matchingColor':\n        options.colorAxis.colors = [\n          theme.palette.chart.colorAxisFirstColor,\n          theme.palette.chart.optionsColors.multiColor[options.colorAxis.colorIndex],\n        ];\n        break;\n      case 'default':\n        options.colorAxis.colors = [\n          theme.palette.chart.colorAxisFirstColor,\n          theme.palette.NYUpurple,\n        ];\n        break;\n      case 'aqi':\n        options.colorAxis = theme.palette.chart.aqiColorAxis;\n        break;\n      default:\n        break;\n    }\n  }\n  // 4.5. Colors of other elements of the chart (typographies and gridlines)\n  options.vAxis = {\n    ...options.vAxis,\n    titleTextStyle: axisTitleTextStyle,\n    textStyle: axisTextStyle,\n    gridlines: {\n      ...options.vAxis?.gridlines,\n      color: options.vAxis?.gridlines?.color || theme.palette.chart.gridlines\n    },\n    minorGridlines: { count: 0 },\n  };\n  options.hAxis = {\n    ...options.hAxis,\n    titleTextStyle: axisTitleTextStyle,\n    textStyle: axisTextStyle,\n    gridlines: {\n      ...options.hAxis?.gridlines,\n      color: options.hAxis?.gridlines?.color || theme.palette.chart.gridlines\n    },\n    minorGridlines: {\n      ...options.hAxis?.minorGridlines,\n      color: options.hAxis?.gridlines?.color || theme.palette.chart.gridlines,\n    },\n  };\n  options.legend = {\n    ...options.legend,\n    textStyle: axisTextStyle,\n  };\n  options.annotations = {\n    ...options.annotations,\n    highContrast: true,\n    textStyle: {\n      color: theme.palette.primary.contrastText,\n      fontSize: returnResponsiveFontSizeInPixels({ isPortrait, isSmaller: true }),\n      opacity: 0.8\n    },\n    stem: {\n      ...options.annotations?.stem,\n      color: theme.palette.chart.axisTitle,\n      thickness: 2\n    },\n    boxStyle: {\n      rx: theme.shape.borderRadius, // rounded corners\n      ry: theme.shape.borderRadius,\n      fill: theme.palette.chart.annotationBoxFill,\n      fillOpacity: 0.5\n    },\n  };\n\n  // 5. If the chart is displayed on the homepage, override the options with:\n  if (isHomepage) {\n    options = {\n      ...options,\n      chartArea: {\n        ...options.chartArea,\n        width: '80%',\n        height: '80%'\n      },\n      seriesSelector: false,\n      pointSize: 0,\n      enableInteractivity: false,\n      annotations: hideAnnotations,\n      legend: 'none',\n      vAxis: {\n        ...options.vAxis,\n        textPosition: 'none',\n        titleTextStyle: {\n          ...options.vAxis.titleTextStyle,\n          bold: false\n        },\n        gridlines: { color: 'transparent', count: 0 },\n        viewWindowMode: 'maximized'\n      },\n      hAxis: {\n        ...options.hAxis,\n        textPosition: 'none',\n        gridlines: { color: 'transparent', count: 0 },\n        titleTextStyle: {\n          ...options.hAxis.titleTextStyle,\n          bold: false\n        }\n      },\n    };\n  }\n\n  return options;\n}\n\nexport const returnCalendarChartOptions = (existingOptions) => {\n  const calendarDimensions = calculateCalendarDimensions({ cellSizeMin: 14, cellSizeMax: 18 });\n  return {\n    ...existingOptions,\n    width: calendarDimensions.chartWidth,\n    calendar: {\n      cellSize: calendarDimensions.cellSize,\n      yearLabel: {\n        fontSize: calendarDimensions.yearLabelFontSize\n      }\n    },\n    noDataPattern: {\n      backgroundColor: 'none',\n      color: 'none',\n    },\n  }\n}\n\nexport const returnChartControlUI = (props) => {\n  const { chartControl, mainChartData, mainChartOptions, subchartIndex, theme, isPortrait } = props;\n  let chartControlUI = {\n    ...chartControl.options?.ui,\n    snapToData: true\n  };\n\n  // Assign the appropriate UI for chartControl based on controlType (if existed)\n  if (chartControl.controlType === 'ChartRangeFilter') {\n    chartControlUI = {\n      ...chartControlUI,\n      chartType: mainChartData.chartType,\n      chartView: {\n        columns:\n          mainChartData.columns\n          || (mainChartData.subcharts\n            && mainChartData.subcharts[subchartIndex].columns)\n          || null\n          || null,\n      },\n      chartOptions: {\n        ...mainChartOptions,\n        ...chartControl.options?.ui?.chartOptions,\n        hAxis: {\n          ...chartControl.options?.ui?.chartOptions?.hAxis,\n          textPosition: 'out',\n          textStyle: { color: theme.palette.chart.axisText, fontSize: returnResponsiveFontSizeInPixels({ isPortrait, isSmaller: true }) }\n        },\n        vAxis: {\n          ...chartControl.options?.ui?.chartOptions?.vAxis,\n          title: null\n        },\n        annotations: hideAnnotations,\n        legend: null,\n      }\n    };\n  }\n  return chartControlUI;\n}\n\nconst calculateCalendarDimensions = ({ cellSizeMin, cellSizeMax }) => {\n  const cellSize = Math.min(Math.max((window.innerWidth * 0.9) / 58, cellSizeMin), cellSizeMax);\n  return {\n    chartWidth: cellSize * 56, // fixed ratio\n    cellSize,\n    yearLabelFontSize: cellSize * 2\n  };\n};\n\nexport const addTouchEventListenerForChartControl = ({ controlWrapper, chartID }) => {\n  const touchHandler = (event) => {\n    var touches = event.changedTouches,\n      first = touches[0],\n      type = '';\n\n    switch (event.type) {\n      case 'touchstart':\n        type = 'mousedown';\n        break;\n      case 'touchmove':\n        type = 'mousemove';\n        break;\n      case 'touchend':\n        type = 'mouseup';\n        break;\n      default:\n        return;\n    }\n\n    var simulatedEvent = new MouseEvent(type, {\n      bubbles: true,\n      cancelable: true,\n      view: window,\n      detail: 1,\n      screenX: first.screenX,\n      screenY: first.screenY,\n      clientX: first.clientX,\n      clientY: first.clientY,\n      button: 0, // left button\n      relatedTarget: null,\n    });\n\n    first.target.dispatchEvent(simulatedEvent);\n    event.preventDefault();\n  }\n\n  let isMounted = true; // Flag to track component's mount status\n  if (!controlWrapper) return;\n\n  const controlDOM = document.querySelector(`#control-${chartID}`);\n  if (!controlDOM) return;\n\n  ['touchstart', 'touchmove', 'touchend', 'touchcancel']\n    .forEach((touchEvent) => {\n      controlDOM.addEventListener(touchEvent, touchHandler, { capture: true });\n    });\n\n  return () => {\n    isMounted = false; // Component is unmounting\n\n    ['touchstart', 'touchmove', 'touchend', 'touchcancel'].forEach((touchEvent) => {\n      controlDOM.removeEventListener(touchEvent, touchHandler, { capture: true });\n    });\n  };\n}","import { memo } from 'react';\n\nfunction HeatMap(props) {\n  const { publishedSheetId, gid, range } = props;\n  const embedLink = `https://docs.google.com/spreadsheets/d/e/${publishedSheetId}/pubhtml?gid=${gid}&single=true&widget=false&headers=false&chrome=false&range=${range}`;\n  return (\n    <iframe\n      title=\"Heatmap-iframe\"\n      className=\"heat-map-iframe\"\n      style={{ width: '100%', height: '100%', border: 'none' }}\n      src={embedLink}\n    >\n      Loading...\n    </iframe>\n  );\n}\n\nexport default memo(HeatMap);\n","import { Box } from '@mui/material/';\nimport { styled } from '@mui/material/styles';\n\nconst GoogleChartStyleWrapper = styled(Box)(({ theme, isPortrait }) => ({\n  // CSS for HTML tooltip\n  '& .google-visualization-tooltip': {\n    width: 'unset !important',\n    maxWidth: '350px',\n    height: 'unset',\n    padding: '1em',\n    fontSize: `${isPortrait ? 9 : 12}px`,\n    color: theme.palette.chart.tooltip.text,\n    background: theme.palette.chart.tooltip.background,\n    borderRadius: theme.spacing(1 / 2),\n    '& ul': {\n      margin: '0 !important',\n      '& li': {\n        margin: '0 !important',\n        padding: '0 !important',\n        '& span': {\n          fontSize: `${isPortrait ? 9 : 12}px !important`,\n          color: `${theme.palette.chart.tooltip.text} !important`,\n        }\n      }\n    }\n  },\n\n  // -------- chartControl's additional stylings\n  '& .goog-menuitem-highlight, .goog-menuitem-hover': {\n    backgroundColor: `${theme.palette.primary} !important`\n  },\n\n  // CategoryFilter\n  '& .google-visualization-controls-categoryfilter': {\n    fontSize: '0.85rem',\n    marginTop: '0.75rem',\n    marginBottom: '-0.75rem',\n\n    '& .goog-inline-block > .goog-menu-button': {\n      marginTop: 0\n    },\n\n    '& .goog-menu-button-hover .goog-menu-button-outer-box, .goog-menu-button-hover .goog-menu-button-inner-box': {\n      borderColor: 'inherit !important'\n    },\n\n    '& .google-visualization-controls-label': {\n      color: theme.palette.text.secondary,\n      fontWeight: 500,\n      verticalAlign: 'middle',\n      marginBottom: '0.25rem'\n    },\n    '& .goog-menu-button-outer-box': {\n      backgroundColor: theme.palette.background.paper,\n      border: 'unset',\n\n      '& .goog-menu-button-inner-box': {\n        paddingTop: theme.spacing(0.5),\n        paddingBottom: theme.spacing(0.5),\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2),\n        border: 'solid',\n        borderWidth: '0.5px',\n        borderRadius: theme.spacing(0.5),\n        borderColor: theme.palette.text.secondary,\n\n        '& .goog-menu-button-caption': {\n          color: theme.palette.text.secondary\n        }\n      }\n    }\n  },\n\n  // DateRangeFilter\n  '& .google-visualization-controls-rangefilter': {\n    width: '100%',\n    fontSize: '0.75rem',\n    '& .goog-inline-block': {\n      width: '100%',\n    },\n    '& .google-visualization-controls-slider-horizontal': {\n      width: '90%',\n      margin: '0 5%',\n    },\n    '& .google-visualization-controls-rangefilter-thumblabel:nth-of-type(1)': {\n      position: 'absolute',\n      top: '1.5em',\n      left: '5%'\n    },\n    '& .google-visualization-controls-rangefilter-thumblabel:nth-of-type(2)': {\n      position: 'absolute',\n      top: '1.5em',\n      right: '5%'\n    },\n    '& .google-visualization-controls-slider-handle': {\n      background: theme.palette.primary.main\n    },\n    '& .google-visualization-controls-rangefilter-thumblabel': {\n      color: theme.palette.text.secondary,\n      padding: 0,\n      fontWeight: 500\n    },\n    '& .google-visualization-controls-slider-thumb': {\n      background: theme.palette.primary.main,\n      border: 'unset',\n      borderRadius: '4px'\n    }\n  },\n\n  // These are the paths showing on top of the line chart\n  // and the stroke around the bar/column chart\n  // when the user hovers on the legend to make the serie stand out\n  // by Google Chart's default doesn't change color based on light/dark theme, but we modify here:\n  '& path[stroke-opacity=\"0.3\"], path[stroke-opacity=\"0.1\"], path[stroke-opacity=\"0.05\"], rect[stroke-opacity]': {\n    stroke: theme.palette.text.primary,\n    strokeWidth: 3\n  },\n\n  // Cursor of series in legends\n  '& [column-id]:not(:empty)': {\n    cursor: 'pointer',\n    ':hover': {\n      fontWeight: 600\n    }\n  }\n}));\n\nexport default GoogleChartStyleWrapper;\n","/* eslint-disable */\nimport { useState, useEffect } from 'react';\nimport { Stack, Grid, MenuItem, FormControl, Select, Chip, Radio, Checkbox, Typography, Switch } from \"@mui/material\";\nimport { useTheme } from '@mui/material/styles';\n\nimport VisibilityIcon from '@mui/icons-material/Visibility';\n\nconst SELECT_ALL = 'Display All Series';\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\n\nexport default function SeriesSelector(props) {\n  const { items: itemsFromChart, selectorID, allowMultiple, onSeriesSelection } = props;\n\n  const theme = useTheme();\n\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: ITEM_HEIGHT * 5.55 + ITEM_PADDING_TOP,\n        overflow: 'visible !important',\n        background: theme.palette.customAlternateBackground\n      }\n    },\n    anchorOrigin: {\n      vertical: -6,\n      horizontal: \"left\"\n    },\n    transformOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"left\"\n    },\n    getContentAnchorEl: null\n  };\n\n  const [items, setItems] = useState(itemsFromChart);\n  const [selectAll, setSelectAll] = useState(allowMultiple); // default: all is selected if multiSelect is true\n\n  useEffect(() => {\n    setItems(itemsFromChart);\n  }, [itemsFromChart]);\n\n  useEffect(() => {\n    setSelectAll(items.every(item => item.selected)); // set selectAll if all items are selected\n  }, [items]);\n\n  const handleChange = (event) => {\n    // Get the array of the currently selected value(s)\n    const {\n      target: { value }\n    } = event;\n\n    // If the current selection has SELECT_ALL\n    // Behavior:\n    // - If SELECT_ALL is being selected now, then set all items to selected\n    // - IF SELECT_ALL is being de-selected now, then set all items but the first one to be unselected \n    // (to make sure there's always at least 1 item being selected)\n    if (value.includes(SELECT_ALL)) {\n      const updatedItems = items.map((item, index) => ({ ...item, selected: index == 0 ? true : !selectAll }));\n      onSeriesSelection(updatedItems);\n      setSelectAll(!selectAll);\n    }\n    // Else, if an ordinary item is selected/de-selected:\n    else {\n      const selectedItems = items.filter(item => value.includes(item.label));\n      const updatedItems = items.map(item => ({\n        ...item,\n        selected: selectedItems.some(selectedItem => selectedItem.label === item.label)\n      }));\n      onSeriesSelection(updatedItems);\n      setSelectAll(false);\n    }\n  };\n\n  const handleItemToggle = (item) => {\n    const updatedItems = items.map(existingItem =>\n      existingItem.label === item.label ? { ...existingItem, selected: !existingItem.selected } : existingItem\n    );\n    onSeriesSelection(updatedItems);\n  };\n\n  const renderedLabel = (selected) => {\n    return (\n      <Stack direction=\"row\" alignItems=\"center\" spacing={0.5}>\n        <VisibilityIcon fontSize=\"1.5rem\" sx={{ color: theme.palette.text.secondary }} />\n        <Typography variant=\"caption\" color=\"text.secondary\">\n          { /* show # of series selected if multiSelect. show cur selected serie if singleSelect */}\n          {allowMultiple ? `${selected.length} series displayed${selectAll ? ` (all)` : \"\"}`\n            : selected\n          }\n        </Typography>\n      </Stack>\n    )\n  };\n\n  return (\n    <Stack spacing={1} direction=\"row\" alignItems=\"center\">\n      <FormControl sx={{\n        [theme.breakpoints.down('sm')]: { width: '100%' },\n        minWidth: '200px',\n        '& .MuiInputBase-root': { mt: 1, borderRadius: theme.spacing(1) }\n      }} size=\"small\">\n        <Select\n          labelId={`${selectorID}-label`}\n          id={selectorID}\n          multiple={allowMultiple}\n          value={items.filter(item => item.selected).map(item => item.label)}\n          onChange={handleChange}\n          MenuProps={MenuProps}\n          renderValue={(selected) => renderedLabel(selected)}\n          sx={{ fontSize: '0.75em' }}\n        >\n          {/* Display all available items, together with checkbox for each item to select from */}\n          {items.map((item) => (\n            <MenuItem\n              disabled={\n                // If there is only 1 selected item and this is the selected item\n                // Then, prevent user from de-select this item too\n                // To ensure at least there is 1 selected item at all times\n                (items.filter(item => item.selected).length === 1 && item.selected) ? true : false\n              }\n              key={item.label}\n              value={item.label}\n              sx={{\n                backgroundColor: 'unset !important',\n                \"&:hover\": {\n                  backgroundColor: 'inherit !important',\n                }\n              }}\n            >\n              { /* checkboxes for MultiSelect, radioButtons for singleSelect*/}\n              {allowMultiple ? <Checkbox\n                checked={item.selected}\n                onClick={() => handleItemToggle(item)}\n\n                sx={{ p: 0.25, transform: 'scale(0.8)' }} />\n                : <Radio\n                  checked={item.selected}\n                  onChange={() => handleChange(item)}\n\n                  sx={{ p: 0.25, transform: 'scale(0.8)' }} />\n              }\n              <Typography variant='caption'>{item.label}</Typography>\n            </MenuItem>\n          ))}\n\n          {/* Show the option to select all if multiSelect is true*/}\n          {allowMultiple && <MenuItem key={SELECT_ALL} value={SELECT_ALL} sx={{\n            borderTop: 'solid 0.5px', borderColor: theme.palette.text.secondary,\n            position: 'sticky', bottom: 0, zIndex: 99999, marginBottom: theme.spacing(-1),\n            background: theme.palette.customAlternateBackground,\n            \"&:hover\": {\n              background: theme.palette.customAlternateBackground\n            }\n          }}>\n            <Stack direction='row' width='100%' alignItems='center' justifyContent='space-between'>\n              <Typography fontWeight={500} variant='caption' sx={{ pl: 1 }}>{SELECT_ALL}</Typography>\n              <Switch\n                checked={selectAll}\n                onClick={() => handleItemToggle(SELECT_ALL)}\n                sx={{ transform: 'scale(0.8)' }}\n              />\n            </Stack>\n          </MenuItem>\n          }\n        </Select>\n      </FormControl>\n\n      {/* Display only selected items in the Grids, and only in landscape mode and if multiSelect is true*/}\n      {allowMultiple && <Grid container spacing={1}\n        sx={{\n          [theme.breakpoints.down('sm')]: {\n            display: 'none'\n          },\n        }}\n      >\n        {items.filter(item => item.selected).map((item) => (\n          <Grid item key={item.label}>\n            <Chip\n              label={<Typography variant='caption'>{item.label}</Typography>}\n              size=\"small\"\n              {...(items.filter(item => item.selected).length !== 1 && { onDelete: () => handleItemToggle(item) })}\n            />\n          </Grid>\n        ))}\n      </Grid>}\n\n\n    </Stack>\n  );\n}\n","/* eslint-disable */\n\nimport { useState, useEffect, useContext } from 'react';\n\nimport { GoogleContext } from '../../ContextProviders/GoogleContext';\n\nimport { Box, Stack } from '@mui/material/';\n\nimport { useTheme } from '@mui/material/styles';\nimport HeatMap from '../HeatMap';\nimport SeriesSelector from './SeriesSelector';\n\nimport { fetchDataFromSheet, generateRandomID, returnGenericOptions, returnCalendarChartOptions, returnChartControlUI, ChartControlType, addTouchEventListenerForChartControl } from '../GoogleChartHelper';\n\nimport GoogleChartStyleWrapper from './GoogleChartStyleWrapper';\n\nimport LoadingAnimation from '../../Components/LoadingAnimation';\n\nimport ChartSubstituteComponentLoader from '../ChartSubstituteComponents/ChartSubstituteComponentLoader';\n\nfunction getTooltip(dataTable, rowNum) {\n  return dataTable.getValue(rowNum, 1)\n}\n\n\nexport default function SubChart(props) {\n  // Props\n  const { dataArray, chartData, subchartIndex, windowSize, isPortrait, isHomepage, height, maxHeight } = props;\n  // Early return if this doesn't contain a normal Google Chart but a chartSubstituteComponent\n  const chartSubstituteComponentName = chartData.subcharts?.[subchartIndex].chartSubstituteComponentName;\n  if (chartSubstituteComponentName) {\n    return <ChartSubstituteComponentLoader chartSubstituteComponentName={chartSubstituteComponentName} />;\n  }\n\n  // Formulate the className\n  const className = chartData.customClassName ? `${chartData.chartType} ${chartData.customClassName}` : chartData.chartType;\n\n  // Early return for 'HeatMap' chartType\n  if (chartData.chartType === 'HeatMap') {\n    return (\n      <Box\n        position=\"relative\"\n        className={className}\n        height={chartData.height}\n        maxWidth={chartData.maxWidth ? chartData.maxWidth : '100%'}\n        width=\"100%\"\n        sx={{ pt: 2, pb: 2, margin: 'auto' }}\n      >\n        <HeatMap\n          publishedSheetId={chartData.publishedSheetId}\n          gid={chartData.gid || chartData.subcharts[subchartIndex].gid || null}\n          range={\n            chartData.range || chartData.subcharts[subchartIndex].range || null\n          }\n        />\n      </Box>\n    );\n  }\n\n  // Use GoogleContext for loading and manipulating the Google Charts\n  const [google, _] = useContext(GoogleContext);\n\n  // States of the Google Charts\n  const [dataTable, setDataTable] = useState();\n  const [chartWrapper, setChartWrapper] = useState();\n  const [dashboardWrapper, setDashboardWrapper] = useState();\n  const [controlWrapper, setControlWrapper] = useState();\n\n  // Get the current theme\n  const theme = useTheme();\n\n  // To determine the first time the chart renders to show/hide the LoadingAnimation\n  const [isFirstRender, setIsFirstRender] = useState(true);\n\n  // Keep track of the columns (series) of the chart\n  const [allInitialColumns, setAllInitialColumns] = useState();\n  const [dataColumns, setDataColumns] = useState();\n  const [initialVAxisRange, setInitialVAxisRage] = useState();\n\n  // Define the DOM container's ID for drawing the google chart inside\n  const [chartID, __] = useState(generateRandomID());\n\n  // Calendar chart's properties\n  const [chartTotalHeight, setChartTotalHeight] = useState(200);\n\n  // Get the options object for chart\n  let options = returnGenericOptions({ ...props, theme });\n  if (chartData.chartType === 'Calendar') options = returnCalendarChartOptions(options);\n\n  // Properties for chart control (if existed)\n  let hasChartControl = false;\n  let chartControlOptions;\n  // Only show the chart control if:\n  // It exists in the database (either for all subcharts or just for a particular subchart)\n  // And if the chart is currently not shown on homePage\n  let chartControl = chartData.control || chartData.subcharts?.[subchartIndex].control;\n  if (chartControl && (isHomepage !== true)) {\n    hasChartControl = true;\n\n    // Get the options for chartControl if hasChartControl\n    chartControlOptions = {\n      ...chartControl.options,\n      ui: returnChartControlUI({\n        chartControl,\n        mainChartData: chartData,\n        mainChartOptions: options,\n        subchartIndex,\n        theme,\n        isPortrait\n      })\n    };\n\n    // Swap touch events for mouse events on ChartRangeControl\n    // as it doesn't support touch events on mobile\n    if (chartControl.controlType === 'ChartRangeFilter') {\n      useEffect(() => {\n        const cleanupTouchEventListener = addTouchEventListenerForChartControl({ controlWrapper, chartID });\n        return cleanupTouchEventListener;\n      }, [controlWrapper]);\n    }\n  }\n\n  // Properties for selecting (showing or hiding) the serie(s)\n  const seriesSelector = options.seriesSelector || false;\n\n  // Set new options prop and re-render the chart if theme or isPortrait changes\n  useEffect(() => {\n    if (seriesSelector) handleSeriesSelection(dataColumns); // this function set new options, too\n    else {\n      chartWrapper?.setOptions({\n        ...options,\n        ...(chartData.chartType === 'Calendar' && { height: chartTotalHeight })\n      });\n\n      chartWrapper?.draw();\n      if (hasChartControl) {\n        controlWrapper?.setOptions(chartControlOptions);\n        controlWrapper?.draw();\n      }\n    }\n  }, [theme, isPortrait, windowSize, chartTotalHeight]);\n\n  // Set new initialColumnsColors if the theme changes\n  // This only applies to when seriesSelector.method == \"setViewColumn\"\n  useEffect(() => {\n    if (!dataColumns) return;\n    if (seriesSelector && seriesSelector.method == \"setViewColumn\") {\n      setInitialColumnsColors({ dataColumns: dataColumns });\n      handleSeriesSelection(dataColumns);\n    }\n  }, [theme]);\n\n  const getInitialColumns = ({ chartWrapper, dataTable, seriesSelector }) => {\n    // Update the initial DataView's columns (often, all of the series are displayed initially)\n    var initialView = chartWrapper.getView();\n    // If (optional) columns is not specified in database\n    // Assign it from DataTable\n    if (initialView.columns == null) {\n      const viewFromDataTable = new google.visualization.DataView(dataTable);\n      chartWrapper.setView({\n        columns: viewFromDataTable.columns\n      });\n      initialView = chartWrapper.getView();\n    }\n\n    let shouldAssignDomainRoleToFistColumn = true; // variable to only assign type: 'domain' to the very first column\n    let dataSeriesIndex = 0;\n    const allInitialColumns = initialView.columns.map((col, index) => {\n      // A column can either be a number (that denotes the index of the sourceColumn) or an object\n      // The code below harmonize all columns to be an object to store crucial data to toggle their visibility\n      if (typeof col === 'number') col = {\n        role: shouldAssignDomainRoleToFistColumn ? 'domain' : 'data',\n        sourceColumn: col\n      }\n      col.label = dataTable.getColumnLabel(col.sourceColumn);\n      col.indexInAllInitialColumns = index;\n\n      shouldAssignDomainRoleToFistColumn = shouldAssignDomainRoleToFistColumn && false;\n\n      // Set the visibility of data column, \n      if (col.role === 'data') {\n        // initially, all data columns are selected if multiple series are selectable\n        if (seriesSelector?.allowMultiple) {\n          col.selected = true;\n        } else {\n          // else for single serie selector, only first data column is selected\n          if (dataSeriesIndex === 0) {\n            col.selected = true;\n          } else {\n            col.selected = false;\n          }\n        }\n        col.seriesIndex = dataSeriesIndex;\n        dataSeriesIndex++;\n      }\n      return col;\n    });\n    setAllInitialColumns(allInitialColumns);\n    const initialVAxisRange = getInitialVAxisRange({ dataTable: dataTable, allInitialColumns: allInitialColumns });\n    setInitialVAxisRage(initialVAxisRange);\n    // To track selection, only get the columns that are:\n    // role === 'data'\n    // visibleInLegend !== false\n    const dataColumns = allInitialColumns.filter((col) => {\n      return col.role === 'data' && options.series?.[col.seriesIndex]?.visibleInLegend !== false;\n    });\n\n    if (seriesSelector.method === \"setViewColumn\") setInitialColumnsColors({ dataColumns: dataColumns });\n\n    setDataColumns(dataColumns);\n    return dataColumns;\n  };\n\n  const setInitialColumnsColors = ({ dataColumns }) => {\n    dataColumns.forEach((col) => {\n      // Assign inherit color to this data column\n      col.color = options.colors[col.seriesIndex % options.colors.length];\n      // Assign other inherit attributes from its serie object (if existed)\n      col.serieAttribute = options.series?.[col.seriesIndex];\n    });\n  }\n\n  const getInitialVAxisRange = ({ dataTable, allInitialColumns }) => {\n    let vAxisMin, vAxisMax;\n    allInitialColumns.forEach((col, index) => {\n      if (index === 0) return; // the first column is the domain (hAxis)\n      const range = dataTable.getColumnRange(col.sourceColumn);\n      if (!isNaN(range.min) && range.min) vAxisMin = vAxisMin ? Math.min(vAxisMin, range.min) : range.min;\n      if (!isNaN(range.max) && range.max) vAxisMax = vAxisMax ? Math.max(vAxisMax, range.max) : range.max;\n    });\n    return { min: vAxisMin, max: vAxisMax };\n  }\n\n  const handleSeriesSelection = (newDataColumns, _chartWrapper = chartWrapper) => {\n    if (!allInitialColumns) return;\n\n    setDataColumns(newDataColumns);\n\n    if (seriesSelector.method === \"toggleVisibility\" || seriesSelector.method === null) {\n      const hiddenSeriesObject = {};\n      newDataColumns.forEach((col) => {\n        if (!col.selected)\n          hiddenSeriesObject[col.seriesIndex] = {\n            color: 'transparent',\n            enableInteractivity: false,\n            visibleInLegend: false\n          }; // 'hide' the serie by making it transparent\n      });\n\n      _chartWrapper?.setOptions({\n        ...options,\n        series: {\n          ...options.series,\n          ...hiddenSeriesObject\n        }\n      });\n    }\n    else if (seriesSelector.method === \"setViewColumn\") {\n      let newViewColumns = [];\n      newViewColumns.push(0); // this is the domain column\n      newDataColumns.forEach((dataColumn) => {\n        if (dataColumn.selected) {\n          newViewColumns.push(dataColumn);\n          // Find this dataColumn's supporting columns (whose role !== 'data')\n          // A dataColumn has its supporting columns (can be many) follow it immediately\n          for (let i = dataColumn.indexInAllInitialColumns + 1; i < allInitialColumns.length; i++) {\n            if (allInitialColumns[i].role !== 'data') {\n              newViewColumns.push(allInitialColumns[i]);\n            }\n            // If this loop encounter the next dataColumn, break the loop, all supporting columns for this dataColumn have been discovered\n            else {\n              break;\n            }\n          }\n        }\n      });\n      _chartWrapper?.setView({ columns: newViewColumns });\n\n      const newOptions = { ...options };\n      // Preserve the initial vAxis range so that the vAxis doesn't shift based on the visible serie(s)\n      // newOptions.vAxis.viewWindow = {\n      //   min: (options.vAxis.viewWindow.min == null) ? initialVAxisRange.min : options.vAxis.viewWindow.min,\n      //   max: (options.vAxis.viewWindow.max == null) ? initialVAxisRange.max : options.vAxis.viewWindow.max,\n      // }\n      // Set the new color array\n      newOptions.colors = newDataColumns.filter((col) => col.selected).map((col) => col.color);\n      // Set the new series object (if any)\n      // this contains other series' attributes (lineWidth, seriesType...)\n      const series = {};\n      let selectedSeriesCount = 0;\n      newDataColumns.forEach((col) => {\n        if (!col.selected) return;\n        if (col.serieAttribute != null) {\n          series[selectedSeriesCount] = col.serieAttribute;\n        }\n        selectedSeriesCount++;\n      })\n      newOptions.series = series;\n      _chartWrapper?.setOptions(newOptions);\n    }\n\n    // Call draw to apply the new DataView and 'refresh' the chart\n    _chartWrapper?.draw();\n\n    if (hasChartControl) {\n      controlWrapper?.draw();\n    }\n  };\n\n  const reconstructFunctionFromJSONstring = (columns) => {\n    if (!columns) return;\n\n    const evaluatedColumns = [];\n    for (const column of columns) {\n      if (typeof column === 'number') {\n        // If it's a number, add it as-is\n        evaluatedColumns.push(column);\n      } else if (typeof column === 'object') {\n        if (column.calc) {\n          // If it's an object with a 'calc' property, evaluate the 'calc' function\n          // using eval and add the result to the evaluatedColumns array\n          const calcFunction = eval(`(${column.calc})`);\n          evaluatedColumns.push({\n            ...column,\n            calc: calcFunction,\n          });\n        } else {\n          // If it's an object without a 'calc' property, add it as-is\n          evaluatedColumns.push(column);\n        }\n      }\n    }\n    return evaluatedColumns;\n  }\n\n\n  // Call this function to fetch the data and draw the initial chart\n  useEffect(() => {\n    if (google && dataArray) {\n      const thisDataTable = google.visualization.arrayToDataTable(dataArray);\n      setDataTable(thisDataTable);\n\n      const columns = chartData.columns\n        || (chartData.subcharts\n          && chartData.subcharts[subchartIndex].columns)\n        || null\n        || null;\n      const reconstructedColumns = reconstructFunctionFromJSONstring(columns);\n\n      const thisChartWrapper = new google.visualization.ChartWrapper({\n        chartType: chartData.chartType,\n        dataTable: (!hasChartControl) ? thisDataTable : undefined,\n        options: options,\n        view: {\n          columns: reconstructedColumns\n        },\n        containerId: chartID\n      });\n      setChartWrapper(thisChartWrapper);\n\n      if (hasChartControl) {\n        const thisDashboardWrapper = new google.visualization.Dashboard(\n          document.getElementById(`dashboard-${chartID}`));\n        setDashboardWrapper(thisDashboardWrapper);\n\n        google.visualization.events.addListener(thisDashboardWrapper, 'ready', onChartReady);\n\n        const thisControlWrapper = new google.visualization.ControlWrapper({\n          controlType: chartControl.controlType,\n          options: chartControlOptions,\n          containerId: `control-${chartID}`\n        });\n        setControlWrapper(thisControlWrapper);\n\n        // Establish dependencies\n        thisDashboardWrapper.bind(thisControlWrapper, thisChartWrapper);\n\n        thisDashboardWrapper.draw(thisDataTable);\n      }\n      else {\n        google.visualization.events.addListener(thisChartWrapper, 'ready', onChartReady);\n        thisChartWrapper.draw();\n      }\n\n      // Run the seriesSelector for the first time\n      if (seriesSelector) {\n        const initColumns = getInitialColumns({ chartWrapper: thisChartWrapper, dataTable: thisDataTable, seriesSelector: seriesSelector });\n        handleSeriesSelection(initColumns, thisChartWrapper);\n      }\n    }\n  }, [google, dataArray]);\n\n  const renderChart = () => {\n    if (hasChartControl) {\n      return (\n        <Stack\n          id={`dashboard-${chartID}`}\n          direction={ChartControlType[chartControl.controlType]?.stackDirection || 'column-reverse'}\n          sx={{ height: '100%' }}\n        >\n          <Box\n            id={`control-${chartID}`}\n            sx={{\n              height: `calc(${height} / 8)`,\n              opacity: 0.8,\n              filter: 'saturate(0.3)'\n            }}\n          />\n          <Box id={chartID} sx={{ height: height, maxHeight: maxHeight }} />\n        </Stack>\n      )\n    }\n    else return <Box id={chartID} sx={{ height: height, maxHeight: maxHeight }} />;\n  }\n\n  const onChartReady = () => {\n    if (chartData.chartType === 'Calendar') {\n      // querySelector is used to select the first 'g' element in the svg\n      // this is to get the height of the non-responsive element\n      // to set the CalendarChart's height to make it resonsive\n      const chartDOMContainer = document.getElementById(chartID).querySelector('svg > g:nth-of-type(1)');\n      let renderedHeight = chartDOMContainer.getBBox().height;\n      if (options.legend.position === 'none') renderedHeight += 50;\n      setChartTotalHeight(renderedHeight);\n    }\n\n    if (!isFirstRender) return;\n    // Hide the circleProgress when chart finishes rendering the first time\n    setIsFirstRender(false);\n  };\n\n  return (\n    <GoogleChartStyleWrapper\n      isPortrait={isPortrait}\n      className={className}\n      position=\"relative\"\n      height=\"100%\"\n      minHeight={chartData.chartType === 'Calendar' && '200px'}\n    >\n      {/* Conditionally display loading animation here */}\n      {isFirstRender && (\n        <Box sx={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}>\n          <LoadingAnimation />\n        </Box>\n      )}\n\n      {/* Conditionally display seriesSelector here */}\n      {(seriesSelector && !isFirstRender) && (\n        <SeriesSelector\n          items={dataColumns}\n          allowMultiple={seriesSelector.allowMultiple}\n          selectorID={`${chartData.title}-selector`}\n          onSeriesSelection={handleSeriesSelection}\n        />\n      )}\n\n      {/* Display chart here */}\n      {renderChart()}\n    </GoogleChartStyleWrapper>\n  );\n}","import { useState } from 'react';\nimport { isMobile } from 'react-device-detect';\n\nimport { Fab, Fade, Popper, Paper, Typography, Stack } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport AirIcon from '@mui/icons-material/Air';\nimport { FadeInButtonForSpeedDial } from './Header/FadeInButtonForSpeedDial';\n\nimport * as Tracking from '../Utils/Tracking';\nimport AirQualityIndexTable from '../Graphs/ChartSubstituteComponents/AirQualityIndexTable';\n\nexport default function AirQualityIndexLegendQuickGlance(props) {\n  const { themePreference } = props;\n  // Mechanism for opening and closing the Quick Glance on hover\n  const [anchorEl, setAnchorEl] = useState(null);\n  const handlePopperOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n    Tracking.sendEventAnalytics(Tracking.Events.airQualityIndexLegendQuickGlance);\n  };\n  const handlePopperClose = () => {\n    setAnchorEl(null);\n  };\n  const open = Boolean(anchorEl);\n\n  return (\n    <>\n      <FadeInButtonForSpeedDial {...props} distanceFromBottomOfWindow=\"5.5rem\">\n        <Fab\n          sx={{ mt: 1 }}\n          aria-owns={open ? Tracking.Events.airQualityIndexLegendQuickGlance : undefined}\n          aria-haspopup=\"true\"\n          onMouseEnter={handlePopperOpen}\n          onMouseLeave={handlePopperClose}\n          onClick={(event) => isMobile && (open ? handlePopperClose() : handlePopperOpen(event))}\n          aria-label={Tracking.Events.airQualityIndexLegendQuickGlance}\n          color=\"primary\"\n        >\n          <Stack direction=\"column\" alignItems=\"center\">\n            <AirIcon fontSize=\"1rem\" />\n            <Typography variant=\"body2\" fontWeight=\"500\">\n              AQI\n            </Typography>\n          </Stack>\n        </Fab>\n      </FadeInButtonForSpeedDial>\n\n      <Popper\n        id={Tracking.Events.airQualityIndexLegendQuickGlance}\n        sx={{\n          pointerEvents: 'none',\n          mt: -1\n        }}\n        open={open}\n        anchorEl={anchorEl}\n        placement=\"top-end\"\n        onClose={handlePopperClose}\n        keepMounted\n        disableRestoreFocus\n        transition\n      >\n        {({ TransitionProps }) => (\n          <Fade {...TransitionProps} timeout={350}>\n            <Paper elevation={8} sx={{ py: 0.5, mb: 1 }}>\n              <Typography sx={{ mx: 2, mt: 1 }} color=\"text.disabled\" variant=\"body1\" fontWeight={500}>\n                AQI at quick glance\n              </Typography>\n              <AirQualityIndexTable isTiny hideAQIDescription themePreference />\n            </Paper>\n          </Fade>\n        )}\n\n      </Popper>\n    </>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport dayjs from 'dayjs';\nimport { styled } from '@mui/material/styles';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { PickersDay } from '@mui/x-date-pickers/PickersDay';\nimport { DateCalendar } from '@mui/x-date-pickers/DateCalendar';\nimport { DayCalendarSkeleton } from '@mui/x-date-pickers/DayCalendarSkeleton';\nimport Card from '@mui/material/Card';\nimport ClickAwayListener from '@mui/base/ClickAwayListener';\n\nconst HighlightedDay = styled(PickersDay)(({ theme }) => ({\n  // styles for dot\n  '&:after, :hover::after': {\n    content: '\".\"',\n    fontSize: '1.5rem',\n    bottom: '-0.5rem',\n    position: 'absolute',\n    color: theme.palette.primary.main,\n    opacity: 0.5\n  },\n  '&:hover::after': {\n    opacity: 1\n  }\n}));\n\nfunction isValidDate(date, validDates) {\n  return validDates.indexOf(dayjs(date).format('YYYY-MM-DD')) >= 0;\n}\n\nfunction CustomDayComponent(props) {\n  const { versionDates = [], day, ...other } = props;\n\n  const isHighlighted = versionDates.indexOf(dayjs(day).format('YYYY-MM-DD')) >= 0;\n\n  return (\n    isHighlighted\n      ? <HighlightedDay {...other} day={day} />\n      : <PickersDay {...other} day={day} />\n  );\n}\n\nexport default function DatasetCalendar(props) {\n  const { smallScreen, onChange, versions } = props;\n\n  const versionDates = versions\n    .filter((version) => version.version.length === 10) // valid date\n    .map((version) => version.version);\n\n  return (\n    <ClickAwayListener onClickAway={() => onChange('close')}>\n      <Card\n        sx={!smallScreen && { position: 'absolute', right: 0, zIndex: 9999 }}\n        raised\n      >\n        <LocalizationProvider dateAdapter={AdapterDayjs}>\n          <DateCalendar\n            loading={!versionDates}\n            format=\"YYYY-MM-DD\"\n            renderLoading={() => <DayCalendarSkeleton />}\n            slots={{\n              day: CustomDayComponent,\n            }}\n            onChange={(value, selectionState) => {\n              if (selectionState === 'finish') {\n                return onChange(dayjs(value).format('YYYY-MM-DD'));\n              }\n              return null;\n            }}\n            slotProps={{\n              day: {\n                versionDates\n              }\n            }}\n            // disable the date if its not a valid date\n            shouldDisableDate={(day) => !isValidDate(day, versionDates)}\n            disableHighlightToday\n            minDate={dayjs(versionDates.slice(-1)[0])}\n            maxDate={dayjs(versionDates[0])}\n          />\n        </LocalizationProvider>\n      </Card>\n    </ClickAwayListener>\n  );\n}\n","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useContext } from 'react';\nimport { Container, Avatar, Modal, Tooltip, Box, Link, Typography, Stack, Select, FormControl, MenuItem, Grid, Chip, Dialog, Button, DialogActions, DialogContent, useMediaQuery, Table, TableBody, TableCell, TableHead, TableRow } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\nimport { RawDatasetsMetadataContext } from '../../ContextProviders/RawDatasetsMetadataContext';\n\nimport DownloadIcon from '@mui/icons-material/Download';\nimport DataObjectIcon from '@mui/icons-material/DataObject';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport EventIcon from '@mui/icons-material/Event';\nimport PublishedWithChangesIcon from '@mui/icons-material/PublishedWithChanges';\n\nimport * as Tracking from '../../Utils/Tracking';\nimport { fetchDataFromURL } from './DatasetFetcher';\nimport DatasetCalendar from './DatasetCalendar';\n\nexport default function DatasetDownloadDialog(props) {\n  const { project } = props;\n  const rawDatasetsMetadata = useContext(RawDatasetsMetadataContext);\n  const [datasets, setDatasets] = useState();\n\n  useEffect(() => {\n    if (!project || !rawDatasetsMetadata) return;\n    setDatasets(rawDatasetsMetadata[project?.id]); // get all the dataset(s) of this project\n  }, [project, rawDatasetsMetadata]);\n\n  const theme = useTheme();\n  const smallScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  function getOwnerString(owners) {\n    if (!owners || owners.length === 0) {\n      return 'the relevant owners';\n    } else if (owners.length === 1) {\n      return owners[0];\n    } else if (owners.length === 2) {\n      return owners.join(' and ');\n    } else {\n      const lastOwner = owners.pop();\n      const oxfordCommaOwners = owners.join(', ');\n      return `${oxfordCommaOwners}, and ${lastOwner}`;\n    }\n  }\n\n  return (\n    <>\n      <Button\n        onClick={() => {\n          handleOpen();\n          Tracking.sendEventAnalytics(Tracking.Events.rawDatasetButtonClicked, {\n            project_id: project.id\n          });\n        }}\n        variant=\"contained\"\n      >\n        <DataObjectIcon sx={{ fontSize: '1rem' }} />&nbsp;Raw Dataset\n      </Button>\n\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        maxWidth=\"lg\"\n        fullWidth\n        fullScreen={smallScreen}\n        keepMounted\n      >\n        {(\n          smallScreen &&\n          <DialogActions justifyContent=\"flex-start\">\n            <Button autoFocus onClick={handleClose}>\n              <ChevronLeftIcon sx={{ fontSize: '1rem' }} />Back\n            </Button>\n          </DialogActions>\n        )}\n\n        <DialogContent sx={{\n          px: smallScreen ? 2 : 3,\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'start',\n          height: '100%'\n        }}>\n          <Chip label={project.title} size=\"small\" sx={{ mb: 1 }} />\n          <Typography variant=\"h6\" >\n            Preview and download raw dataset(s)\n          </Typography>\n\n          <DatasetSelectorAndPreviewer datasets={datasets} smallScreen={smallScreen} project={project} />\n          {\n            datasets &&\n            <Typography variant=\"caption\" sx={{ my: 3, fontStyle: 'italic' }} >\n              This dataset is provided by the CITIES Dashboard with the support of {getOwnerString(project.owners)}. Should you intend to utilize this dataset for your project, research, or publication, we kindly request that you notify us at <Link href='mailto:nyuad.cities@nyu.edu'>nyuad.cities@nyu.edu</Link> to discuss citation requirements.\n            </Typography>\n          }\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\nconst DatasetSelectorAndPreviewer = (props) => {\n  const { datasets, smallScreen, project } = props;\n  const [previewingDataset, setPreviewingDataset] = useState();\n  const [previewingDatasetId, setPreviewingDatasetId] = useState();\n\n  // Preview the first version of the first dataset initially\n  useEffect(() => {\n    if (datasets?.length > 0) {\n      setPreviewingDataset(datasets[0]?.versions[0]);\n      setPreviewingDatasetId(datasets[0]?.id);\n      fetchDataFromURL(datasets[0]?.versions[0]?.rawLink, 'csv').then((data) => {\n        setPreviewingDataset({ ...datasets[0]?.versions[0], fetchedDataset: data });\n      });\n    }\n  }, [datasets]);\n\n  return (\n    <Grid container justifyContent=\"center\" alignItems=\"start\" spacing={3}>\n      <Grid item sm={12} md={6}>\n        <DatasetsTable\n          datasets={datasets}\n          smallScreen={smallScreen}\n          previewingDataset={previewingDataset}\n          setPreviewingDataset={setPreviewingDataset}\n          previewingDatasetId={previewingDatasetId}\n          setPreviewingDatasetId={setPreviewingDatasetId}\n        />\n      </Grid>\n      <Grid item sm={12} md={6} maxWidth={smallScreen ? '100%' : 'unset'} sx={{ mt: 1 }}>\n        <PreviewDataset\n          previewingDataset={previewingDataset}\n          previewingDatasetId={previewingDatasetId}\n          project={project}\n          smallScreen={smallScreen}\n        />\n      </Grid>\n    </Grid>\n  )\n};\n\nconst DatasetsTable = (props) => {\n  const { datasets, smallScreen, previewingDataset, setPreviewingDataset, previewingDatasetId, setPreviewingDatasetId } = props;\n  return (\n    <Table\n      size=\"small\"\n      sx={{\n        tableLayout: 'fixed',\n        '& td, div, .MuiMenuItem-root': {\n          fontSize: smallScreen ? '0.625rem' : '0.8rem'\n        }\n      }}\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell sx={{ pl: 1 }}>\n            Dataset\n          </TableCell>\n          <TableCell sx={{ width: smallScreen ? '9.5rem' : '11rem' }}>Version</TableCell>\n          <TableCell sx={{ width: smallScreen ? '5rem' : '6rem' }}>\n            Size\n          </TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {datasets?.map((dataset) => (\n          <Dataset\n            smallScreen={smallScreen}\n            dataset={dataset}\n            previewingDataset={previewingDataset}\n            setPreviewingDataset={setPreviewingDataset}\n            isPreviewing={dataset.id === previewingDatasetId}\n            setPreviewingDatasetId={setPreviewingDatasetId}\n          />\n        ))}\n      </TableBody>\n    </Table>\n  )\n}\n\nconst Dataset = (props) => {\n  const { smallScreen, dataset, setPreviewingDataset, isPreviewing, previewingDatasetId, setPreviewingDatasetId } = props;\n\n  const [fetchedDatasets, setFetchedDatasets] = useState({});\n  const NUM_RECENT_VERSIONS = 3;\n\n  const latestVersionOfThisDataset = dataset?.versions[0] || {};\n  const [showCalendar, setShowCalendar] = useState(false);\n  const [selectedVersionOfThisDataset, setSelectedVersionOfThisDataset] = useState(latestVersionOfThisDataset);\n\n  // only show NUM_RECENT_VERSIONS rows in Dropdown\n  const visibleVersions = dataset?.versions.slice(0, NUM_RECENT_VERSIONS);\n  // if currently selected version is not in first NUM_RECENT_VERSION rows,\n  // add it to the list\n  if (!visibleVersions.find((version) => version == selectedVersionOfThisDataset)) {\n    visibleVersions.push({ ...selectedVersionOfThisDataset, isOlderVersion: true });\n  }\n\n  // only show Calendar option if there are more than NUM_RECENT_VERSIONS versions\n  const shouldShowCalendar = dataset?.versions.length > NUM_RECENT_VERSIONS;\n\n  const handleVersionChange = (event) => {\n    const selectedVal = event.target.value;\n    if (selectedVal === 'Calendar') {\n      setShowCalendar(true);\n      return;\n    }\n    // Loop through the array (allVersionsOfThisDataset) to find the one with the selected version\n    const selectedVersion = dataset?.versions.find(aDatasetVersion => {\n      return aDatasetVersion.version === selectedVal;\n    });\n    setSelectedVersionOfThisDataset(selectedVersion);\n    setPreviewingDatasetId(dataset.id);\n    setPreviewingDataset(selectedVersion);\n\n    fetchThisDataset(selectedVersion);\n  };\n\n  const handleCalendarChange = (event) => {\n    // close calendar after selecting\n    setShowCalendar(false)\n    if (event === 'close') { // click outside of card\n      return\n    }\n\n    handleVersionChange({ target: { value: event } });\n  }\n\n  const fetchThisDataset = (selectedVersion) => {\n    // If this dataset version hasn't been fetched yet,\n    // fetch it and append it into the object fetchedDatasets\n    if (!fetchedDatasets[selectedVersion.version]) {\n      fetchDataFromURL(selectedVersion.rawLink, 'csv').then((data) => {\n        const selectedVersionWithFetchedDataset = { ...selectedVersion, fetchedDataset: data };\n        setPreviewingDataset(selectedVersionWithFetchedDataset);\n        setFetchedDatasets({\n          ...fetchedDatasets,\n          [selectedVersionWithFetchedDataset.version]: selectedVersionWithFetchedDataset\n        });\n      });\n    }\n    // If it has been fetched before, simply get it from memory \n    else {\n      setPreviewingDataset(fetchedDatasets[selectedVersion.version]);\n    }\n  }\n\n  const setThisDatasetToPreview = () => {\n    if (previewingDatasetId !== dataset.id) {\n      setPreviewingDatasetId(dataset.id);\n      setPreviewingDataset(selectedVersionOfThisDataset);\n      fetchThisDataset(selectedVersionOfThisDataset);\n    }\n  }\n\n  const theme = useTheme();\n\n  const formatFileSize = (sizeInBytes) => {\n    if (!sizeInBytes) return;\n\n    if (sizeInBytes < 1024 * 1024) {\n      return (sizeInBytes / 1024).toFixed(1) + \" KB\";\n    } else {\n      return (sizeInBytes / (1024 * 1024)).toFixed(1) + \" MB\";\n    }\n  }\n\n  return (\n    <>\n      <TableRow key={dataset.id}>\n        <TableCell\n          sx={{\n            pl: 1,\n            cursor: 'pointer',\n            background: isPreviewing && theme.palette.background.NYUpurpleLight\n          }}\n          onClick={setThisDatasetToPreview}>\n          {selectedVersionOfThisDataset?.name}\n        </TableCell>\n\n        <TableCell sx={{ position: 'relative', background: isPreviewing && theme.palette.background.NYUpurpleLight }}>\n          {showCalendar &&\n            (smallScreen ? <Modal\n              open={showCalendar}\n              sx={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center'\n              }}\n            >\n              <DatasetCalendar\n                onChange={handleCalendarChange}\n                smallScreen={smallScreen}\n                versions={dataset?.versions}\n              />\n            </Modal>\n              : <DatasetCalendar\n                onChange={handleCalendarChange}\n                versions={dataset?.versions}\n              />)}\n          <FormControl size=\"small\">\n            <Select\n              value={selectedVersionOfThisDataset?.version}\n              onClick={() => {\n                if (dataset.versions.length <= 1) setThisDatasetToPreview();\n              }}\n              onChange={handleVersionChange}\n              variant=\"standard\"\n              MenuProps={{ disablePortal: true }}\n            >\n              {visibleVersions.map((aDatasetVersion, index) => (\n                <MenuItem\n                  key={aDatasetVersion.version}\n                  value={aDatasetVersion.version}\n                  sx={[\n                    (index === visibleVersions.length - 1) && {\n                      mb: -0.75\n                    },\n                    aDatasetVersion.isOlderVersion && {\n                      marginTop: '1rem',\n                      '&::before': {\n                        content: '\"\"',\n                        borderTop: `2px dotted ${theme.palette.text.secondary}`,\n                        width: '1rem',\n                        height: '1rem',\n                        position: 'absolute',\n                        top: 0,\n                        left: '50%',\n                        transform: 'translate(-50%, -50%)'\n                      }\n                    }\n                  ]}\n                >\n                  <Stack direction=\"row\" alignItems=\"center\">\n                    {aDatasetVersion.version}\n                    { /* 'LATEST' chip for latest version */}\n                    {aDatasetVersion === latestVersionOfThisDataset &&\n                      <Tooltip title=\"Latest version\" enterDelay={0} leaveDelay={200}>\n                        <Avatar sx={{\n                          ml: 0.5,\n                          width: '1rem',\n                          height: '1rem',\n                          background: theme.palette.success.main\n                        }}>\n                          <PublishedWithChangesIcon sx={{ width: '0.8rem', height: '0.8rem' }} />\n                        </Avatar>\n                      </Tooltip>\n                    }\n                  </Stack>\n                </MenuItem>\n              ))}\n\n              {shouldShowCalendar && <MenuItem\n                key=\"Calendar\"\n                value=\"Calendar\"\n                sx={{ pt: 1, mt: 1, mb: -0.75, borderTop: '0.5px solid' }}\n              >\n                <Stack direction=\"row\" alignItems=\"center\">\n                  Older Versions\n                  <EventIcon fontSize='small' sx={{ ml: 0.5 }} />\n                </Stack>\n              </MenuItem>\n              }\n            </Select>\n          </FormControl>\n        </TableCell>\n        <TableCell sx={{ background: isPreviewing && theme.palette.background.NYUpurpleLight }}>\n          {formatFileSize(selectedVersionOfThisDataset?.sizeInBytes)}\n        </TableCell>\n      </TableRow >\n    </>\n  )\n}\n\nconst PreviewDataset = (props) => {\n  const { previewingDataset, previewingDatasetId, project, smallScreen } = props;\n  const downloadDatasetName = `[${project.id}] ${previewingDataset?.name}-${previewingDataset?.version}.csv`;\n\n  const theme = useTheme();\n\n  const downloadPreviewingDataset = () => {\n    if (!previewingDataset?.fetchedDataset) return;\n\n    const blob = new Blob([previewingDataset?.fetchedDataset], { type: 'application/octet-stream' }); // create a Blob with the raw data\n    const url = URL.createObjectURL(blob); // create a download link for the Blob\n    const downloadLink = document.createElement('a');\n    downloadLink.href = url;\n    downloadLink.download = downloadDatasetName;\n    document.body.appendChild(downloadLink);\n    downloadLink.click(); // simulate a click on the download link\n    URL.revokeObjectURL(url); // clean up by revoking the object URL\n    document.body.removeChild(downloadLink);\n  };\n\n  const [formattedData, setFormattedData] = useState('');\n  const [rowIndices, setRowIndices] = useState('');\n  const numFirstLastRowsToPreview = 5;\n\n  useEffect(() => {\n    if (!previewingDataset?.fetchedDataset) return;\n\n    const csvData = previewingDataset?.fetchedDataset;\n    const lines = csvData.split('\\n');\n    const numRows = lines.length;\n\n    if (numRows <= numFirstLastRowsToPreview * 2) {\n      setFormattedData(csvData);\n      setRowIndices(Array.from({ length: numRows }, (_, index) => index + 1).join('\\n')); // +1 because rowNumber starts at 1 while index starts at 0\n    } else {\n\n      const firstRows = lines.slice(0, numFirstLastRowsToPreview);\n      const lastRows = lines.slice(numRows - numFirstLastRowsToPreview);\n\n      const numOfHiddenRows = numRows - 2 * numFirstLastRowsToPreview;\n\n      const middleRow = [`... [${numOfHiddenRows} rows hidden] ...`];\n\n      setFormattedData(firstRows.concat(middleRow).concat(lastRows).join('\\n'));\n      setRowIndices(\n        Array.from({\n          length: numFirstLastRowsToPreview * 2 + 1 // +1 to account for the middleRow\n        },\n          (_, index) => {\n            const rowIndex = index + 1; // +1 because rowNumber starts at 1 while index starts at 0\n            // Indices for the first rows\n            if (rowIndex < numFirstLastRowsToPreview + 1) {\n              return rowIndex;\n            }\n            // No index for the middle row\n            else if (rowIndex == numFirstLastRowsToPreview + 1) {\n              return '';\n            }\n            // Indices for the last rows\n            else {\n              return numOfHiddenRows + rowIndex - 1;\n            }\n          })\n          .join('\\n'));\n    }\n\n  }, [previewingDataset]);\n\n  return (\n    <Stack spacing={1}>\n      <Box sx={{ '& *': { fontFamily: \"monospace !important\" } }}>\n        <Stack direction=\"row\">\n          <Typography variant='body2' gutterBottom fontWeight={500}>\n            {previewingDataset ?\n              `Previewing: ${previewingDataset.name} (${previewingDataset?.version})`\n              : 'Not previewing any dataset'}\n          </Typography>\n        </Stack>\n\n        <Box\n          component=\"pre\"\n          sx={{\n            overflowX: 'auto',\n            color: theme.palette.text.secondary,\n            backgroundColor: theme.palette.customBackground,\n            p: 2,\n            pt: 1.5,\n            borderRadius: theme.spacing(1),\n            borderTopLeftRadius: 0,\n            minHeight: \"5rem\",\n            width: smallScreen ? '100%' : 'unset',\n            marginTop: 0\n          }}\n        >\n          <Stack direction=\"row\" sx={{ fontSize: smallScreen ? '0.625rem !important' : '0.8rem !important' }}>\n            <Box sx={{ mr: 2, userSelect: 'none' }}>\n              {rowIndices}\n            </Box>\n            <Box>\n              {formattedData}\n            </Box>\n          </Stack>\n        </Box>\n      </Box>\n      <Box textAlign=\"center\" >\n        <Button\n          variant=\"contained\"\n          sx={{\n            textTransform: 'none',\n            textAlign: 'left',\n            lineHeight: 1.1,\n            px: 1.5,\n            py: 1\n          }}\n          onClick={() => {\n            downloadPreviewingDataset();\n            Tracking.sendEventAnalytics(Tracking.Events.rawDatasetDownloaded, {\n              project_id: project.id,\n              dataset_id: previewingDatasetId,\n              dataset_name: previewingDataset.name,\n              dataset_version: previewingDataset.version\n            });\n          }}\n          disabled={!previewingDataset}\n        >\n          <DownloadIcon sx={{ fontSize: '1.25rem', mr: 0.5 }} />\n          {previewingDataset ? downloadDatasetName : \"No dataset available to download\"}\n        </Button>\n      </Box>\n    </Stack >\n  )\n}","// disable eslint for this file\n/* eslint-disable */\nimport { Button, Box } from \"@mui/material\";\nimport { Link } from 'react-router-dom';\nimport TvIcon from '@mui/icons-material/Tv';\nimport HoverMenu from 'material-ui-popup-state/HoverMenu';\nimport PopupState, { bindHover, bindFocus, bindMenu } from 'material-ui-popup-state';\nimport MenuItemAsNavLink from \"./Header/MenuItemAsNavLink\";\nimport NavLinkBehavior from \"./Header/NavLinkBehavior\";\n\nconst ScreenDialog = ({ schoolID, screens }) => {\n  if (!Array.isArray(screens)) return null;\n\n  if (screens.length <= 1) return <LinkButtonToScreen url={`/screen/${schoolID}`} />\n  else return <DialogToScreen schoolID={schoolID} screens={screens} />\n};\n\nconst DialogToScreen = ({ schoolID, screens }) => {\n  return (\n    <PopupState variant=\"popover\" popupId=\"tv-screens-list\">\n      {(popupState) => (\n        <>\n          <Button\n            variant=\"contained\"\n            {...bindHover(popupState)}\n            {...bindFocus(popupState)}\n          >\n            <TvIcon sx={{ fontSize: '1rem' }} />&nbsp;TV Screens List\n          </Button>\n          <HoverMenu\n            {...bindMenu(popupState)}\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n            onClick={popupState.close}\n          >\n            {\n              screens.map((screen, index) => (\n                <MenuItemAsNavLink\n                  key={index}\n                  behavior={NavLinkBehavior.toNewPage}\n                  to={`/screen/${schoolID}/${screen.screen_name}`}\n                  label={screen.location_long}\n                  sx={{ fontSize: '0.8rem' }}\n                />\n              ))}\n          </HoverMenu>\n        </>\n      )}\n    </PopupState>\n  )\n}\n\nconst LinkButtonToScreen = ({ url }) => {\n  return (\n    <Button\n      variant=\"contained\"\n      component={Link}\n      to={url}\n    >\n      <TvIcon sx={{ fontSize: '1rem' }} />&nbsp;TV Screen\n    </Button>\n  )\n}\n\nexport default ScreenDialog;","// disable eslint for this file\n/* eslint-disable */\n\nimport { useState } from \"react\";\nimport { Menu, MenuItem, MenuList, FormControl, Select, InputLabel } from \"@mui/material\";\nimport { CustomChip } from \"../Project/Project\";\n\nimport PlaceIcon from '@mui/icons-material/Place';\n\nexport const SchoolSelector = (props) => {\n  const { currentSchoolID, currentSchoolName, allowedSchools, fetchDashboardData } = props;\n  if (!Array.isArray(allowedSchools) || allowedSchools.length <= 1)\n    return (\n      <CustomChip\n        icon={<PlaceIcon />}\n        label={currentSchoolName}\n        tooltipTitle={\"School\"}\n      />\n    );\n\n  const [schoolID, setSchoolID] = useState('');\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleItemSelect = (schoolID) => () => {\n    if (currentSchoolID !== schoolID) {\n      setSchoolID(schoolID);\n      fetchDashboardData(schoolID);\n    }\n    handleClose();\n  };\n\n  return (\n    <>\n      <CustomChip\n        icon={<PlaceIcon />}\n        label={currentSchoolName}\n        tooltipTitle={\"Click to Select School\"}\n        clickable\n        onClick={handleClick}\n        aria-controls={open ? 'basic-menu' : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={open ? 'true' : undefined}\n      />\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n        MenuListProps={{\n          'aria-labelledby': 'basic-button',\n        }}\n      >\n        <MenuList dense>\n          {allowedSchools.map((school, index) => (\n            <MenuItem\n              key={index}\n              onClick={handleItemSelect(school.school_id)}\n            >\n              {school.name}\n            </MenuItem>\n          ))}\n        </MenuList>\n      </Menu>\n    </>\n  );\n};\n\n","export const sampleData = [\n  [{ type: \"date\", label: \"date\" }, \"Campus Center C2\", \"AQI Category\"],\n  [\"Date(2023, 9, 6)\", 37, \"Good\"],\n  [\"Date(2023, 9, 7)\", 32, \"Good\"],\n  [\"Date(2023, 9, 8)\", 55, \"Good\"],\n  [\"Date(2023, 9, 9)\", 55, \"Good\"],\n  [\"Date(2023, 9, 10)\", 65, \"Good\"],\n  [\"Date(2023, 9, 11)\", 64, \"Good\"],\n  [\"Date(2023, 9, 12)\", 63, \"Good\"],\n  [\"Date(2023, 9, 13)\", 51, \"Good\"],\n  [\"Date(2023, 9, 14)\", 60, \"Good\"],\n  [\"Date(2023, 9, 15)\", 74, \"Good\"],\n  [\"Date(2023, 9, 16)\", 77, \"Good\"],\n  [\"Date(2023, 9, 17)\", 75, \"Good\"],\n  [\"Date(2023, 9, 18)\", 68, \"Good\"],\n  [\"Date(2023, 9, 19)\", 68, \"Good\"],\n  [\"Date(2023, 9, 20)\", 68, \"Good\"],\n  [\"Date(2023, 9, 5)\", 68, \"Good\"]\n];","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useContext } from 'react';\nimport { LinkContext } from '../../ContextProviders/LinkContext';\nimport { TabContext } from '../../ContextProviders/TabContext';\nimport parse from 'html-react-parser';\nimport ChartComponent from '../../Graphs/ChartComponent';\nimport UppercaseTitle from '../../Components/UppercaseTitle';\nimport { Box, Typography, Container, Divider, Chip, Grid, Tooltip, Stack } from '@mui/material';\n\nimport { useTheme } from '@mui/material/styles';\n\nimport ThemePreferences from '../../Themes/ThemePreferences';\n\nimport AirQualityIndexLegendQuickGlance from '../../Components/AirQualityHelper';\n\nimport project from '../../temp_database.json';\nimport jsonData from '../../section_data.json';\n\nimport PersonIcon from '@mui/icons-material/Person';\nimport EmailIcon from '@mui/icons-material/Email';\nimport PublishedWithChangesIcon from '@mui/icons-material/PublishedWithChanges';\nimport BarChartIcon from '@mui/icons-material/BarChart';\n\nimport { replacePlainHTMLWithMuiComponents } from '../../Utils/Utils';\nimport DatasetDownloadDialog from '../../Components/DatasetDownload/DatasetDownloadDialog';\nimport ScreenDialog from '../../Components/ScreenDialog';\n\nimport { scrollToSection } from '../../Components/Header/MenuItemAsNavLink';\nimport FullWidthBox from '../../Components/FullWidthBox';\n\nimport * as Tracking from '../../Utils/Tracking';\n\nimport ChartSubstituteComponentLoader from '../../Graphs/ChartSubstituteComponents/ChartSubstituteComponentLoader';\n\nimport CurrentAQIGrid from '../../Components/CurrentAQIGrid';\nimport { SchoolSelector } from \"../Dashboard/SchoolSelector\";\n\nimport { sampleData } from '../../sample';\n\n// Custom Chip component to display metadata\nexport const CustomChip = (props) => {\n  const { tooltipTitle, ...otherProps } = props;\n  return (\n    <Tooltip title={tooltipTitle} enterDelay={0} leaveDelay={200}>\n      <Chip\n        size=\"small\"\n        {...otherProps}\n      />\n    </Tooltip>\n  );\n}\n\nconst Project = ({ themePreference, currentSensorData, dashboardData, fetchDashboardData, temperatureUnitPreference }) => {\n  const [_, __, chartsTitlesList, setChartsTitlesList] = useContext(LinkContext);\n\n  const [loading, setLoading] = useState(false);\n  const [tab, setTab] = useContext(TabContext);\n\n  let lastUpdate;\n\n  useEffect(() => {\n    const chartsTitles = project.charts.map((element, index) => ({ chartTitle: element.title, chartID: `chart-${index + 1}` }));\n    setChartsTitlesList(chartsTitles);\n  }, []);\n  const theme = useTheme();\n\n  return (\n    <>\n      <Box width=\"100%\">\n        <AirQualityIndexLegendQuickGlance themePreference={themePreference} />\n\n        <FullWidthBox backgroundColor='customAlternateBackground'>\n          <Container sx={{ pt: 5, pb: 3 }}>\n            <UppercaseTitle text={project.title} />\n\n            <Grid container spacing={1} sx={{ mt: -3, pb: 3 }}>\n              <Grid item>\n                <SchoolSelector\n                  currentSchoolID={dashboardData.currentSchool?.school_id}\n                  currentSchoolName={dashboardData.currentSchool?.name}\n                  allowedSchools={dashboardData.allowedSchools}\n                  fetchDashboardData={fetchDashboardData}\n                />\n              </Grid>\n\n              <Grid item>\n                <CustomChip\n                  icon={<PersonIcon />}\n                  label={dashboardData.currentSchool?.contactPerson}\n                  tooltipTitle=\"Contact Person\"\n                />\n              </Grid>\n\n              <Grid item>\n                <CustomChip\n                  icon={<EmailIcon />}\n                  label={dashboardData.currentSchool?.contactEmail}\n                  tooltipTitle=\"Contact Email\"\n                  component=\"a\"\n                  href={`mailto:${dashboardData.currentSchool?.contactEmail}`}\n                  clickable\n                />\n              </Grid>\n\n              <Grid item>\n                <CustomChip\n                  icon={<BarChartIcon />}\n                  label={`${project.charts.length} Chart${project.charts.length > 1 && \"s\"}`}\n                  tooltipTitle=\"Number of Charts\"\n                  onClick={() => {\n                    scrollToSection(jsonData.charts.id);\n                    Tracking.sendEventAnalytics(Tracking.Events.internalNavigation,\n                      {\n                        destination_id: jsonData.charts.id,\n                        destination_label: jsonData.project.toString(),\n                        origin_id: 'chip'\n                      })\n                  }}\n                />\n              </Grid>\n\n              {\n                lastUpdate &&\n                <Grid item>\n                  <CustomChip\n                    icon={<PublishedWithChangesIcon />}\n                    label={`Last update: ${lastUpdate}`}\n                    tooltipTitle=\"Last Update\" />\n                </Grid>\n              }\n            </Grid>\n\n            <Box textAlign=\"center\" sx={{ mb: 2 }}>\n              <CurrentAQIGrid\n                currentData={currentSensorData}\n                isScreen={false}\n                temperatureUnitPreference={temperatureUnitPreference}\n              />\n            </Box>\n            <Typography\n              component=\"div\"\n              variant=\"body1\"\n              color=\"text.secondary\"\n              sx={{\n                textAlign: 'justify', pb: 2, mb: 0, \"& table *\": {\n                  color: `${theme.palette.text.secondary}`\n                }\n              }}\n              gutterBottom\n            >\n              {parse(project.description, {\n                replace: replacePlainHTMLWithMuiComponents,\n              })}\n            </Typography>\n            <Stack direction=\"row\" spacing={2}>\n              <ScreenDialog schoolID={dashboardData.currentSchool?.school_id} screens={dashboardData.currentSchool?.screens} />\n\n              {/* <DatasetDownloadDialog project={project} /> */}\n            </Stack>\n          </Container>\n        </FullWidthBox>\n\n        <Box id={jsonData.charts.id}>\n          {project.charts.map((element, index) => (\n            <FullWidthBox\n              key={index}\n              backgroundColor={\n                index % 2 != 0 && 'customAlternateBackground'\n              }\n            >\n              <Container\n                sx={{ pt: 4, pb: 4 }}\n                height=\"auto\"\n                className={themePreference === ThemePreferences.dark ? 'dark' : ''}\n              >\n                <Typography variant=\"h6\" color=\"text.primary\">\n                  {index + 1}. {element.title}\n                </Typography>\n\n                {/* Either display the regular ChartComponent, or substitute with a customized component in ../../Graphs/ChartSubstituteComponents/ (if specified) */}\n                {element.chartSubstituteComponentName ?\n                  <ChartSubstituteComponentLoader chartSubstituteComponentName={element.chartSubstituteComponentName} />\n                  : (\n                    <ChartComponent\n                      chartData={{\n                        chartIndex: index,\n                        sheetId: project.sheetId,\n                        ...element,\n                      }}\n                      // dataArray={dashboardData?.charts}\n                      dataArray={sampleData}\n                    />\n                  )}\n\n                <Box sx={{ my: 3 }}>\n                  <Typography\n                    component=\"div\"\n                    variant=\"body1\"\n                    color=\"text.secondary\"\n                  >\n                    {element.subtitle && parse(element.subtitle, {\n                      replace: replacePlainHTMLWithMuiComponents,\n                    })}\n                    {Object.keys(tab)[index] == index &&\n                      element.subcharts &&\n                      element.subcharts[Object.values(tab)[index]]\n                        .subchartSubtitle &&\n                      parse(\n                        element.subcharts[Object.values(tab)[index]]\n                          .subchartSubtitle, {\n                        replace: replacePlainHTMLWithMuiComponents,\n                      }\n                      )}\n                  </Typography>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    {element.reference && parse(element.reference, {\n                      replace: replacePlainHTMLWithMuiComponents,\n                    })}\n                    {Object.keys(tab)[index] == index &&\n                      element.subcharts &&\n                      element.subcharts[Object.values(tab)[index]].reference &&\n                      parse(\n                        element.subcharts[Object.values(tab)[index]].reference, {\n                        replace: replacePlainHTMLWithMuiComponents,\n                      }\n                      )}\n                  </Typography>\n                </Box>\n              </Container>\n            </FullWidthBox>\n          ))}\n        </Box>\n\n        <Divider />\n      </Box>\n    </>\n  );\n};\n\nexport default Project;\n","// disable eslint for this file\n/* eslint-disable */\n\nimport { useState, useEffect, useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { fetchDataFromURL } from \"../../Components/DatasetDownload/DatasetFetcher\";\nimport Project from \"../Project/Project\";\nimport { processCurrentData } from \"../../Utils/ApiUtils\";\nimport { LinkContext } from \"../../ContextProviders/LinkContext\";\n\nimport { UserContext } from \"../../ContextProviders/UserContext\";\n\nconst Dashboard = ({ themePreference, temperatureUnitPreference, title }) => {\n  // Update the page's title\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n\n  const [_, setCurrentPage, __, ___] = useContext(LinkContext);\n  useEffect(() => {\n    setCurrentPage('dashboard');\n  }, []);\n\n  const { authenticated, checkAuthentication } = useContext(UserContext);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (checkAuthentication === true && authenticated === false) {\n      navigate('/login');\n    }\n  }, [authenticated, checkAuthentication])\n\n  const [dashboardData, setDashboardData] = useState({});\n  const [currentSensorData, setCurrentSensorData] = useState({});\n  const [allowedSchools, setAllowedSchools] = useState([]);\n\n  const fetchDashboardData = (schoolID) => {\n    let url;\n    if (schoolID) url = `https://api.citiesair.com/dashboard/${schoolID}`;\n    else url = 'https://api.citiesair.com/dashboard';\n\n    fetchDataFromURL(url, 'json', true)\n      .then(data => {\n        if (data.currentSchool?.sensors) {\n          const processedCurrentSensorData = processCurrentData(data.currentSchool?.sensors);\n          setCurrentSensorData(processedCurrentSensorData);\n        }\n        setDashboardData(data);\n        setAllowedSchools(data.allowedSchools || []);\n      })\n  }\n\n  useEffect(() => {\n    fetchDashboardData();\n  }, []);\n\n  return (\n    <>\n      <Project\n        themePreference={themePreference}\n        currentSensorData={currentSensorData}\n        dashboardData={dashboardData}\n        fetchDashboardData={fetchDashboardData}\n        temperatureUnitPreference={temperatureUnitPreference}\n      />\n    </>\n  )\n};\n\nexport default Dashboard;","// ---------- Calculate time difference and return appropriate format\nexport const getFormattedElapsedTimeFromNow = (dateString) => {\n  const inputDate = new Date(dateString);\n  const currentDate = new Date();\n  const timeDifference = currentDate - inputDate;\n\n  // Calculate time differences in seconds, minutes, hours, and days\n  const seconds = Math.floor(timeDifference / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  // Determine the most prominent time unit\n  if (days > 0) {\n    return `${days}d`;\n  } else if (hours > 0) {\n    return `${hours}h`;\n  } else if (minutes > 0) {\n    return `${minutes}m`;\n  } else {\n    return `${seconds}s`;\n  }\n}\n\n// ---------- Sensor status\nexport const SensorStatus = {\n  active: \"active\",\n  temporaryOffline: \"temporaryOffline\",\n  offline: \"offline\"\n};\n\nconst SensorStatusCriteria = [\n  {\n    name: SensorStatus.active,\n    cutoffInHours: {\n      low: 0,\n      high: 2\n    }\n  },\n  {\n    name: SensorStatus.temporaryOffline,\n    cutoffInHours: {\n      low: 3,\n      high: 6\n    }\n  },\n  {\n    name: SensorStatus.offline,\n    cutoffInHours: {\n      low: 7,\n      high: Infinity\n    }\n  }\n];\n\nexport const calculateSensorStatus = (lastSeenInHours) => {\n  for (let i = 0; i < SensorStatusCriteria.length; i++) {\n    const category = SensorStatusCriteria[i];\n    if (category.cutoffInHours.low <= lastSeenInHours && lastSeenInHours <= category.cutoffInHours.high) {\n      return category.name;\n    }\n  }\n}\n\nexport const returnSensorStatus = (currentDataForSensor) => {\n  switch (currentDataForSensor.sensor_status) {\n    case SensorStatus.active:\n      return null;\n    case SensorStatus.temporaryOffline:\n      return `Last seen: ${currentDataForSensor.lastSeen}h ago`;\n    case SensorStatus.offline:\n      return \"Sensor offline\";\n    default:\n      return null;\n  }\n}\n\n// ----- Misc\nexport const capitalizeFirstCharacter = (inputString) => {\n  if (inputString) return inputString.charAt(0).toUpperCase() + inputString.slice(1);\n  else return null;\n};\n\nexport const getDomainName = (url) => {\n  return new URL(url).hostname;\n}\n\nexport const getUrlAfterScreen = (url) => {\n  const screenString = 'screen';\n  const urlComponents = url.split(screenString);\n  return `${screenString}${urlComponents.pop()}`;\n}\n\nexport const removeLastDirectoryFromURL = (url) => {\n  const urlComponents = url.split('/');\n  // Remove the last component (directory)\n  urlComponents.pop();\n  // Reconstruct the URL with the last directory removed\n  return urlComponents.join('/') + '/';\n}\n\nexport const areDOMOverlapped = (rect1, rect2) => {\n  if (!(rect1.bottom < rect2.top || rect1.top > rect2.bottom)) {\n    if (rect1.top < rect2.top) return -1;\n    else return 1;\n  }\n  else return 0;\n}\n","import AQIdatabase from \"./AirQualityIndexHelper\";\n\n// Helper function to categorize AQI\nfunction linearPieceWise(aqiHigh, aqiLow, concenHigh, concenLow, val) {\n  return parseInt(\n    ((aqiHigh - aqiLow) / (concenHigh - concenLow)) * (val - concenLow) + aqiLow\n  );\n}\n// Returns AQI number value\nfunction convertToAQI(val) {\n  if (val == null)\n    return {\n      aqi: null,\n      aqi_category_index: null\n    };\n\n  for (let i = 0; i < AQIdatabase.length; i++) {\n    const category = AQIdatabase[i];\n    if (val >= category.rawPM2_5.low && val <= category.rawPM2_5.high) {\n      return {\n        aqi: linearPieceWise(category.aqiUS.high, category.aqiUS.low, category.rawPM2_5.high, category.rawPM2_5.low, val),\n        aqi_category_index: category.id\n      }\n    }\n  };\n}\n\nexport default convertToAQI;","import CustomThemes from '../Themes/CustomThemes';\n\nconst AQIdatabase = [\n  {\n    id: 0,\n    category: 'Good',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[0],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[0],\n    aqiUS: {\n      low: 0,\n      high: 50\n    },\n    rawPM2_5: {\n      low: 0.0,\n      high: 12.0\n    },\n    description: 'Air quality is satisfactory, and air pollution poses little or no risk',\n    healthSuggestions: {\n      outdoors: 'Enjoy outdoor activities, the air is great!',\n      indoors_generic: 'Enjoy clean indoor air',\n      indoors_dining_hall: 'Enjoy clean dining hall air',\n      indoors_gym: 'Enjoy clean air for physical activities indoors',\n      indoors_vulnerable: 'Enjoy clean indoor air'\n    }\n  },\n  {\n    id: 1,\n    category: 'Moderate',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[1],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[1],\n    aqiUS: {\n      low: 51,\n      high: 100\n    },\n    rawPM2_5: {\n      low: 12.1,\n      high: 35.4\n    },\n    description: 'Air quality is acceptable. However, there may be a risk for some people, particularly those who are unusually sensitive to air pollution',\n    healthSuggestions: {\n      outdoors: 'Children and individuals with respiratory issues might need to reduce prolonged outdoor exertion',\n      indoors_generic: 'Indoor air is acceptable, but not great',\n      indoors_dining_hall: 'Indoor air is acceptable, but not great<br>Avoid Grill area',\n      indoors_gym: 'Indoor air is acceptable, but not great',\n      indoors_vulnerable: 'Indoor air is acceptable, but not great'\n    }\n  },\n  {\n    id: 2,\n    category: 'Unhealthy for Sensitive Groups',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[2],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[2],\n    aqiUS: {\n      low: 101,\n      high: 150\n    },\n    rawPM2_5: {\n      low: 35.5,\n      high: 55.4\n    },\n    description: 'Members of sensitive groups may experience health effects. The general public is less likely to be affected',\n    healthSuggestions: {\n      outdoors: 'Children and individuals with respiratory issues should limit outdoor exertion',\n      indoors_dining_hall: 'Consider take-aways<br>Avoid Grill area',\n      indoors_gym: 'Individuals with respiratory issues should lower the intensity of indoor exercises',\n      indoors_vulnerable: 'Monitor closely individuals with respiratory issues for any symptom'\n    }\n  },\n  {\n    id: 3,\n    category: 'Unhealthy',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[3],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[3],\n    aqiUS: {\n      low: 151,\n      high: 200\n    },\n    rawPM2_5: {\n      low: 55.5,\n      high: 150.4\n    },\n    description: 'Some members of the general public may experience health effects; members of sensitive groups may experience more serious health effects',\n    healthSuggestions: {\n      outdoors: 'Everyone should limit outdoor activities<br>Wear masks when going outside',\n      indoors_dining_hall:\n        'Consider take-aways<br>Avoid Grill area<br>Come back at off-peak hours',\n      indoors_gym: 'Everyone should lower the intensity of indoor exercises',\n      indoors_vulnerable: 'Monitor closely individuals with respiratory issues for any symptom'\n    }\n  },\n  {\n    id: 4,\n    category: 'Very Unhealthy',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[4],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[4],\n    aqiUS: {\n      low: 201,\n      high: 300\n    },\n    rawPM2_5: {\n      low: 150.5,\n      high: 250.4\n    },\n    description: 'Health alert: The risk of health effects is increased for everyone',\n    healthSuggestions: {\n      outdoors: 'Avoid outdoor activities at all cost<br>Wear N95 masks when going outside',\n      indoors_dining_hall:\n        'Consider take-aways<br>Avoid Grill area<br>Come back at off-peak hours',\n      indoors_gym: 'Indoor air quality is not suitable for any physical activities',\n      indoors_vulnerable: 'Monitor closely individuals with respiratory issues for any symptom'\n    }\n  },\n  {\n    id: 5,\n    category: 'Hazardous',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[5],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[5],\n    aqiUS: {\n      low: 300,\n      high: 500\n    },\n    rawPM2_5: {\n      low: 250.5,\n      high: 550.5\n    },\n    description: 'Health warning of emergency conditions: everyone is more likely to be affected',\n    healthSuggestions: {\n      outdoors: 'Avoid outdoor activities at all cost<br>Wear N95 masks when going outside',\n      indoors_dining_hall:\n        'Consider take-aways<br>Avoid Grill area<br>Come back at off-peak hours',\n      indoors_gym: 'Indoor air quality is not suitable for any physical activities',\n      indoors_vulnerable: ''\n    }\n  },\n];\n\nexport default AQIdatabase;\n","import { fetchDataFromURL } from \"../Components/DatasetDownload/DatasetFetcher\";\nimport { calculateSensorStatus, SensorStatus } from \"../Pages/Screen/ScreenUtils\";\nimport convertToAQI from \"./AirQualityIndexCalculator\";\nimport AQIdatabase from \"./AirQualityIndexHelper\";\nimport parse from 'html-react-parser';\n\nexport const apiDomain = 'https://api.citiesair.com';\n\nexport const fetchAndProcessCurrentData = async (apiUrl) => {\n  try {\n    const data = await fetchDataFromURL(apiUrl, 'json', true);\n\n    if (!data) {\n      throw new Error('Returned data is empty');\n    }\n\n    try {\n      return processCurrentData(data);\n    } catch (error) {\n      // Handle the case where data is not an iterable object\n      console.error(\"Error: data is not iterable\", error);\n    }\n  }\n  catch (error) {\n    throw new Error(`Error fetching data: ${error.message}`);\n  }\n}\n\nexport const processCurrentData = (data) => {\n  Object.entries(data).map(([_, sensorData]) => {\n    // Calculate if the sensor is currently active or not\n    const now = new Date();\n    const currentTimestamp = new Date(sensorData.current?.timestamp);\n    const lastSeenInHours = Math.round((now - currentTimestamp) / 1000 / 3600);\n    if (sensorData.current) {\n      sensorData.current.lastSeenInHours = lastSeenInHours;\n      sensorData.current.sensor_status = calculateSensorStatus(lastSeenInHours);\n    }\n\n    // Calculate AQI from raw measurements\n    if (sensorData.current?.[\"pm2.5\"]) {\n      const aqiObject = convertToAQI(sensorData.current[\"pm2.5\"]);\n      if (aqiObject) {\n        const aqiCategory = AQIdatabase[aqiObject.aqi_category_index];\n        sensorData.current.aqi = aqiObject.aqi;\n        sensorData.current.category = aqiCategory.category;\n\n        // Only add color and healthSuggestion if the sensor is active\n        if (sensorData.current.sensor_status === SensorStatus.active) {\n          sensorData.current = {\n            ...sensorData.current,\n            color: aqiCategory.lightThemeColor,\n            healthSuggestion: aqiCategory.healthSuggestions[sensorData.sensor?.location_type] && parse(aqiCategory.healthSuggestions[sensorData.sensor?.location_type])\n          };\n        }\n      }\n    }\n  });\n  return data;\n}","var map = {\n\t\"./AirQualityIndexTable\": 692,\n\t\"./AirQualityIndexTable.jsx\": 692,\n\t\"./ChartSubstituteComponentLoader\": 5276,\n\t\"./ChartSubstituteComponentLoader.jsx\": 5276\n};\n\nfunction webpackAsyncContext(req) {\n\treturn Promise.resolve().then(function() {\n\t\tif(!__webpack_require__.o(map, req)) {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t}\n\n\t\tvar id = map[req];\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 6598;\nmodule.exports = webpackAsyncContext;"],"names":["displayLastUpdateAndSensorStatus","sensorData","isScreen","current","sensor_status","SensorStatus","variant","sx","mt","fontWeight","color","AQIdatabase","mr","timestamp","getFormattedElapsedTimeFromNow","props","currentData","temperatureUnitPreference","orderOfItems","container","justifyContent","verticalAlign","fontSize","fontFamily","Object","entries","map","index","numOfItems","key","item","order","keys","length","xs","Math","max","sm","lg","min","CustomThemes","className","sensor","location_long","location_short","lineHeight","aqi","category","getFormattedTemperature","rawTemp","temperature","currentUnit","TemperatureUnits","returnUnit","transform","rel_humidity","round","includes","location_type","calculateHeatIndex","returnSensorStatus","UppercaseTitle","text","display","textTransform","pb","ChartStyleWrapper","styled","Box","theme","palette","mode","filter","opacity","margin","overflowX","overflowY","scrollbarGutter","StyledTabs","Tabs","primary","breakpoints","down","paddingLeft","spacing","paddingRight","chartMaxHeight","renderedComponent","passedChartData","chartData","passedChartHeight","chartHeight","isHomepage","passedDataArray","dataArray","isSmallWidth","useMediaQuery","useState","window","matchMedia","matches","isPortrait","setIsPortrait","innerWidth","innerHeight","windowSize","setWindowSize","useContext","TabContext","setTab","indexValue","setIndexValue","useEffect","timeoutID","handleWindowResize","clearTimeout","setTimeout","addEventListener","removeEventListener","chartType","subcharts","subchartIndex","height","maxHeight","value","onChange","__","newValue","prevState","chartIndex","element","label","subchartTitle","position","width","role","transition","pointerEvents","top","StyledTable","Table","isTiny","minWidth","secondary","hideAQIDescription","themePreference","overflow","size","pr","pl","align","border","backgroundColor","ThemePreferences","lightThemeColor","darkThemeColor","name","aqiUS","low","high","rawPM2_5","description","parse","healthSuggestions","outdoors","replace","replacePlainHTMLWithMuiComponents","ChartSubstituteComponentLoader","chartSubstituteComponentName","Suspense","fallback","ChartSubstituteComponent","lazy","ChartControlType","CategoryFilter","stackDirection","DateRangeFilter","ChartRangeFilter","NumberRangeFilter","generateRandomID","random","toString","substr","hideAnnotations","stem","textStyle","boxStyle","returnResponsiveFontSizeInPixels","isSmaller","returnGenericOptions","axisTitleTextStyle","italic","bold","chart","axisTitle","axisTextStyle","axisText","options","curveType","crosshair","orientation","trigger","fill","chartArea","portrait","landscape","tooltip","isHtml","showColorCode","legend","alignment","scrollArrows","activeColor","inactiveColor","pagingTextStyle","vAxis","format","title","viewWindow","hAxis","slantedText","slantedTextAngle","colors","optionsColors","series","values","forEach","_serie","serie","main","trendlines","_item","colorAxis","colorAxisFirstColor","multiColor","colorIndex","NYUpurple","aqiColorAxis","titleTextStyle","gridlines","minorGridlines","count","annotations","highContrast","contrastText","thickness","rx","shape","borderRadius","ry","annotationBoxFill","fillOpacity","seriesSelector","pointSize","enableInteractivity","textPosition","viewWindowMode","returnCalendarChartOptions","existingOptions","calendarDimensions","calculateCalendarDimensions","cellSizeMin","cellSizeMax","chartWidth","calendar","cellSize","yearLabel","yearLabelFontSize","noDataPattern","returnChartControlUI","chartControl","mainChartData","mainChartOptions","chartControlUI","ui","snapToData","controlType","chartView","columns","chartOptions","addTouchEventListenerForChartControl","controlWrapper","chartID","touchHandler","event","first","changedTouches","type","simulatedEvent","MouseEvent","bubbles","cancelable","view","detail","screenX","screenY","clientX","clientY","button","relatedTarget","target","dispatchEvent","preventDefault","controlDOM","document","querySelector","touchEvent","capture","HeatMap","publishedSheetId","gid","range","embedLink","style","src","memo","GoogleChartStyleWrapper","maxWidth","padding","background","marginTop","marginBottom","borderColor","paper","paddingTop","paddingBottom","borderWidth","left","right","stroke","strokeWidth","cursor","SELECT_ALL","SeriesSelector","itemsFromChart","items","selectorID","allowMultiple","onSeriesSelection","useTheme","MenuProps","PaperProps","ITEM_HEIGHT","customAlternateBackground","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","setItems","selectAll","setSelectAll","every","selected","handleChange","updatedItems","selectedItems","some","selectedItem","handleItemToggle","existingItem","direction","alignItems","labelId","id","multiple","renderValue","renderedLabel","disabled","checked","onClick","p","borderTop","bottom","zIndex","onDelete","getTooltip","dataTable","rowNum","getValue","SubChart","customClassName","pt","GoogleContext","google","_","setDataTable","chartWrapper","setChartWrapper","dashboardWrapper","setDashboardWrapper","setControlWrapper","isFirstRender","setIsFirstRender","allInitialColumns","setAllInitialColumns","dataColumns","setDataColumns","initialVAxisRange","setInitialVAxisRage","chartTotalHeight","setChartTotalHeight","hasChartControl","chartControlOptions","control","handleSeriesSelection","setOptions","draw","method","setInitialColumnsColors","getInitialColumns","initialView","getView","viewFromDataTable","visualization","DataView","setView","shouldAssignDomainRoleToFistColumn","dataSeriesIndex","col","sourceColumn","getColumnLabel","indexInAllInitialColumns","seriesIndex","getInitialVAxisRange","visibleInLegend","serieAttribute","vAxisMin","vAxisMax","getColumnRange","isNaN","newDataColumns","_chartWrapper","hiddenSeriesObject","newViewColumns","push","dataColumn","i","newOptions","selectedSeriesCount","reconstructFunctionFromJSONstring","evaluatedColumns","column","calc","calcFunction","eval","thisDataTable","arrayToDataTable","reconstructedColumns","thisChartWrapper","ChartWrapper","undefined","containerId","thisDashboardWrapper","Dashboard","getElementById","events","addListener","onChartReady","thisControlWrapper","ControlWrapper","bind","initColumns","renderChart","renderedHeight","getBBox","minHeight","AirQualityIndexLegendQuickGlance","anchorEl","setAnchorEl","handlePopperOpen","currentTarget","Tracking","handlePopperClose","open","Boolean","FadeInButtonForSpeedDial","distanceFromBottomOfWindow","Fab","onMouseEnter","onMouseLeave","isMobile","Air","Popper","placement","onClose","keepMounted","disableRestoreFocus","TransitionProps","Fade","timeout","Paper","elevation","py","mb","mx","AirQualityIndexTable","PickersDay","content","DialogToScreen","schoolID","screens","popupId","popupState","bindHover","bindFocus","Tv","HoverMenu","bindMenu","close","screen","MenuItemAsNavLink","behavior","NavLinkBehavior","to","screen_name","LinkButtonToScreen","url","component","Link","Array","isArray","SchoolSelector","currentSchoolID","currentSchoolName","allowedSchools","fetchDashboardData","CustomChip","icon","Place","tooltipTitle","setSchoolID","handleClose","handleItemSelect","clickable","Menu","MenuListProps","MenuList","dense","school","school_id","sampleData","otherProps","enterDelay","leaveDelay","lastUpdate","currentSensorData","dashboardData","LinkContext","setChartsTitlesList","tab","chartsTitles","project","chartTitle","FullWidthBox","Container","currentSchool","Person","contactPerson","Email","contactEmail","href","BarChart","scrollToSection","jsonData","destination_id","destination_label","origin_id","textAlign","CurrentAQIGrid","gutterBottom","ChartComponent","sheetId","my","subtitle","subchartSubtitle","reference","Divider","setCurrentPage","UserContext","authenticated","checkAuthentication","navigate","useNavigate","setDashboardData","setCurrentSensorData","setAllowedSchools","fetchDataFromURL","then","data","sensors","processedCurrentSensorData","processCurrentData","dateString","inputDate","Date","timeDifference","seconds","floor","minutes","hours","days","active","temporaryOffline","offline","SensorStatusCriteria","cutoffInHours","Infinity","calculateSensorStatus","lastSeenInHours","currentDataForSensor","lastSeen","capitalizeFirstCharacter","inputString","charAt","toUpperCase","slice","getDomainName","URL","hostname","getUrlAfterScreen","screenString","urlComponents","split","pop","areDOMOverlapped","rect1","rect2","linearPieceWise","aqiHigh","aqiLow","concenHigh","concenLow","val","parseInt","aqi_category_index","indoors_generic","indoors_dining_hall","indoors_gym","indoors_vulnerable","fetchAndProcessCurrentData","apiUrl","Error","console","error","message","now","currentTimestamp","aqiObject","convertToAQI","aqiCategory","healthSuggestion","webpackAsyncContext","req","Promise","resolve","__webpack_require__","o","e","code","module","exports"],"sourceRoot":""}