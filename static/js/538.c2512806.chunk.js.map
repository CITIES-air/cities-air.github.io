{"version":3,"file":"static/js/538.c2512806.chunk.js","mappings":"yPAcA,MAyHMA,EAAmCC,IAA+B,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,IAA7B,WAAEC,EAAU,SAAEC,GAAUP,EAChE,OAAIO,GAAYD,EAAWE,QAAQC,gBAAkBC,EAAAA,GAAaC,OAAe,MAG7EC,EAAAA,EAAAA,MAACC,EAAAA,EAAU,CACTC,QAASP,EAAW,KAAO,UAC3BQ,GAAI,CACFC,GAAI,EACJC,WAAYV,GAAY,kBACxBW,SAAA,EAGkB,QAAlBjB,EAAAK,EAAWE,eAAO,IAAAP,OAAA,EAAlBA,EAAoBQ,iBAAkBC,EAAAA,GAAaC,SAEnDC,EAAAA,EAAAA,MAAAO,EAAAA,SAAA,CAAAD,SAAA,EACEE,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACRN,GAAI,CACF,MAAO,CACLO,MAAM,GAADC,OAAKC,EAAAA,EAAY,GAAGC,gBAAe,gBAE1CC,GAAI,MACD,kBAGV,eAEmB,QAAlBxB,EAAAI,EAAWE,eAAO,IAAAN,GAAlBA,EAAoByB,WAA8B,QAArBxB,EAAIG,EAAWsB,cAAM,IAAAzB,GAAjBA,EAAmB0B,UAAS,IAAAN,QACvDO,EAAAA,EAAAA,KAAiD,QAAlB1B,EAAAE,EAAWE,eAAO,IAAAJ,OAAA,EAAlBA,EAAoBuB,aAA8B,QAArBtB,EAAIC,EAAWsB,cAAM,IAAAvB,OAAA,EAAjBA,EAAmBwB,YAAU,QACjG,OACO,EAInB,EA1JwBE,IACtB,MAAM,mBAAEC,EAAkB,0BAAEC,EAAyB,SAAE1B,GAAW,GAASwB,EAU3E,OACEX,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CACHC,WAAS,EACTC,eAAe,SACfrB,GAAI,CACF,qBAAsB,CACpBsB,cAAe,MACfC,SAAU/B,EAAW,KAAO,QAE9B,MAAO,CACLU,WAAY,OAEd,mBAAoB,CAClBsB,WAAY,iDACZ,MAAO,CACLA,WAAY,oDAGhBrB,SAGAc,EAEGQ,OAAOC,QAAQT,GAAoBU,KAAI,CAAAC,EAAoBC,KAAK,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,IAAvBC,EAAKpD,GAAWqC,EAAA,OACxD/B,EAAAA,EAAAA,MAACsB,EAAAA,GAAI,CACHyB,MAAI,MAjCSC,EAmCOpB,OAAOqB,KAAK7B,GAAoB8B,OAlCvD,CACLC,GAAIC,KAAKC,IAAI,GAAKL,EAAY,GAC9BM,GAAIF,KAAKC,IAAI,GAAKL,EAAY,GAC9BO,GAAI5D,EAAY,GAAKqD,EAAcI,KAAKI,IAAI,EAAGJ,KAAKC,IAAI,GAAKL,EAAY,MAgCjE7C,IACoB,QAAlB8B,EAAAvC,EAAWE,eAAO,IAAAqC,OAAA,EAAlBA,EAAoBpC,iBAAkBC,EAAAA,GAAaC,QACnD,CAAE,MAAO,CAAEW,MAAM,GAADC,OAAK8C,EAAAA,EAAaC,UAAUC,QAAQC,kBACrDtD,SAAA,EAEDN,EAAAA,EAAAA,MAAC6D,EAAAA,EAAG,CAAC1D,GAAI,CAAE,MAAO,CAAEO,MAAyB,QAApBwB,EAAExC,EAAWE,eAAO,IAAAsC,OAAA,EAAlBA,EAAoBxB,QAAUJ,SAAA,EACvDE,EAAAA,EAAAA,KAACP,EAAAA,EAAU,CAACC,QAASP,EAAW,KAAO,KAAMU,WAAW,MAAMyD,UAAU,gBAAexD,UACnE,QAAjB6B,EAAAzC,EAAWsB,cAAM,IAAAmB,OAAA,EAAjBA,EAAmB4B,iBAAkC,QAArB3B,EAAI1C,EAAWsB,cAAM,IAAAoB,OAAA,EAAjBA,EAAmB4B,iBAAkB,sBAE5ExD,EAAAA,EAAAA,KAACP,EAAAA,EAAU,CAACC,QAASP,EAAW,KAAO,KAAMU,WAAW,MAAM4D,WAAYtE,EAAW,GAAM,GAAIW,UAC1E,QAAlB+B,EAAA3C,EAAWE,eAAO,IAAAyC,OAAA,EAAlBA,EAAoB6B,MAAO,QAE9B1D,EAAAA,EAAAA,KAACP,EAAAA,EAAU,CAACC,QAASP,EAAW,KAAO,KAAMU,WAAW,MAAMyD,UAAU,gBAAexD,UAClE,QAAlBgC,EAAA5C,EAAWE,eAAO,IAAA0C,OAAA,EAAlBA,EAAoB6B,WAAY,WAIrCnE,EAAAA,EAAAA,MAAC6D,EAAAA,EAAG,CAAC1D,GAAI,CACP,MAAO,CACLO,MACEf,GACoB,QAAlB4C,EAAA7C,EAAWE,eAAO,IAAA2C,OAAA,EAAlBA,EAAoB1C,iBAAkBC,EAAAA,GAAaC,OACjD,UAAY0D,EAAAA,EAAaC,UAAUC,QAAQC,eAE3C,kBACLxD,GAAIT,EAAW,EAAI,GACrBmE,UAAU,gBAAexD,SAAA,EAC1BN,EAAAA,EAAAA,MAACC,EAAAA,EAAU,CAACC,QAASP,EAAW,KAAO,QAAQW,SAAA,EAC7CE,EAAAA,EAAAA,KAAC4D,EAAAA,EAAc,KAEbC,EAAAA,EAAAA,IAAwB,CACtBC,QAA2B,QAApB9B,EAAE9C,EAAWE,eAAO,IAAA4C,OAAA,EAAlBA,EAAoB+B,YAC7BC,YAAaC,EAAAA,GAAiBC,QAC9BC,WAAYtD,IAEf,iBAEDb,EAAAA,EAAAA,KAACoE,EAAAA,EAAa,CAACzE,GAAI,CAAE0E,UAAW,iBACb,QAAlBpC,EAAA/C,EAAWE,eAAO,IAAA6C,GAAlBA,EAAoBqC,aAAe1B,KAAK2B,MAAwB,QAAnBrC,EAAChD,EAAWE,eAAO,IAAA8C,OAAA,EAAlBA,EAAoBoC,cAAgB,KAAK,OAIxF,CAAC,WAAY,eAAeE,SAA0B,QAAlBrC,EAACjD,EAAWsB,cAAM,IAAA2B,OAAA,EAAjBA,EAAmBsC,iBACxDzE,EAAAA,EAAAA,KAACP,EAAAA,EAAU,CAACC,QAASP,EAAW,QAAU,QAASQ,GAAI,CAAEE,WAAY,kBAAmBC,UACrF4E,EAAAA,EAAAA,IAAmB,CAClBZ,QAA2B,QAApB1B,EAAElD,EAAWE,eAAO,IAAAgD,OAAA,EAAlBA,EAAoB2B,YAC7BC,YAAaC,EAAAA,GAAiBC,QAC9BI,aAAgC,QAApBjC,EAAEnD,EAAWE,eAAO,IAAAiD,OAAA,EAAlBA,EAAoBiC,aAClCH,WAAYtD,MAKhBlC,EAAiC,CAAEO,aAAYC,gBAMjDD,EAAWG,gBAAkBC,EAAAA,GAAaC,SAC1CS,EAAAA,EAAAA,KAACP,EAAAA,EAAU,CAACC,QAASP,EAAW,KAAO,QAASmE,UAAU,gBAAexD,UACtE6E,EAAAA,EAAAA,IAAmBzF,OA/DnBoD,GAlCQE,KAoGR,KAKPhD,EAAAA,EAAAA,MAACoF,EAAAA,EAAK,CAACC,UAAU,SAASC,WAAW,SAAS9D,eAAe,SAAQlB,SAAA,EACnEE,EAAAA,EAAAA,KAAC+E,EAAAA,EAAQ,CAACrF,QAAQ,OAAOC,GAAI,CAAEqF,MAAO,QAAS9D,SAAU,WACzDlB,EAAAA,EAAAA,KAAC+E,EAAAA,EAAQ,CAACrF,QAAQ,OAAOC,GAAI,CAAEqF,MAAO,OAAQ9D,SAAU,OAAQ+D,IAAK,QACrEjF,EAAAA,EAAAA,KAAC+E,EAAAA,EAAQ,CAACrF,QAAQ,OAAOC,GAAI,CAAEqF,MAAO,QAAS9D,SAAU,WACzDlB,EAAAA,EAAAA,KAAC+E,EAAAA,EAAQ,CAACrF,QAAQ,OAAOC,GAAI,CAAEqF,MAAO,SAAU9D,SAAU,WAC1DlB,EAAAA,EAAAA,KAAC+E,EAAAA,EAAQ,CAACrF,QAAQ,OAAOC,GAAI,CAAEqF,MAAO,SAAU9D,SAAU,cAI7D,C,mOCrHX,MAiSA,EA/R+BP,IAC7B,MAAM,KAAEuE,GAASvE,GAEVwE,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,GAErCC,GAAiBC,EAAAA,EAAAA,UACjBC,GAAkBD,EAAAA,EAAAA,UAClBE,GAAaF,EAAAA,EAAAA,UACbG,GAAoBH,EAAAA,EAAAA,UACpBI,GAAaJ,EAAAA,EAAAA,UAEnB,IAAIK,EAAKZ,EAAOa,EAAQC,EAAOC,EAC3BC,EAAkB,IACtB,MAEMC,EAAgB,GAAhBA,EAA2B,GAA3BA,EAAgD,GAGhDC,EAAgBC,EAAAA,MAEnBC,GAAE,SAAUC,GACX,OAAOP,EAAMO,EAAE9F,UACjB,IACC+F,GAAE,SAAUD,GACX,OAAON,EAAMM,EAAE3C,IACjB,IACC6C,MAAMJ,EAAAA,IAAiBK,QAAQ,IAmNlC,OAjNAC,EAAAA,EAAAA,YAAU,KACR,IAAKvB,EAAM,OACX,IAAKI,EAAelG,QAAS,OAC7B,IAAKoG,EAAgBpG,QAAS,OAC9B,IAAKqG,EAAWrG,QAAS,OACzB,IAAKsG,EAAkBtG,QAAS,OAChC,IAAKuG,EAAWvG,QAAS,OAEzBwG,EAAMO,EAAAA,GAAUb,EAAelG,SAC/B4F,EAAQM,EAAelG,QAAQsH,YAC/Bb,EAASP,EAAelG,QAAQuH,aAAeV,EAG/CE,EAAAA,GAAUX,EAAgBpG,SAASwH,UAAU,KAAKC,SAClDV,EAAAA,GAAUV,EAAWrG,SAASwH,UAAU,KAAKC,SAC7CV,EAAAA,GAAUT,EAAkBtG,SAASwH,UAAU,KAAKC,SACpDV,EAAAA,GAAUR,EAAWvG,SAASwH,UAAU,KAAKC,SAE7CV,EAAAA,GAAUX,EAAgBpG,SACvB0H,KAAK,UAAW,IACnBX,EAAAA,GAAUV,EAAWrG,SAClB0H,KAAK,SAAU,+CAElB1F,OAAOC,QAAQ6D,GAAM6B,SAAQxF,IAAwB,IAADyF,EAAA,IAArB1E,EAAKpD,GAAWqC,EAQ7C,GANqB,QAArByF,EAAA9H,EAAW+H,kBAAU,IAAAD,GAArBA,EAAuBD,SAAQ,SAAUV,GACvCA,EAAE9F,UAAY,IAAI2G,KAAKb,EAAE9F,WACzB8F,EAAE3C,KAAMyD,EAAAA,EAAAA,GAAad,EAAE,UAAU3C,GACnC,IAGIxE,EAAW+H,YAAcG,MAAMC,QAAQnI,EAAW+H,YAAa,CACjE,MAAMpE,EAAMsD,EAAAA,IAAOjH,EAAW+H,YAAY,SAAUZ,GAClD,OAAOA,EAAE3C,GACX,IACIb,EAAMmD,IAAiBA,EAAkBnD,EAC/C,KAIFmD,EAAoD,GAAlCpD,KAAK0E,KAAKtB,EAAkB,IAE9C,IAAK,IAAIrC,KAAYvD,EAAAA,EACnB,GAAI4F,GAAmBrC,EAAS4D,MAAMC,KAAOxB,GAAmBrC,EAAS4D,MAAME,KAAM,CACnFzB,EAAkBrC,EAAS4D,MAAME,KACjC,KACF,CAIF,IAAIC,EAAW,IAAIR,KACfS,EAAW,IAAIT,KACnBS,EAASC,SAASD,EAASE,WAlFQ,GAmFnC/B,EAAQK,EAAAA,KAAe2B,OAAO,CAACH,EAAUD,IAAWK,WAAW,CAAC9B,EAAajB,EAAQiB,IAGrFF,EAAQI,EAAAA,MAAiB2B,OAAO,CAAC,EAAG9B,IAAkBgC,MAAM,CAACnC,EAASI,EAAYA,IAGlF,IAAIgC,EAAYrF,KAAKsF,OAAS9H,EAAAA,EAAY,GAAGmH,MAAME,KAAOrH,EAAAA,EAAY,GAAGmH,MAAME,MAAQzB,EAAmBH,EAAU,GAChHsC,EAAavF,KAAKsF,MAAMD,EAAY,GAExC,IAAK,IAAIG,EAAI,EAAGA,EAAIhI,EAAAA,EAAYsC,OAAQ0F,IAAK,CAC3C,MAAMzE,EAAWvD,EAAAA,EAAYgI,GAC7B,GAAIpC,GAAmBrC,EAAS4D,MAAMC,IAAK,MAE3C,MAAMa,EAAwE,GAA7DzF,KAAK0E,MAAM3D,EAAS4D,MAAME,KAAO9D,EAAS4D,MAAMC,KAAO,IACxErB,EAAAA,GAAUX,EAAgBpG,SACvBkJ,OAAO,QACPxB,KAAK,IAAK,GACVA,KAAK,IAAKjB,EAAUlC,EAAS4D,MAAME,KAAOzB,EAAmBH,EAASI,GACtEa,KAAK,QAAS9B,GACd8B,KAAK,SAAUuB,EAAWrC,EAAkBH,GAC5CiB,KAAK,OAAQnD,EAAStD,iBAGzB8F,EAAAA,GAAUV,EAAWrG,SAClBkJ,OAAO,QACPxB,KAAK,IAAKqB,GACVrB,KACC,IACAjB,EACClC,EAAS4D,MAAMC,IAAMxB,EAAmBH,EACzC,IAAMsC,EAAalC,GAEpBa,KAAK,OAAQnD,EAAStD,iBACtByG,KAAK,YAAamB,GAClBM,KAA2C,GAAtC3F,KAAKsF,MAAMvE,EAAS4D,MAAMC,IAAM,KAExCrB,EAAAA,GAAUV,EAAWrG,SAClBkJ,OAAO,QACPxB,KAAK,QAAS,0BACdA,KAAK,IAAKqB,EAAa,GACvBrB,KACC,IACAjB,EAAUlC,EAAS4D,MAAMC,IAAMxB,EAAmBH,EAASsC,EAAalC,GAEzEa,KAAK,OAAQnD,EAAStD,iBACtByG,KAAK,YAAamB,EAAY,GAC9BM,KAAK5E,EAASA,SACnB,CAGAwC,EAAAA,GAAUT,EAAkBtG,SACzBkJ,OAAO,QACPxB,KAAK,IAAK,GACVA,KAAK,IAAK,GACVA,KAAK,QAAS9B,GACd8B,KAAK,SAAUb,GACfa,KAAK,OAAQ,SAGhB,IAAI0B,EAAarC,EAAAA,IAAc,SAC/BA,EAAAA,GAAUT,EAAkBtG,SACzBkJ,OAAO,KACPxB,KAAK,YAAY,eAAD3G,OAAiB8F,EAAU,MAC3CwC,KACCtC,EAAAA,IACWL,GACR4C,UAAU7C,GACV8C,MAAMxC,EAAAA,IAAcyC,MAvIT,MAwIXC,YAAW,SAAUxC,GACpB,OAAOmC,EAAWnC,EACpB,KAEHS,KAAK,YAAamB,EAAY,MAC9BnB,KAAK,QAAS7D,EAAAA,EAAaC,UAAUC,QAAQC,gBAC7C0F,OAAO,WACPjC,SACHV,EAAAA,GAAUT,EAAkBtG,SACzBwH,UAAU,QACVE,KAAK,SAAU,SACfA,KAAK,eAAgB,GACrBA,KAAK,UAAW,IAEnB1F,OAAOC,QAAQ6D,GAAM6B,SAAQnI,IAAwB,IAAD+C,EAAAoH,EAAAC,EAAA,IAArB1G,EAAKpD,GAAWN,EAE7CuH,EAAAA,GAAUR,EAAWvG,SAClBkJ,OAAO,QACPW,MAAM/J,EAAW+H,YAAc,IAC/BH,KAAK,IAAKb,GACVa,KAAK,QAAS,QACdA,KAAK,IAAKZ,GACVY,KAAK,OAAQ,eACbA,KAAK,SAAU,SACfA,KAAK,eAAgB,OACrBA,KAAK,UAAgD,cAApB,QAAjBnF,EAAAzC,EAAWsB,cAAM,IAAAmB,OAAA,EAAjBA,EAAmB8C,eAA+B,EAAI,IAGzE,MAAMyE,GAAsC,QAArBH,EAAA7J,EAAW+H,kBAAU,IAAA8B,OAAA,EAArBA,EAAuBrG,QAAS,EAAyB,QAAxBsG,EAAG9J,EAAW+H,kBAAU,IAAA+B,OAAA,EAArBA,EAAwB,GAAK,KACxF,GAAIE,EAAgB,CAAC,IAADzH,EAAAC,EAAAG,EAAAD,EAClB,MAAMuH,EAAY/I,EAAAA,GAAY+G,EAAAA,EAAAA,GAAa+B,EAAe,UAAUE,oBAC9DC,EAAgBlD,EAAAA,GAAUR,EAAWvG,SACxCkJ,OAAO,KACPxB,KACC,YACA,aACAhB,EAAMoD,EAAe3I,WACrB,IACAwF,EAAMmD,EAAexF,KACrB,KAEDoD,KAAK,QACc,QAAlBrF,EAAAvC,EAAWE,eAAO,IAAAqC,OAAA,EAAlBA,EAAoBpC,iBAAkBC,EAAAA,GAAaC,OAC/C4J,EAAU9I,gBACV4C,EAAAA,EAAaC,UAAUC,QAAQC,iBAGrB,QAAlB1B,EAAAxC,EAAWE,eAAO,IAAAsC,OAAA,EAAlBA,EAAoBrC,iBAAkBC,EAAAA,GAAaC,QACjD8J,EAAcf,OAAO,UAClBxB,KAAK,KAAM,GACXA,KAAK,KAAM,GACXA,KAAK,SAAU,mBACfA,KAAK,QAAS,cACdA,KAAK,IAAK,IAEfuC,EAAcf,OAAO,UAClBxB,KAAK,KAAM,GACXA,KAAK,KAAM,GACXA,KAAK,SAAU,QACfA,KAAK,SAA2B,QAAlBjF,EAAA3C,EAAWE,eAAO,IAAAyC,OAAA,EAAlBA,EAAoBxC,iBAAkBC,EAAAA,GAAaC,QAAU,aAC3EuH,KAAK,IAnMI,IAqMZuC,EAAcf,OAAO,QAClBxB,KAAK,QAAS,kBACdA,KAAK,IAAKwC,IACVxC,KAAK,IAAK,GACVA,KAAK,OAAQ,SACbA,KAAK,qBAAsB,UAC3BA,KAAK,cAAe,QACpBA,KAAK,YAAamB,EAAY,GAC9BM,MAAKgB,EAAAA,EAAAA,IAA0C,QAAlB3H,EAAC1C,EAAWsB,cAAM,IAAAoB,OAAA,EAAjBA,EAAmB4B,iBAEpD,MAAMgG,EAAiBC,SAASC,uBAAuB,kBACvD,IAAK,IAAItB,EAAI,EAAGA,EAAIoB,EAAe9G,OAAQ0F,IAAK,CAC9C,MAAMuB,EAAkBH,EAAepB,EAAI,GACrCwB,EAAkBJ,EAAepB,GACjCyB,GAAaC,EAAAA,EAAAA,IAAiBH,EAAgBI,wBAAyBH,EAAgBG,yBAE1E,IAAfF,IACFF,EAAgBK,aAAa,IAtNrB,GAsN0BH,GAClCD,EAAgBI,aAAa,IAvNrB,IAuN4BH,GAExC,CACF,IACA,GAED,CAAC3E,KAGFlF,EAAAA,EAAAA,KAACqD,EAAAA,EAAG,CACF1D,GAAI,CACF,gBAAiB,CACfsK,UAAW,iEACX,wBAAyB,CACvB,KAAM,CACJ5F,UAAW,cAEb,MAAO,CAAC,EACR,OAAQ,CACN6F,QAAS,KAIf,eAAgB,CACdD,UAAW,gEACX,uBAAwB,CACtB,KAAM,CACJ5F,UAAW,cAEb,MAAO,CACLA,UAAW,WACX8F,OAAQ,+CAEV,OAAQ,CACN9F,UAAW,iBAKnBW,MAAM,OACNa,OAAO,OAAM/F,UAEbN,EAAAA,EAAAA,MAAA,OACE4K,GAAG,0BACHpF,MAAM,OACNa,OAAO,OACPwE,IAAK/E,EAAexF,SAAA,EAEpBE,EAAAA,EAAAA,KAAA,KAAGqK,IAAK7E,KACRxF,EAAAA,EAAAA,KAAA,KAAGqK,IAAK3E,KACR1F,EAAAA,EAAAA,KAAA,KAAGqK,IAAK5E,KACRzF,EAAAA,EAAAA,KAAA,KAAGqK,IAAK1E,QAEN,E,iCClRV,MA+QA,EA/QepE,IAA2C,IAA1C,MAAE+I,EAAK,0BAAEzJ,GAA2BU,EAClD,MAAM,KAAEgJ,IAASC,EAAAA,EAAAA,YAAWC,EAAAA,GACtBC,GAAWC,EAAAA,EAAAA,OASjBlE,EAAAA,EAAAA,YAAU,KACRgD,SAASa,MAAQA,CAAK,GACrB,CAACA,IAEJ,MAAOM,EAAkBC,IAAuBxF,EAAAA,EAAAA,aAEzCH,EAAM4F,IAAWzF,EAAAA,EAAAA,UAAS,CAAC,IAGlCoB,EAAAA,EAAAA,YAAU,KAIR,SAASsE,IAKP,OAAmC,IAJtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IACrC,IAAI7D,MACW8D,WAG3B,CAEAH,EAAoBE,KAGpB,MACME,EAAaC,aAAY,KAC7BL,EAAoBE,IAAyB,GAFlB,OAK7B,MAAO,KACLI,cAAcF,EAAW,CAC1B,GACA,KAGHxE,EAAAA,EAAAA,YAAU,KACR,MAAM2E,GAAMC,EAAAA,EAAAA,IAAU,CAAEC,SAAUC,EAAAA,GAAUC,SAC5C,IAAKJ,EAAK,QAEVK,EAAAA,EAAAA,IAAkCL,GAC/BM,MAAMxG,IACL4F,EAAQ5F,EAAK,IAEdyG,OAAOC,IACNC,QAAQC,IAAIF,GAEZlB,EAAS,SAAS,IAItB,MACMO,EAAaC,aAAY,MAC7BO,EAAAA,EAAAA,IAAkCL,GAC/BM,MAAMxG,IACL4F,EAAQ5F,EAAK,IAEdyG,OAAOC,GAAUC,QAAQC,IAAIF,IAAO,GANnB,KAUtB,MAAO,KACLT,cAAcF,EAAW,CAC1B,GACA,IAEH,MAAMc,EAAuBA,KAE3B,IAAK3K,OAAO4K,OAAO9G,GAAM0D,OAAO1J,IAAU,IAAAuC,EAAA,OAAuB,QAAlBA,EAAAvC,EAAWE,eAAO,IAAAqC,OAAA,EAAlBA,EAAoBpC,iBAAkBC,EAAAA,GAAaC,MAAM,IAAG,OAAO,KAElH,IAAI0M,EAAaC,EAEjB,IAAK,IAAI9D,EAAI,EAAGA,EAAIhH,OAAO4K,OAAO9G,GAAMxC,OAAQ0F,IAAK,CAAC,IAADzG,EACnD,MAAMzC,EAAakC,OAAO4K,OAAO9G,GAAMkD,GACvC,GAAyC,cAApB,QAAjBzG,EAAAzC,EAAWsB,cAAM,IAAAmB,OAAA,EAAjBA,EAAmB8C,gBAErB,GADAwH,EAAc/M,EAAWE,QAAQsE,IAC7BuI,GAAe7L,EAAAA,EAAY,GAAGmH,MAAME,KAAM,OAAO,UAElDyE,EAAahN,EAAWE,QAAQsE,GACvC,CAEA,MAAMyI,EAAQF,EAAcC,EAC5B,IAAIE,EACJ,GAAID,GAAS,EAAGC,EAAU,GAAAjM,OAAMkM,WAAWF,GAAOG,QAAQ,GAAE,cACvD,MAAIH,EAAQ,KACZ,OAAO,KADUC,EAAU,GAAAjM,OAAMyC,KAAK2B,OAAc0H,EAAcC,GAAcA,EAApC,KAAgD,IACjF,CAEhB,OACElM,EAAAA,EAAAA,KAACuM,EAAAA,GAAQ,CAAAzM,UACPE,EAAAA,EAAAA,KAACwM,EAAAA,EAAY,CAACC,SACZjN,EAAAA,EAAAA,MAAAO,EAAAA,SAAA,CAAAD,SAAA,CAAE,kBACAE,EAAAA,EAAAA,KAACP,EAAAA,EAAU,CACTiN,UAAU,OACVxM,MAAK,GAAAC,OAAKC,EAAAA,EAAY,GAAGC,gBAAe,eAAcP,SAAA,IAAAK,OAEjDiM,EAAU,OACJ,6BAGR,EAIf,OACE5M,EAAAA,EAAAA,MAACsB,EAAAA,GAAI,CACHC,WAAS,EACT4L,aAAa,UACb7H,WAAW,UACXe,OAAO,QACPlG,GAAI,CACFiN,SAAU,SACVC,WAAY,QACZ,MAAO,CACLhN,WAAY,kBAEd,mBAAoB,CAClBsB,WAAY,iDACZ,MAAO,CACLA,WAAY,mDAGhB,iBAAkB,CAChB,yBAA0B,CACxBjB,MAAM,GAADC,OAAKC,EAAAA,EAAY,GAAGC,gBAAe,eACxC6J,QAAS,IAEXhK,MAAM,GAADC,OAAKC,EAAAA,EAAY,GAAGC,gBAAe,eACxC4J,UAAW,kEACX,yBAA0B,CACxB,KAAM,CACJC,QAAS,GAEX,MAAO,CACLA,QAAS,IAEX,OAAQ,CACNA,QAAS,MAIfpK,SAAA,EAEFE,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CACHyB,MAAI,EACJI,GAAI,EACJhD,GAAI,CACFmN,GAAI,EACJC,GAAI,EACJC,MAAOpC,EAAmB,EAAI,EAC9BiC,WAAY,WACZ/M,UAEFN,EAAAA,EAAAA,MAACoF,EAAAA,EAAK,CACJC,UAAU,SACV7D,eAAe,gBACf6E,OAAO,OACPoH,UAAU,SAAQnN,SAAA,EAElBN,EAAAA,EAAAA,MAAC6D,EAAAA,EAAG,CAAAvD,SAAA,EACFE,EAAAA,EAAAA,KAACP,EAAAA,EAAU,CAACC,QAAQ,KAAKG,WAAW,MAAMK,MAAM,QAAOJ,SAAC,6BAGxDE,EAAAA,EAAAA,KAACP,EAAAA,EAAU,CAACC,QAAQ,KAAK4D,UAAU,gBAAgBpD,MAAO+C,EAAAA,EAAaC,UAAUC,QAAQC,eAAetD,SAAC,wCAK3GE,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CACHC,WAAS,EACTC,eAAe,eAAclB,UAE7BE,EAAAA,EAAAA,KAACkN,EAAAA,EAAc,CAACtM,mBAAoBsE,EAAMrE,0BAA2BA,OAGvErB,EAAAA,EAAAA,MAAC2N,EAAAA,EAAI,CAAC7J,UAAU,gBACd3D,GAAI,CACFyN,cAAe,oBACf,wBAAyB,CACvBlM,SAAU,UAEZ,sBAAuB,CACrBmM,QAAS,YACTC,GAAI,EACJC,EAAG,EACHC,GAAI,GAEN,2CAA4C,CAC1CtN,MAAO+C,EAAAA,EAAaC,UAAUC,QAAQC,iBAExCtD,SAAA,EACFE,EAAAA,EAAAA,KAAC+L,EAAoB,IAEnB3K,OAAOC,QAAQ6D,GAAM5D,KAAI1C,IAAA,IAAA8C,EAAAG,EAAAC,EAAA,IAAEQ,EAAKpD,GAAWN,EAAA,OACvB,QAAlB8C,EAAAxC,EAAWE,eAAO,IAAAsC,OAAA,EAAlBA,EAAoB+L,oBACpBzN,EAAAA,EAAAA,KAACuM,EAAAA,GAAQ,CAEPjJ,WAA6B,QAAlBzB,EAAA3C,EAAWE,eAAO,IAAAyC,OAAA,EAAlBA,EAAoB6B,MAAOtD,EAAAA,EAAY,GAAGmH,MAAMC,KAAO,cAAc1H,UAEhFE,EAAAA,EAAAA,KAACwM,EAAAA,EAAY,CACXC,QAA2B,QAApB3K,EAAE5C,EAAWE,eAAO,IAAA0C,OAAA,EAAlBA,EAAoB2L,oBAJ1BnL,EAMI,aAOrB9C,EAAAA,EAAAA,MAACsB,EAAAA,GAAI,CAACyB,MAAI,EAACI,GAAI,EAAGhD,GAAI,CAAEqN,MAAOpC,EAAmB,EAAI,GAAI9K,SAAA,EACxDE,EAAAA,EAAAA,KAACqD,EAAAA,EAAG,CACF1D,GAAI,CACF+N,SAAU,WACVC,IAAK,EACLC,OAAQhD,GAAoB,EAC5BiD,KAAMjD,GAAoB,EAC1B5F,MAAO,MACPa,OAAQ,MACRiI,EAAG,GACHhO,UAEFE,EAAAA,EAAAA,KAAC+N,EAAAA,EAAoB,OAEvBvO,EAAAA,EAAAA,MAACsB,EAAAA,GAAI,CACHC,WAAS,EACT4L,aAAa,gBACb3L,eAAe,SACf6E,OAAO,OACPoH,UAAU,SAAQnN,SAAA,EAElBE,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CAACyB,MAAI,EAACI,GAAI,GAAIhD,GAAI,CAAEqO,GAAI,EAAGjB,GAAI,GAAIjN,UACtCE,EAAAA,EAAAA,KAACP,EAAAA,EAAU,CAACC,QAAQ,KAAKG,WAAW,MAAMF,GAAI,CAAEO,MAAO,SAAUJ,SAAC,kCAIpEE,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CAACyB,MAAI,EAACI,GAAI,EAAE7C,UACfE,EAAAA,EAAAA,KAACqD,EAAAA,EAAG,CAACwC,OAAO,OAAOb,MAAM,OAAMlF,UAC7BE,EAAAA,EAAAA,KAACiO,EAAAA,GAAM,CACLC,KAAM,IACNC,MAAO,CAAEtI,OAAQ,OAAQuI,SAAU,OAAQpJ,MAAO,QAClDqJ,MAAK,GAAAlO,QACAmO,EAAAA,EAAAA,IAAc7E,SAAS8E,SAASC,MAAK,YAAArO,QAAWsO,EAAAA,EAAAA,IAAkBhF,SAAS8E,SAASC,OACvFE,QAAO,qBAIf1O,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CACHyB,MAAI,EACJI,GAAI,GACJkD,OAAO,MACPvC,UAAU,gBACV3D,GAAI,CAAE,MAAO,CAAEE,WAAY,mBAAqBC,UAEhDE,EAAAA,EAAAA,KAAC2O,EAAqB,CAACzJ,KAAMA,cAK7B,C","sources":["Components/CurrentAQIGrid.jsx","Pages/Screen/RecentHistoricalGraph.jsx","Pages/Screen/Screen.jsx"],"sourcesContent":["// disable eslint for this file\n/* eslint-disable */\nimport { Box, Grid, Typography, Skeleton, Stack } from '@mui/material';\nimport ThermostatIcon from '@mui/icons-material/Thermostat';\nimport WaterDropIcon from '@mui/icons-material/WaterDrop';\nimport ErrorIcon from '@mui/icons-material/Error';\n\nimport { returnSensorStatus, SensorStatus, getFormattedElapsedTimeFromNow } from '../Pages/Screen/ScreenUtils';\nimport { TemperatureUnits, getFormattedTemperature, calculateHeatIndex } from \"../Pages/Screen/TemperatureUtils\";\n\nimport AQIdatabase from '../Utils/AirQualityIndexHelper';\n\nimport CustomThemes from '../Themes/CustomThemes';\n\nconst CurrentAQIGrid = (props) => {\n  const { currentSensorsData, temperatureUnitPreference, isScreen = true } = props;\n\n  const getGridItemSize = (numOfItems) => {\n    return {\n      xs: Math.max(12 / numOfItems, 6),\n      sm: Math.max(12 / numOfItems, 4),\n      lg: isScreen ? (12 / numOfItems) : Math.min(5, Math.max(12 / numOfItems, 2))\n    }\n  }\n\n  return (\n    <Grid\n      container\n      justifyContent=\"center\"\n      sx={{\n        '& .MuiSvgIcon-root': {\n          verticalAlign: 'sub',\n          fontSize: isScreen ? null : '1rem'\n        },\n        '& *': {\n          fontWeight: '500'\n        },\n        '& .condensedFont': {\n          fontFamily: 'IBM Plex Sans Condensed, sans-serif !important',\n          '& *': {\n            fontFamily: 'IBM Plex Sans Condensed, sans-serif !important'\n          }\n        }\n      }}\n    >\n      {\n        currentSensorsData ?\n\n          (Object.entries(currentSensorsData).map(([key, sensorData], index) => (\n            <Grid\n              item\n              key={key}\n              {...getGridItemSize(Object.keys(currentSensorsData).length)}\n              sx={\n                sensorData.current?.sensor_status !== SensorStatus.active &&\n                { '& *': { color: `${CustomThemes.universal.palette.inactiveSensor}` } }\n              }\n            >\n              <Box sx={{ '& *': { color: sensorData.current?.color } }}>\n                <Typography variant={isScreen ? \"h4\" : 'h5'} fontWeight=\"500\" className='condensedFont'>\n                  {sensorData.sensor?.location_long || sensorData.sensor?.location_short || 'No Location Name'}\n                </Typography>\n                <Typography variant={isScreen ? \"h1\" : 'h2'} fontWeight=\"500\" lineHeight={isScreen ? 0.8 : 0.9}>\n                  {sensorData.current?.aqi || '--'}\n                </Typography>\n                <Typography variant={isScreen ? \"h4\" : 'h5'} fontWeight=\"500\" className='condensedFont'>\n                  {sensorData.current?.category || '--'}\n                </Typography>\n              </Box>\n\n              <Box sx={{\n                '& *': {\n                  color:\n                    isScreen ? (\n                      sensorData.current?.sensor_status === SensorStatus.active ?\n                        '#c8dcff' : CustomThemes.universal.palette.inactiveSensor\n                    )\n                      : 'text.secondary'\n                }, mt: isScreen ? 2 : 1\n              }} className='condensedFont'>\n                <Typography variant={isScreen ? \"h6\" : 'body1'}>\n                  <ThermostatIcon />\n                  {\n                    getFormattedTemperature({\n                      rawTemp: sensorData.current?.temperature,\n                      currentUnit: TemperatureUnits.celsius,\n                      returnUnit: temperatureUnitPreference\n                    })\n                  }\n                  &nbsp;&nbsp;-&nbsp;\n                  <WaterDropIcon sx={{ transform: 'scaleX(0.9)' }} />\n                  {sensorData.current?.rel_humidity ? Math.round(sensorData.current?.rel_humidity) : \"--\"}%\n                </Typography>\n                {\n                  // Show heat index for selected location types\n                  ['outdoors', 'indoors_gym'].includes(sensorData.sensor?.location_type) &&\n                  <Typography variant={isScreen ? \"body1\" : 'body2'} sx={{ fontWeight: '300 !important' }}>\n                    {calculateHeatIndex({\n                      rawTemp: sensorData.current?.temperature,\n                      currentUnit: TemperatureUnits.celsius,\n                      rel_humidity: sensorData.current?.rel_humidity,\n                      returnUnit: temperatureUnitPreference\n                    })}\n                  </Typography>\n                }\n                {\n                  displayLastUpdateAndSensorStatus({ sensorData, isScreen })\n                }\n              </Box>\n\n              {\n                // Display outdoor-indoor comparison if both sensors are active\n                sensorData.sensor_status !== SensorStatus.active &&\n                <Typography variant={isScreen ? \"h6\" : 'body1'} className=\"condensedFont\">\n                  {returnSensorStatus(sensorData)}\n                </Typography>\n              }\n            </Grid>\n          ))\n          )\n          :\n          (\n            <Stack direction=\"column\" alignItems=\"center\" justifyContent=\"center\">\n              <Skeleton variant='text' sx={{ width: '15rem', fontSize: '2rem' }} />\n              <Skeleton variant='text' sx={{ width: '5rem', fontSize: '4rem', my: -1.5 }} />\n              <Skeleton variant='text' sx={{ width: '10rem', fontSize: '2rem' }} />\n              <Skeleton variant='text' sx={{ width: '7.5rem', fontSize: '1rem' }} />\n              <Skeleton variant='text' sx={{ width: '7.5rem', fontSize: '1rem' }} />\n            </Stack>\n          )\n      }\n    </Grid>\n  );\n};\n\nconst displayLastUpdateAndSensorStatus = ({ sensorData, isScreen }) => {\n  if (isScreen && sensorData.current.sensor_status === SensorStatus.active) return null;\n  else\n    return (\n      <Typography\n        variant={isScreen ? 'h6' : 'caption'}\n        sx={{\n          mt: 0,\n          fontWeight: isScreen && '500 !important'\n        }}\n      >\n        {\n          sensorData.current?.sensor_status !== SensorStatus.active\n          &&\n          <>\n            <ErrorIcon\n              sx={{\n                '& *': {\n                  color: `${AQIdatabase[3].lightThemeColor} !important`\n                },\n                mr: 0.5\n              }} />\n            Offline.&nbsp;\n          </>\n        }\n        Last update:\n        {(sensorData.current?.timestamp || sensorData.sensor?.last_seen)\n          ? ` ${getFormattedElapsedTimeFromNow(sensorData.current?.timestamp || sensorData.sensor?.last_seen)} ago`\n          : '--'}\n      </Typography>\n    )\n}\n\nexport default CurrentAQIGrid;\n","// disable eslint for this file\n/* eslint-disable */\nimport { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\n\nimport convertToAQI from '../../Utils/AirQualityIndexCalculator';\nimport AQIdatabase from '../../Utils/AirQualityIndexHelper';\nimport { SensorStatus } from './ScreenUtils';\nimport { Box } from '@mui/material';\n\nimport { capitalizeFirstCharacter, areDOMOverlapped } from './ScreenUtils';\n\nimport CustomThemes from '../../Themes/CustomThemes';\n\nconst numberOfHoursForHistoricalData = 6;\n\nconst RecentHistoricalGraph = (props) => {\n  const { data } = props;\n\n  const [firstDraw, setFirstDraw] = useState(true);\n\n  const graphContainer = useRef();\n  const layerBackground = useRef();\n  const layerTexts = useRef();\n  const layerXaxisWrapper = useRef();\n  const layerLines = useRef();\n\n  let svg, width, height, xAxis, yAxis;\n  let maxAQItoDisplay = 200;\n  const xTickPeriod = 120; // xAxis ticks every 2 hour\n  const dotRadius = 10;\n  const margin = { top: 30, right: 80, bottom: 0, left: 70 };\n\n  // Set up D3's line generator\n  const lineGenerator = d3\n    .line()\n    .x(function (d) {\n      return xAxis(d.timestamp);\n    }) // set the x values for the line generator\n    .y(function (d) {\n      return yAxis(d.aqi);\n    }) // set the y values for the line generator\n    .curve(d3.curveCardinal.tension(0)); // apply smoothing to the line\n\n  useEffect(() => {\n    if (!data) return;\n    if (!graphContainer.current) return;\n    if (!layerBackground.current) return;\n    if (!layerTexts.current) return;\n    if (!layerXaxisWrapper.current) return;\n    if (!layerLines.current) return;\n\n    svg = d3.select(graphContainer.current);\n    width = graphContainer.current.clientWidth;\n    height = graphContainer.current.clientHeight - margin.top;\n\n    // Clear all previous drawings\n    d3.select(layerBackground.current).selectAll(\"*\").remove();\n    d3.select(layerTexts.current).selectAll(\"*\").remove();\n    d3.select(layerXaxisWrapper.current).selectAll(\"*\").remove();\n    d3.select(layerLines.current).selectAll(\"*\").remove();\n\n    d3.select(layerBackground.current)\n      .attr(\"opacity\", 0.5);\n    d3.select(layerTexts.current)\n      .attr(\"filter\", \"brightness(0.8) contrast(1.2) saturate(1.2)\");\n\n    Object.entries(data).forEach(([key, sensorData]) => {\n      // Create the JS date object and calculate AQI from raw measurements\n      sensorData.historical?.forEach(function (d) {\n        d.timestamp = new Date(d.timestamp);\n        d.aqi = convertToAQI(d[\"pm2.5\"]).aqi;\n      });\n\n      // Calculate the maximum value AQI of this sensor\n      if (sensorData.historical && Array.isArray(sensorData.historical)) {\n        const max = d3.max(sensorData.historical, function (d) {\n          return d.aqi;\n        });\n        if (max > maxAQItoDisplay) maxAQItoDisplay = max;\n      }\n    });\n\n    // Calculate the maximum AQI for the y-axis to display\n    maxAQItoDisplay = Math.ceil(maxAQItoDisplay / 50) * 50; // round to the nearest 50 points\n\n    for (let category of AQIdatabase) {\n      if (maxAQItoDisplay >= category.aqiUS.low && maxAQItoDisplay <= category.aqiUS.high) {\n        maxAQItoDisplay = category.aqiUS.high;\n        break;\n      }\n    };\n\n    // 1. Set up the xAxis domain and range\n    let xAxisMax = new Date();\n    let xAxisMin = new Date();\n    xAxisMin.setHours(xAxisMin.getHours() - numberOfHoursForHistoricalData);\n    xAxis = d3.scaleTime().domain([xAxisMin, xAxisMax]).rangeRound([margin.left, width - margin.right]); // width is inclusive of margin\n\n    // 2. Set up the yAxis domain and range\n    yAxis = d3.scaleLinear().domain([0, maxAQItoDisplay]).range([height + margin.top, margin.top]); // height is already exclusive of margin\n\n    // 7. Add the background category layer and the AQI levels (rectangles) and the grids\n    let font_size = Math.floor((((AQIdatabase[1].aqiUS.high - AQIdatabase[0].aqiUS.high) / maxAQItoDisplay) * height) / 2);\n    let marginText = Math.floor(font_size / 5);\n    // Loop through all the aqi_category and add each category into the graph\n    for (let i = 0; i < AQIdatabase.length; i++) {\n      const category = AQIdatabase[i];\n      if (maxAQItoDisplay <= category.aqiUS.low) break;\n      // Add the rectangles\n      const aqiRange = Math.ceil((category.aqiUS.high - category.aqiUS.low) / 50) * 50;\n      d3.select(layerBackground.current)\n        .append(\"rect\")\n        .attr(\"x\", 0)\n        .attr(\"y\", height - (category.aqiUS.high / maxAQItoDisplay) * height + margin.top)\n        .attr(\"width\", width)\n        .attr(\"height\", aqiRange / maxAQItoDisplay * height)\n        .attr(\"fill\", category.lightThemeColor);\n\n      // Add the AQI categories numbers\n      d3.select(layerTexts.current)\n        .append(\"text\")\n        .attr(\"x\", marginText)\n        .attr(\n          \"y\",\n          height -\n          (category.aqiUS.low / maxAQItoDisplay) * height -\n          3.5 * marginText + margin.top\n        )\n        .attr(\"fill\", category.lightThemeColor)\n        .attr(\"font-size\", font_size)\n        .text(Math.floor(category.aqiUS.low / 50) * 50);\n\n      d3.select(layerTexts.current)\n        .append(\"text\")\n        .attr(\"class\", \"category-text-graph-sm\")\n        .attr(\"x\", marginText + 2)\n        .attr(\n          \"y\",\n          height - (category.aqiUS.low / maxAQItoDisplay) * height - marginText + margin.top\n        )\n        .attr(\"fill\", category.lightThemeColor)\n        .attr(\"font-size\", font_size / 2)\n        .text(category.category);\n    };\n\n    // Add the xAxisWrapper and its texts\n    d3.select(layerXaxisWrapper.current)\n      .append(\"rect\")\n      .attr(\"x\", 0)\n      .attr(\"y\", 0)\n      .attr(\"width\", width)\n      .attr(\"height\", margin.top)\n      .attr(\"fill\", \"white\");\n\n    // 9.2. Add the X Axis on top of the graph, as well as ticks\n    let formatHour = d3.timeFormat(\"%H:%M\");\n    d3.select(layerXaxisWrapper.current)\n      .append(\"g\")\n      .attr(\"transform\", `translate(0,${margin.top})`)\n      .call(\n        d3\n          .axisTop(xAxis)\n          .tickSize(-height) // negative length to make vertical lines\n          .ticks(d3.timeMinute.every(xTickPeriod))\n          .tickFormat(function (d) {\n            return formatHour(d);\n          })\n      )\n      .attr(\"font-size\", font_size / 2.25)\n      .attr(\"color\", CustomThemes.universal.palette.inactiveSensor)\n      .select(\".domain\")\n      .remove();\n    d3.select(layerXaxisWrapper.current)\n      .selectAll('line')\n      .attr('stroke', 'white')\n      .attr('stroke-width', 2)\n      .attr('opacity', 0.5);\n\n    Object.entries(data).forEach(([key, sensorData]) => {\n      // Append the line chart for this location\n      d3.select(layerLines.current)\n        .append(\"path\")\n        .datum(sensorData.historical || [])\n        .attr(\"x\", margin.left)\n        .attr(\"class\", \"line\")\n        .attr(\"d\", lineGenerator)\n        .attr(\"fill\", \"transparent\")\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-width\", \"5px\")\n        .attr(\"opacity\", sensorData.sensor?.location_type === \"outdoors\" ? 1 : 0.5);\n\n      // Append the circle marker at the end of this line chart to denote its liveness\n      const mostRecentData = sensorData.historical?.length > 0 ? sensorData.historical?.[0] : null;\n      if (mostRecentData) {\n        const aqiObject = AQIdatabase[convertToAQI(mostRecentData[\"pm2.5\"]).aqi_category_index];\n        const markerWrapper = d3.select(layerLines.current)\n          .append(\"g\")\n          .attr(\n            \"transform\",\n            \"translate(\" +\n            xAxis(mostRecentData.timestamp) +\n            \",\" +\n            yAxis(mostRecentData.aqi) +\n            \")\"\n          )\n          .attr(\"fill\",\n            sensorData.current?.sensor_status === SensorStatus.active\n              ? aqiObject.lightThemeColor\n              : CustomThemes.universal.palette.inactiveSensor)\n          ;\n\n        sensorData.current?.sensor_status === SensorStatus.active &&\n          markerWrapper.append(\"circle\")\n            .attr(\"cx\", 0)\n            .attr(\"cy\", 0)\n            .attr(\"filter\", \"brightness(0.5)\")\n            .attr(\"class\", \"pulse-ring\")\n            .attr(\"r\", 2.5 * dotRadius);\n\n        markerWrapper.append(\"circle\")\n          .attr(\"cx\", 0)\n          .attr(\"cy\", 0)\n          .attr(\"stroke\", \"#666\")\n          .attr(\"class\", sensorData.current?.sensor_status === SensorStatus.active && \"pulse-dot\")\n          .attr(\"r\", dotRadius);\n\n        markerWrapper.append(\"text\")\n          .attr(\"class\", \"location-label\")\n          .attr(\"x\", dotRadius * 1.5)\n          .attr(\"y\", 0)\n          .attr(\"fill\", \"black\")\n          .attr(\"alignment-baseline\", \"middle\")\n          .attr(\"text-anchor\", \"left\")\n          .attr(\"font-size\", font_size / 3)\n          .text(capitalizeFirstCharacter(sensorData.sensor?.location_short));\n\n        const locationLabels = document.getElementsByClassName(\"location-label\");\n        for (let i = 1; i < locationLabels.length; i++) {\n          const locationLabel_1 = locationLabels[i - 1];\n          const locationLabel_2 = locationLabels[i];\n          const overlapped = areDOMOverlapped(locationLabel_1.getBoundingClientRect(), locationLabel_2.getBoundingClientRect());\n\n          if (overlapped !== 0) {\n            locationLabel_1.setAttribute(\"y\", overlapped * dotRadius);\n            locationLabel_2.setAttribute(\"y\", - overlapped * dotRadius);\n          }\n        }\n      }\n    });\n\n  }, [data])\n\n  return (\n    <Box\n      sx={{\n        '& .pulse-ring': {\n          animation: 'pulse-ring 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes pulse-ring': {\n            '0%': {\n              transform: 'scale(0.2)'\n            },\n            '80%': {},\n            '100%': {\n              opacity: 0\n            }\n          }\n        },\n        '& .pulse-dot': {\n          animation: 'pulse-dot 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes pulse-dot': {\n            '0%': {\n              transform: 'scale(0.5)'\n            },\n            '50%': {\n              transform: 'scale(1)',\n              filter: 'brightness(1.2) contrast(1.2) saturate(1.2)'\n            },\n            '100%': {\n              transform: 'scale(0.5)'\n            }\n          }\n        }\n      }}\n      width=\"100%\"\n      height=\"100%\"\n    >\n      <svg\n        id=\"recent-historical-graph\"\n        width=\"100%\"\n        height=\"100%\"\n        ref={graphContainer}\n      >\n        <g ref={layerBackground} />\n        <g ref={layerXaxisWrapper} />\n        <g ref={layerTexts} />\n        <g ref={layerLines} />\n      </svg>\n    </Box>\n\n  );\n}\n\nexport default RecentHistoricalGraph;","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useContext } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { UserContext } from '../../ContextProviders/UserContext';\n\nimport { Box, Grid, Typography, Stack, List, ListItem, ListItemText } from '@mui/material';\n\nimport CITIESlogoLinkToHome from '../../Components/Header/CITIESlogoLinkToHome';\n\nimport { SensorStatus, getDomainName, getUrlAfterScreen } from './ScreenUtils';\nimport { TemperatureUnits } from \"./TemperatureUtils\";\n\nimport RecentHistoricalGraph from './RecentHistoricalGraph';\n\nimport AQIdatabase from '../../Utils/AirQualityIndexHelper';\n\nimport CustomThemes from '../../Themes/CustomThemes';\n\nimport QRCode from \"react-qr-code\";\n\nimport CurrentAQIGrid from '../../Components/CurrentAQIGrid';\nimport { EndPoints, fetchAndProcessCurrentSensorsData, getApiUrl } from '../../Utils/ApiUtils';\n\nconst Screen = ({ title, temperatureUnitPreference }) => {\n  const { user } = useContext(UserContext);\n  const navigate = useNavigate();\n\n  // useEffect(() => {\n  //   if (user.checkedAuthentication === true && user.authenticated === false) {\n  //     navigate('/login');\n  //   }\n  // }, [user])\n\n  // Update the page's title\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n\n  const [isLayoutReversed, setIsLayoutReversed] = useState();\n\n  const [data, setData] = useState({});\n\n  // Tweak the layout of the screen to prevent burn-in\n  useEffect(() => {\n    // Helper function to change layout of the screen based on current's month\n    // (arrange the left and right sections of the screen)\n    // to mitigate burn-in if the same static image is displayed over a long period of time\n    function returnIsLayoutReversed() {\n      let months = [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1]; // 12 months of a year, change the layout every two months\n      let now = new Date();\n      let thisMonthIndex = now.getMonth(); // get the index of this Month (0-11)\n      // Return a boolean value if the layout should be reversed\n      return (months[thisMonthIndex] !== 0);\n    }\n\n    setIsLayoutReversed(returnIsLayoutReversed());\n\n    // Set up an interval to call the function every day\n    const oneDayInMilliseconds = 24 * 60 * 60 * 1000;\n    const intervalId = setInterval(() => {\n      setIsLayoutReversed(returnIsLayoutReversed());\n    }, oneDayInMilliseconds);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  // Fetch air quality data from database\n  useEffect(() => {\n    const url = getApiUrl({ endpoint: EndPoints.screen });\n    if (!url) return;\n\n    fetchAndProcessCurrentSensorsData(url)\n      .then((data) => {\n        setData(data)\n      })\n      .catch((error) => {\n        console.log(error);\n        // Check if the error indicates that authentication is required\n        navigate('/login');\n      });\n\n    // Create an interval that fetch new data every 5 minute\n    const fetchInterval = 5 * 60 * 1000; // 5min\n    const intervalId = setInterval(() => {\n      fetchAndProcessCurrentSensorsData(url)\n        .then((data) => {\n          setData(data)\n        })\n        .catch((error) => console.log(error))\n    },\n      fetchInterval);\n    // Clean up the interval when the component unmounts\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  const AirQualityComparison = () => {\n    // Only display air quality comparison if every sensor is currently active\n    if (!Object.values(data).every((sensorData) => sensorData.current?.sensor_status === SensorStatus.active)) return null;\n\n    let outdoorsAQI, indoorsAQI;\n    // Don't display comparison if outdoor air is good\n    for (let i = 0; i < Object.values(data).length; i++) {\n      const sensorData = Object.values(data)[i];\n      if (sensorData.sensor?.location_type === \"outdoors\") {\n        outdoorsAQI = sensorData.current.aqi;\n        if (outdoorsAQI <= AQIdatabase[0].aqiUS.high) return null;\n      }\n      else indoorsAQI = sensorData.current.aqi;\n    }\n\n    const ratio = outdoorsAQI / indoorsAQI;\n    let comparison;\n    if (ratio >= 2) comparison = `${parseFloat(ratio).toFixed(1)} times`;\n    else if (ratio > 1.2) comparison = `${Math.round(100 * ((outdoorsAQI - indoorsAQI) / indoorsAQI))}%`;\n    else return null;\n\n    return (\n      <ListItem>\n        <ListItemText primary={\n          <>Indoors air is\n            <Typography\n              component=\"span\"\n              color={`${AQIdatabase[0].lightThemeColor} !important`}\n            >\n              {` ${comparison} `}\n            </Typography>\n            better than outdoors</>\n        } />\n      </ListItem>\n    );\n  }\n\n  return (\n    <Grid\n      container\n      alignContent=\"stretch\"\n      alignItems=\"stretch\"\n      height=\"100vh\"\n      sx={{\n        overflow: 'hidden',\n        background: \"white\",\n        '& *': {\n          fontWeight: '500 !important'\n        },\n        '& .condensedFont': {\n          fontFamily: 'IBM Plex Sans Condensed, sans-serif !important',\n          '& *': {\n            fontFamily: 'IBM Plex Sans Condensed, sans-serif !important'\n          }\n        },\n        '& .flashingRed': {\n          '& .MuiTypography-root ': {\n            color: `${AQIdatabase[3].lightThemeColor} !important`,\n            opacity: 0.8\n          },\n          color: `${AQIdatabase[3].lightThemeColor} !important`,\n          animation: 'flashingRed 3s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes flashingRed': {\n            '0%': {\n              opacity: 1\n            },\n            '50%': {\n              opacity: 0.5\n            },\n            '100%': {\n              opacity: 1\n            }\n          }\n        }\n      }}\n    >\n      <Grid\n        item\n        xs={6}\n        sx={{\n          py: 3,\n          px: 2,\n          order: isLayoutReversed ? 1 : 0,\n          background: '#212529'\n        }}\n      >\n        <Stack\n          direction=\"column\"\n          justifyContent=\"space-between\"\n          height=\"100%\"\n          textAlign=\"center\"\n        >\n          <Box>\n            <Typography variant=\"h4\" fontWeight=\"500\" color=\"white\">\n              PM2.5 AIR QUALITY INDEX\n            </Typography>\n            <Typography variant=\"h5\" className='condensedFont' color={CustomThemes.universal.palette.inactiveSensor}>\n              Particulate Matter &lt; 2.5μm\n            </Typography>\n          </Box>\n\n          <Grid\n            container\n            justifyContent=\"space-around\"\n          >\n            <CurrentAQIGrid currentSensorsData={data} temperatureUnitPreference={temperatureUnitPreference} />\n          </Grid>\n\n          <List className='condensedFont'\n            sx={{\n              listStyleType: 'disclosure-closed',\n              '& .MuiTypography-root': {\n                fontSize: '1.5rem',\n              },\n              '& .MuiListItem-root': {\n                display: 'list-item',\n                ml: 3,\n                p: 0,\n                pr: 3,\n              },\n              '& .MuiTypography-root, .MuiListItem-root': {\n                color: CustomThemes.universal.palette.inactiveSensor\n              }\n            }}>\n            <AirQualityComparison />\n            {\n              Object.entries(data).map(([key, sensorData]) => (\n                sensorData.current?.healthSuggestion &&\n                <ListItem\n                  key={key}\n                  className={sensorData.current?.aqi >= AQIdatabase[2].aqiUS.low && 'flashingRed'}\n                >\n                  <ListItemText\n                    primary={sensorData.current?.healthSuggestion}\n                  />\n                </ListItem>\n              ))\n            }\n          </List>\n        </Stack>\n      </Grid>\n\n      <Grid item xs={6} sx={{ order: isLayoutReversed ? 0 : 1 }}>\n        <Box\n          sx={{\n            position: 'absolute',\n            top: 0,\n            right: !isLayoutReversed && 0,\n            left: isLayoutReversed && 0,\n            width: '5vw',\n            height: '5vw',\n            m: 1\n          }}\n        >\n          <CITIESlogoLinkToHome />\n        </Box>\n        <Grid\n          container\n          alignContent=\"space-between\"\n          justifyContent=\"center\"\n          height=\"100%\"\n          textAlign=\"center\"\n        >\n          <Grid item xs={12} sx={{ pt: 3, px: 2 }}>\n            <Typography variant=\"h4\" fontWeight=\"500\" sx={{ color: 'black' }}>\n              AN INITIATIVE BY CITIESair\n            </Typography>\n          </Grid>\n          <Grid item xs={2}>\n            <Box height=\"auto\" width=\"100%\">\n              <QRCode\n                size={256}\n                style={{ height: \"auto\", maxWidth: \"100%\", width: \"100%\" }}\n                value={\n                  `${getDomainName(document.location.href)}?source=${getUrlAfterScreen(document.location.href)}`\n                } viewBox={`0 0 256 256`}\n              />\n            </Box>\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            height=\"70%\"\n            className='condensedFont'\n            sx={{ '& *': { fontWeight: '600 !important' } }}\n          >\n            <RecentHistoricalGraph data={data} />\n          </Grid>\n        </Grid>\n\n      </Grid>\n    </Grid >\n  );\n};\n\nexport default Screen;\n"],"names":["displayLastUpdateAndSensorStatus","_ref2","_sensorData$current11","_sensorData$current12","_sensorData$sensor4","_sensorData$current13","_sensorData$sensor5","sensorData","isScreen","current","sensor_status","SensorStatus","active","_jsxs","Typography","variant","sx","mt","fontWeight","children","_Fragment","_jsx","ErrorIcon","color","concat","AQIdatabase","lightThemeColor","mr","timestamp","sensor","last_seen","getFormattedElapsedTimeFromNow","props","currentSensorsData","temperatureUnitPreference","Grid","container","justifyContent","verticalAlign","fontSize","fontFamily","Object","entries","map","_ref","index","_sensorData$current","_sensorData$current2","_sensorData$sensor","_sensorData$sensor2","_sensorData$current3","_sensorData$current4","_sensorData$current5","_sensorData$current6","_sensorData$current7","_sensorData$current8","_sensorData$sensor3","_sensorData$current9","_sensorData$current10","key","item","numOfItems","keys","length","xs","Math","max","sm","lg","min","CustomThemes","universal","palette","inactiveSensor","Box","className","location_long","location_short","lineHeight","aqi","category","ThermostatIcon","getFormattedTemperature","rawTemp","temperature","currentUnit","TemperatureUnits","celsius","returnUnit","WaterDropIcon","transform","rel_humidity","round","includes","location_type","calculateHeatIndex","returnSensorStatus","Stack","direction","alignItems","Skeleton","width","my","data","firstDraw","setFirstDraw","useState","graphContainer","useRef","layerBackground","layerTexts","layerXaxisWrapper","layerLines","svg","height","xAxis","yAxis","maxAQItoDisplay","margin","lineGenerator","d3","x","d","y","curve","tension","useEffect","clientWidth","clientHeight","selectAll","remove","attr","forEach","_sensorData$historica","historical","Date","convertToAQI","Array","isArray","ceil","aqiUS","low","high","xAxisMax","xAxisMin","setHours","getHours","domain","rangeRound","range","font_size","floor","marginText","i","aqiRange","append","text","formatHour","call","tickSize","ticks","every","tickFormat","select","_sensorData$historica2","_sensorData$historica3","datum","mostRecentData","aqiObject","aqi_category_index","markerWrapper","dotRadius","capitalizeFirstCharacter","locationLabels","document","getElementsByClassName","locationLabel_1","locationLabel_2","overlapped","areDOMOverlapped","getBoundingClientRect","setAttribute","animation","opacity","filter","id","ref","title","user","useContext","UserContext","navigate","useNavigate","isLayoutReversed","setIsLayoutReversed","setData","returnIsLayoutReversed","getMonth","intervalId","setInterval","clearInterval","url","getApiUrl","endpoint","EndPoints","screen","fetchAndProcessCurrentSensorsData","then","catch","error","console","log","AirQualityComparison","values","outdoorsAQI","indoorsAQI","ratio","comparison","parseFloat","toFixed","ListItem","ListItemText","primary","component","alignContent","overflow","background","py","px","order","textAlign","CurrentAQIGrid","List","listStyleType","display","ml","p","pr","healthSuggestion","position","top","right","left","m","CITIESlogoLinkToHome","pt","QRCode","size","style","maxWidth","value","getDomainName","location","href","getUrlAfterScreen","viewBox","RecentHistoricalGraph"],"sourceRoot":""}