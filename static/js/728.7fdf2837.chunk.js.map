{"version":3,"file":"static/js/728.7fdf2837.chunk.js","mappings":"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","sources":["Components/CurrentAQIGrid.jsx","Components/UppercaseTitle.jsx","Pages/Home/About.jsx","IQAir_logo.svg","Pages/Home/Map.jsx","Pages/Home/Home.jsx","Pages/Screen/ScreenUtils.jsx","Utils/AirQualityIndexCalculator.jsx","Utils/AirQualityIndexHelper.jsx","Utils/ApiUtils.jsx"],"sourcesContent":["// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect } from 'react';\n\nimport { Box, Grid, Typography } from '@mui/material';\nimport ThermostatIcon from '@mui/icons-material/Thermostat';\nimport WaterDropIcon from '@mui/icons-material/WaterDrop';\nimport ErrorIcon from '@mui/icons-material/Error';\n\nimport { returnSensorStatus, SensorStatus, getFormattedElapsedTimeFromNow } from '../Pages/Screen/ScreenUtils';\nimport { TemperatureUnits, getFormattedTemperature, calculateHeatIndex } from \"../Pages/Screen/TemperatureUtils\";\n\nimport AQIdatabase from '../Utils/AirQualityIndexHelper';\n\nimport CustomThemes from '../Themes/CustomThemes';\n\nconst CurrentAQIGrid = (props) => {\n  const { currentSensorsData, temperatureUnitPreference, isScreen = true, orderOfItems } = props;\n\n  const getGridItemSize = (numOfItems) => {\n    return {\n      xs: Math.max(12 / numOfItems, 6),\n      sm: Math.max(12 / numOfItems, 4),\n      lg: isScreen ? (12 / numOfItems) : Math.min(5, Math.max(12 / numOfItems, 3))\n    }\n  }\n\n  if (!currentSensorsData) return null;\n\n  return (\n    <Grid\n      container\n      justifyContent=\"center\"\n      sx={{\n        '& .MuiSvgIcon-root': {\n          verticalAlign: 'sub',\n          fontSize: isScreen ? null : '1rem'\n        },\n        '& *': {\n          fontWeight: '500'\n        },\n        '& .condensedFont': {\n          fontFamily: 'IBM Plex Sans Condensed, sans-serif !important',\n          '& *': {\n            fontFamily: 'IBM Plex Sans Condensed, sans-serif !important'\n          }\n        }\n      }}\n    >\n      {\n        Object.entries(currentSensorsData).map(([key, sensorData], index) => (\n          <Grid\n            item\n            order={orderOfItems && orderOfItems[index]}\n            key={key}\n            {...getGridItemSize(Object.keys(currentSensorsData).length)}\n            sx={\n              sensorData.current?.sensor_status !== SensorStatus.active &&\n              { '& *': { color: `${CustomThemes.universal.palette.inactiveSensor}` } }\n            }\n          >\n            <Box sx={{ '& *': { color: sensorData.current?.color } }}>\n              <Typography variant={isScreen ? \"h4\" : 'h5'} fontWeight=\"500\" className='condensedFont'>\n                {sensorData.sensor?.location_long || sensorData.sensor?.location_short || 'No Location Name'}\n              </Typography>\n              <Typography variant={isScreen ? \"h1\" : 'h2'} fontWeight=\"500\" lineHeight={isScreen ? 0.8 : 0.9}>\n                {sensorData.current?.aqi || '--'}\n              </Typography>\n              <Typography variant={isScreen ? \"h4\" : 'h5'} fontWeight=\"500\" className='condensedFont'>\n                {sensorData.current?.category || '--'}\n              </Typography>\n            </Box>\n\n            <Box sx={{\n              '& *': {\n                color:\n                  isScreen ? (\n                    sensorData.current?.sensor_status === SensorStatus.active ?\n                      '#c8dcff' : CustomThemes.universal.palette.inactiveSensor\n                  )\n                    : 'text.secondary'\n              }, mt: isScreen ? 2 : 1\n            }} className='condensedFont'>\n              <Typography variant={isScreen ? \"h6\" : 'body1'}>\n                <ThermostatIcon />\n                {\n                  getFormattedTemperature({\n                    rawTemp: sensorData.current?.temperature,\n                    currentUnit: TemperatureUnits.celsius,\n                    returnUnit: temperatureUnitPreference\n                  })\n                }\n                &nbsp;&nbsp;-&nbsp;\n                <WaterDropIcon sx={{ transform: 'scaleX(0.9)' }} />\n                {sensorData.current?.rel_humidity ? Math.round(sensorData.current?.rel_humidity) : \"--\"}%\n              </Typography>\n              {\n                // Show heat index for selected location types\n                ['outdoors', 'indoors_gym'].includes(sensorData.sensor?.location_type) &&\n                <Typography variant={isScreen ? \"body1\" : 'body2'} sx={{ fontWeight: '300 !important' }}>\n                  {calculateHeatIndex({\n                    rawTemp: sensorData.current?.temperature,\n                    currentUnit: TemperatureUnits.celsius,\n                    rel_humidity: sensorData.current?.rel_humidity,\n                    returnUnit: temperatureUnitPreference\n                  })}\n                </Typography>\n              }\n              {\n                displayLastUpdateAndSensorStatus({ sensorData, isScreen })\n              }\n            </Box>\n\n            {\n              // Display outdoor-indoor comparison if both sensors are active\n              sensorData.sensor_status !== SensorStatus.active &&\n              <Typography variant={isScreen ? \"h6\" : 'body1'} className=\"condensedFont\">\n                {returnSensorStatus(sensorData)}\n              </Typography>\n            }\n          </Grid>\n        ))\n      }\n    </Grid>\n  );\n};\n\nconst displayLastUpdateAndSensorStatus = ({ sensorData, isScreen }) => {\n  if (isScreen && sensorData.current.sensor_status === SensorStatus.active) return null;\n  else\n    return (\n      <Typography\n        variant={isScreen ? 'h6' : 'caption'}\n        sx={{\n          mt: 0,\n          fontWeight: isScreen && '500 !important'\n        }}\n      >\n        {\n          sensorData.current?.sensor_status !== SensorStatus.active\n          &&\n          <>\n            <ErrorIcon\n              sx={{\n                '& *': {\n                  color: `${AQIdatabase[3].lightThemeColor} !important`\n                },\n                mr: 0.5\n              }} />\n            Offline.&nbsp;\n          </>\n        }\n        Last update:\n        {sensorData.current?.timestamp\n          ? ` ${getFormattedElapsedTimeFromNow(sensorData.current.timestamp)} ago`\n          : '--'}\n      </Typography>\n    )\n}\n\nexport default CurrentAQIGrid;\n","import Typography from '@mui/material/Typography';\n\nexport default function UppercaseTitle({ text }) {\n  return (\n    <Typography\n      variant=\"h4\"\n      color=\"text.primary\"\n      sx={{\n        fontWeight: 'medium',\n        display: 'inline-block',\n        textTransform: 'uppercase',\n        pb: 3,\n        lineHeight: 1\n      }}\n    >\n      {text}\n    </Typography>\n  );\n}\n","import { Stack, Typography, Paper } from '@mui/material';\n\nimport parse from 'html-react-parser';\nimport UppercaseTitle from '../../Components/UppercaseTitle';\n\nimport jsonData from '../../section_data.json';\nimport { replacePlainHTMLWithMuiComponents, capitalizePhrase } from '../../Utils/Utils';\n\nfunction About() {\n  return (\n    <>\n      <UppercaseTitle text={capitalizePhrase(jsonData.about.id)} />\n      <Stack spacing={3}>\n        {jsonData.about.content.map((element, index) => (\n          <Paper key={index} elevation={2} sx={{ p: 3 }}>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {parse(element, {\n                replace: replacePlainHTMLWithMuiComponents,\n              })}\n            </Typography>\n          </Paper>\n        ))}\n      </Stack>\n    </>\n  );\n}\n\nexport default About;\n","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgIqAirLogo(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 77,\n    height: 29,\n    viewBox: \"0 0 77 29\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    fill: \"none\",\n    fillRule: \"evenodd\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 28.988h76.999V0H0z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#4e8abe\",\n    d: \"M25.789 19.005c0 2.573.218 2.646 1.36 2.792l.534.073c.17.17.146.608-.049.703a74.045 74.045 0 0 0-6.506 0c-.194-.095-.219-.533-.048-.703l.533-.073c1.142-.146 1.36-.22 1.36-2.792v-9.03c0-2.574-.218-2.647-1.36-2.794l-.533-.072c-.171-.17-.146-.607.048-.704a71.547 71.547 0 0 0 6.507-.001c.194.098.218.535.048.705l-.534.072c-1.142.147-1.36.22-1.36 2.794v9.03zM51.372 16.35h4.257l-.78-6.33h-.044l-3.433 6.33zm2.318-9.763h3.589L59.93 22.5h-3.476l-.514-3.543h-5.95L47.985 22.5h-3.7L53.69 6.587zM66.995 9.195h-3.187l.58-2.607h3.186l-.579 2.607zm-3.543 1.783h3.187l-2.452 11.523H61l2.452-11.523zM69.18 10.978h3.009l-.47 2.072.046.045c.714-1.583 2.274-2.429 3.967-2.429.335 0 .647.023.98.067l-.645 3.075c-.446-.089-.892-.2-1.338-.2-2.43 0-3.298 1.827-3.722 3.79l-1.07 5.102h-3.164l2.407-11.522z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#4e8abe\",\n    d: \"M31.508 14.004c0 3.35 1.433 7.915 5.584 7.915 2.767 0 5.002-2.064 5.002-6.943 0-3.666-1.65-7.915-5.512-7.915-2.428 0-5.074 1.772-5.074 6.943m13.887.534c0 3.787-2.282 6.822-5.487 7.843-.145.097-.049.29.22.509 1.383 1.214 3.543 3.132 5.364 3.666.583.17 1.165.267 1.748.267a3.36 3.36 0 0 0 1.214-.243c.146.073.22.34.146.486-.729.557-1.99.752-3.035.752-3.253 0-6.604-1.942-8.983-4.467-.437-.437-.606-.51-.898-.534-4.418-.365-7.477-3.958-7.477-8.11 0-4.952 3.592-8.618 8.691-8.618 5.608 0 8.497 4.079 8.497 8.449\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#D9272E\",\n    d: \"M15.984 21.264a1.22 1.22 0 0 1-1.22 1.221H1.218A1.22 1.22 0 0 1 0 21.265V7.72c0-.674.546-1.219 1.22-1.219h13.543a1.22 1.22 0 0 1 1.221 1.22v13.543z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#FFF\",\n    d: \"M9.735 12.91V9.418H6.369v3.494l-3.495-.006v3.36h3.495v3.496h3.366v-3.497h3.494V12.91z\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgIqAirLogo);\nexport default __webpack_public_path__ + \"static/media/IQAir_logo.6664e0a790249b05f736fb791effaaf3.svg\";\nexport { ForwardRef as ReactComponent };","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useMemo, useCallback } from 'react';\nimport { Box, Typography, Stack, Link } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport { MapContainer, TileLayer, Marker, Popup, useMap, AttributionControl, useMapEvent, Rectangle, CircleMarker } from 'react-leaflet';\nimport { useEventHandlers } from '@react-leaflet/core';\nimport L from 'leaflet';\n\nimport LaunchIcon from '@mui/icons-material/Launch';\n\nimport IQAir_Logo from '../../IQAir_logo.svg';\n\nimport { SensorStatus, calculateSensorStatus, getFormattedElapsedTimeFromNow } from '../Screen/ScreenUtils';\n\nimport { fetchDataFromURL } from '../../Components/DatasetDownload/DatasetFetcher';\n\nimport { getFormattedTemperature, TemperatureUnits } from '../Screen/TemperatureUtils';\n\nimport AQIdatabase from '../../Utils/AirQualityIndexHelper';\nimport convertToAQI from '../../Utils/AirQualityIndexCalculator';\n\nimport ThermostatIcon from '@mui/icons-material/Thermostat';\nimport WaterDropIcon from '@mui/icons-material/WaterDrop';\nimport ThemePreferences from '../../Themes/ThemePreferences';\n\nimport { styled } from '@mui/material/styles';\nimport CustomThemes from '../../Themes/CustomThemes';\n\nconst StyledLeafletPopup = styled(Popup)(({ theme }) => ({\n    '& .leaflet-popup-tip-container': {\n        display: 'none !important'\n    }\n}));\n\n\nfunction MapPlaceholder() {\n    return (\n        <p>\n            Map of CITIESair stations in Abu Dhabi\n            <noscript>You need to enable JavaScript to see this map.</noscript>\n        </p>\n    )\n}\n\nconst getTileUrl = ({ themePreference, isMiniMap }) => {\n    let tileTheme;\n    switch (themePreference) {\n        case ThemePreferences.dark:\n            tileTheme = isMiniMap ? 'light' : 'dark';\n            break\n        default:\n            tileTheme = isMiniMap ? 'dark' : 'light';\n            break\n    }\n    return `https://{s}.tile.jawg.io/jawg-${tileTheme}/{z}/{x}/{y}{r}.png?access-token={accessToken}`;\n}\nconst getMiniMapBoundOptions = ({ themePreference }) => {\n    switch (themePreference) {\n        case ThemePreferences.dark:\n            return {\n                fillColor: \"#000\",\n                color: \"#000\"\n            }\n        default:\n            return {\n                fillColor: \"#fff\",\n                color: \"#fff\"\n            }\n    }\n}\nconst tileAttribution = '<a href=\"https://leafletjs.com/\" target=\"_blank\"><b>Leaflet</b></a> | <a href=\"https://jawg.io\" target=\"_blank\">&copy; <b>Jawg</b>Maps</a> <a href=\"https://www.openstreetmap.org/copyright\">&copy; OpenStreetMap</a> contributors';\nconst tileAccessToken = 'N4ppJQTC3M3uFOAsXTbVu6456x1MQnQTYityzGPvAkVB3pS27NMwJ4b3AfebMfjY';\nconst centerCoordinate = [24.46, 54.52];\nconst maxBounds = [\n    [22.608292, 51.105185], // [Southwest corner coordinates]\n    [26.407575, 56.456571], // [Northeast corner coordinates]\n];\n\nconst MIN_ZOOM = 8;\nconst MAX_ZOOM = 12;\nconst DEFAULT_ZOOM = 10;\nconst POSITION_CLASSES = {\n    bottomleft: 'leaflet-bottom leaflet-left',\n    bottomright: 'leaflet-bottom leaflet-right',\n    topleft: 'leaflet-top leaflet-left',\n    topright: 'leaflet-top leaflet-right',\n}\n\nconst Map = ({ themePreference, temperatureUnitPreference }) => {\n    const [mapData, setMapData] = useState({});\n    const theme = useTheme();\n\n    const url = 'https://api.citiesair.com/map_public_outdoors_stations';\n\n    useEffect(() => {\n        fetchDataFromURL(url, 'json').then((data => {\n            Object.entries(data).map(([_, location]) => {\n                // Calculate if the sensor is currently active or not\n                const now = new Date();\n                const currentTimestamp = new Date(location.current?.timestamp);\n                const lastSeenInHours = Math.round((now - currentTimestamp) / 1000 / 3600);\n                if (location.current) {\n                    location.current.lastSeenInHours = lastSeenInHours;\n                    location.current.sensor_status = calculateSensorStatus(lastSeenInHours);\n                }\n\n                // Calculate AQI from raw measurements\n                if (location.current?.[\"pm2.5\"]) {\n                    const aqiObject = convertToAQI(location.current[\"pm2.5\"]);\n                    if (aqiObject) {\n                        const aqiCategory = AQIdatabase[aqiObject.aqi_category_index];\n                        location.current.aqi = aqiObject.aqi;\n                        location.current.category = aqiCategory.category;\n\n                        if (location.current.sensor_status === SensorStatus.active) {\n                            location.current.color = aqiCategory.lightThemeColor;\n                        }\n                        else {\n                            location.current.color = CustomThemes.universal.palette.inactiveSensor;\n                        }\n                    }\n                }\n\n                // Create the marker icon on the map\n                location.markerIcon = new L.DivIcon({\n                    className: 'aqi-marker-icon',\n                    html: `<div onmouseover=\"this.style.opacity=1;\" onmouseleave=\"this.style.opacity=0.75;\" style=\"width: 2.25rem; height: 2.25rem; background-color: ${location.current.color}; border-radius: 50%; border: solid 2px; display: flex; justify-content: center; align-items: center; font-size: 1rem; font-weight: 500; color: ${themePreference === ThemePreferences.light ? 'black' : 'white'}; opacity: 0.75; :hover: {opacity: 1}\">${location.current.aqi || '--'}</div>`\n\n                });\n            });\n            setMapData(data);\n        }));\n\n    }, []);\n\n    function MinimapBounds({ parentMap, zoom }) {\n        const minimap = useMap()\n\n        // Clicking a point on the minimap sets the parent's map center\n        const onClick = useCallback(\n            (e) => {\n                parentMap.setView(e.latlng, parentMap.getZoom())\n            },\n            [parentMap],\n        )\n        useMapEvent('click', onClick)\n\n        // Keep track of bounds in state to trigger renders\n        const [bounds, setBounds] = useState(parentMap.getBounds())\n        const onChange = useCallback(() => {\n            setBounds(parentMap.getBounds())\n            // Update the minimap's view to match the parent map's center and zoom\n            minimap.setView(parentMap.getCenter(), zoom)\n        }, [minimap, parentMap, zoom])\n\n        // Listen to events on the parent map\n        const handlers = useMemo(() => ({ move: onChange, zoom: onChange }), [])\n        useEventHandlers({ instance: parentMap }, handlers)\n\n        return (\n            <Rectangle\n                bounds={bounds}\n                pathOptions={{\n                    weight: 1,\n                    ...getMiniMapBoundOptions({ themePreference })\n                }}\n            />\n        );\n    }\n\n    function MinimapControl({ position, zoom, mapData }) {\n        const parentMap = useMap()\n        const mapZoom = zoom || MIN_ZOOM - 2;\n\n        // Memoize the minimap so it's not affected by position changes\n        const minimap = useMemo(\n            () => (\n                <MapContainer\n                    style={{ height: \"20vh\", width: \"30vw\", maxWidth: \"250px\", maxHeight: \"200px\" }}\n                    center={parentMap.getCenter()}\n                    zoom={mapZoom}\n                    dragging={false}\n                    doubleClickZoom={false}\n                    scrollWheelZoom={false}\n                    attributionControl={false}\n                    zoomControl={false}\n                >\n                    <TileLayer\n                        url={getTileUrl({ themePreference, isMiniMap: true })}\n                        accessToken={tileAccessToken}\n                    />\n                    {\n                        Object.entries(mapData).map(([key, location]) => (\n                            <CircleMarker\n                                key={key}\n                                center={[location.sensor?.coordinates?.latitude, location.sensor?.coordinates?.longitude]}\n                                pathOptions={{\n                                    fillColor: location.current?.color,\n                                    radius: 3,\n                                    weight: 0,\n                                    fillOpacity: 1\n                                }}\n                            >\n                            </CircleMarker>\n\n                        ))\n                    }\n                    <MinimapBounds parentMap={parentMap} zoom={mapZoom} />\n                </MapContainer>\n            ),\n            [],\n        )\n\n        const positionClass =\n            (position && POSITION_CLASSES[position]) || POSITION_CLASSES.bottomleft\n        return (\n            <div className={positionClass}>\n                <div className=\"leaflet-control leaflet-bar\">{minimap}</div>\n            </div>\n        )\n    }\n\n    return (\n        <Box sx={{\n            height: \"50vh\",\n            [theme.breakpoints.down('md')]: {\n                height: '70vh',\n            },\n            '& .leaflet-container': { height: \"100%\", width: \"100%\" },\n            '& .leaflet-control-attribution': { fontSize: '0.5rem' }\n        }}>\n            <MapContainer\n                center={centerCoordinate}\n                zoom={DEFAULT_ZOOM}\n                maxBounds={maxBounds}\n                scrollWheelZoom={false}\n                placeholder={<MapPlaceholder />}\n                attributionControl={false}\n            >\n                <MinimapControl position=\"bottomleft\" mapData={mapData} />\n\n                <TileLayer\n                    attribution={tileAttribution}\n                    url={getTileUrl({ themePreference })}\n                    minZoom={MIN_ZOOM}\n                    maxZoom={MAX_ZOOM}\n                    bounds={maxBounds}\n                    accessToken={tileAccessToken}\n                />\n                <AttributionControl position=\"bottomright\" prefix={false} />\n                {\n                    Object.entries(mapData).map(([key, location]) => (\n                        <Marker\n                            key={key}\n                            position={[location.sensor?.coordinates?.latitude, location.sensor?.coordinates?.longitude]}\n                            icon={location.markerIcon}\n                        >\n                            <StyledLeafletPopup>\n                                <Stack direction=\"row\" spacing={3}>\n                                    <Link\n                                        variant=\"body1\"\n                                        fontWeight={500}\n                                        href={location.sensor?.public_iqAir_station_link}\n                                        target='_blank'\n                                        rel=\"noopener noreferrer\"\n                                        color={`${theme.palette.primary.main}!important`}\n                                        underline=\"hover\"\n                                    >\n                                        {location.sensor?.public_iqAir_station_name}\n                                        &nbsp;\n                                        <sup>\n                                            <LaunchIcon fontSize='0.8rem' />\n                                        </sup>\n                                    </Link>\n                                    <Box>\n                                        <img src={IQAir_Logo} />\n                                    </Box>\n                                </Stack>\n\n                                <Box sx={{ '& *': { color: location.current?.color } }}>\n                                    <Typography variant=\"h3\" fontWeight=\"500\" lineHeight={0.9}>\n                                        {location.current?.aqi || '--'}\n                                        <Typography variant='caption' fontWeight=\"500\">(US AQI)</Typography>\n                                    </Typography>\n\n                                    <Typography variant=\"body1\" component=\"span\" fontWeight=\"500\">\n                                        {location.current?.category || '--'}\n                                    </Typography>\n                                </Box>\n\n                                <Typography\n                                    variant=\"caption\"\n                                    sx={{ display: 'block', fontWeight: 500 }}\n                                    gutterBottom\n                                >\n                                    PM2.5: {location.current?.[\"pm2.5\"] || '--'}µg/m<sup>3</sup>\n                                </Typography>\n                                <Typography\n                                    variant=\"caption\"\n                                    sx={{ display: 'block', fontWeight: 500 }}\n                                    gutterBottom\n                                >\n                                    <ThermostatIcon sx={{ fontSize: '1rem', verticalAlign: 'sub' }} />\n                                    {\n                                        getFormattedTemperature({\n                                            rawTemp: location.current?.temperature,\n                                            currentUnit: TemperatureUnits.celsius,\n                                            returnUnit: temperatureUnitPreference\n                                        })}\n                                    &nbsp;&nbsp;-&nbsp;&nbsp;\n                                    <WaterDropIcon sx={{ fontSize: '1rem', verticalAlign: 'sub' }} />\n                                    {location.current?.rel_humidity ? Math.round(location.current?.rel_humidity) : \"--\"}%\n                                </Typography>\n                                <Typography variant=\"caption\" sx={{ display: 'block', fontWeight: 500 }}>\n\n                                </Typography>\n                                <Box>\n                                    <Typography variant='caption' sx={{ mt: 0 }}>\n                                        <Typography variant='caption' fontWeight=\"500\">Last update:</Typography>\n                                        {location.current?.timestamp\n                                            ? ` ${getFormattedElapsedTimeFromNow(location.current.timestamp)} ago (${new Date(location.current.timestamp).toLocaleString()})`\n                                            : '--'}\n                                    </Typography>\n                                    <br />\n                                    <Typography\n                                        variant=\"caption\"\n                                        textTransform=\"capitalize\"\n                                    >\n                                        <Typography variant='caption' fontWeight=\"500\">Status:</Typography>\n                                        &nbsp;\n                                        {location.current?.sensor_status}\n                                    </Typography>\n                                </Box>\n                            </StyledLeafletPopup>\n                        </Marker>\n\n                    ))\n                }\n\n            </MapContainer>\n        </Box>\n    )\n}\n\nexport default Map;","import { useEffect, useContext, useState } from 'react';\n\nimport { Button, Box, Grid, Stack, Typography, Container, Card, CardContent, CardMedia, CardActionArea, Divider, Tooltip } from '@mui/material';\nimport { LinkContext } from '../../ContextProviders/LinkContext';\n\nimport UppercaseTitle from '../../Components/UppercaseTitle';\nimport FullWidthBox from '../../Components/FullWidthBox';\n\n// import AtAGlance from './AtAGlance';\nimport About from './About';\n\nimport jsonData from '../../section_data.json';\n\nimport * as Tracking from '../../Utils/Tracking';\n\nimport Map from './Map';\n\nimport CurrentAQIGrid from '../../Components/CurrentAQIGrid';\nimport { fetchAndprocessCurrentSensorsData } from '../../Utils/ApiUtils';\n\nimport LaunchIcon from '@mui/icons-material/Launch';\n\nfunction Home({ themePreference, temperatureUnitPreference, title }) {\n  // Update the page's title\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n\n  // useState for home page data\n  // eslint-disable-next-line no-unused-vars\n  const [_, setCurrentPage, __, setChartsTitlesList] = useContext(LinkContext);\n\n  // set underline link to home\n  useEffect(() => {\n    setCurrentPage('home');\n    setChartsTitlesList([]);\n  }, [setCurrentPage, setChartsTitlesList]);\n\n  // Fetch public NYUAD sensors data\n  const [nyuadCurrentSensorData, setNyuadCurrentSensorData] = useState({});\n\n  useEffect(() => {\n    let apiUrl = 'https://api.citiesair.com/current/nyuad';\n\n    fetchAndprocessCurrentSensorsData(apiUrl)\n      .then((data) => {\n        setNyuadCurrentSensorData(data)\n      })\n      .catch((error) => console.log(error));\n  }, []);\n\n  return (\n    <Box width=\"100%\">\n      <FullWidthBox>\n        <Container sx={{ pt: 3, pb: 4 }}>\n          <UppercaseTitle text=\"real-time air quality at NYUAD\" />\n          <Typography variant='body1' color='text.secondary' sx={{ mt: -2, mb: 2 }}>\n            PM2.5 (Particulate Matter Smaller Than 2.5 Micrometer)\n          </Typography>\n\n          <Grid container justifyContent=\"center\" spacing={3}>\n            <Grid item textAlign=\"center\" xs={10}>\n              <CurrentAQIGrid\n                currentSensorsData={nyuadCurrentSensorData}\n                isScreen={false}\n                orderOfItems={[3, 1, 2]}\n                temperatureUnitPreference={temperatureUnitPreference}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <Stack width=\"fit-content\" alignItems=\"center\" margin=\"auto\">\n                <Button\n                  variant='contained'\n                  sx={{ width: \"fit-content\", mb: 1 }}\n                  href=\"https://citiesdashboard.com/project/air-quality\"\n                  target=\"blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <LaunchIcon sx={{ fontSize: '0.8rem' }} />&nbsp;NYUAD Dashboard (Public Access)\n                </Button>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  See detailed analysis of historical air quality data at NYUAD\n                </Typography>\n              </Stack>\n            </Grid>\n          </Grid>\n\n\n        </Container>\n      </FullWidthBox>\n\n      <FullWidthBox sx={{ backgroundColor: 'customAlternateBackground' }}>\n        <Container sx={{ py: 3 }}>\n          <UppercaseTitle text=\"public outdoor stations\" />\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            Below is a map of CITIESair's public outdoor air quality monitoring stations. We are expanding the network to cover various schools in Abu Dhabi to raise air quality awareness towards more sustainable and healthy-living lifestyles. This map <u><b>does not</b></u> display indoor stations in participating schools to protect their privacy. That said, we strive to publish all outdoor monitoring stations' measurements on IQAir, the world's most popular air quality monitoring platform, to make the data publicly available the surrounding community, school teachers, staff, and parents.\n          </Typography>\n        </Container>\n        <Map themePreference={themePreference} temperatureUnitPreference={temperatureUnitPreference} />\n\n      </FullWidthBox>\n\n      <Divider />\n\n      <FullWidthBox id={jsonData.about.id} sx={{ pt: 3, pb: 4 }}>\n        <Container>\n          <About />\n        </Container>\n      </FullWidthBox>\n    </Box >\n  );\n}\n\nexport default Home;\n","// ---------- Calculate time difference and return appropriate format\nexport const getFormattedElapsedTimeFromNow = (dateString) => {\n  const inputDate = new Date(dateString);\n  const currentDate = new Date();\n  const timeDifference = currentDate - inputDate;\n\n  // Calculate time differences in seconds, minutes, hours, and days\n  const seconds = Math.floor(timeDifference / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  // Determine the most prominent time unit\n  if (days > 0) {\n    return `${days}d`;\n  } else if (hours > 0) {\n    return `${hours}h`;\n  } else if (minutes > 0) {\n    return `${minutes}m`;\n  } else {\n    return `${seconds}s`;\n  }\n}\n\n// ---------- Sensor status\nexport const SensorStatus = {\n  active: \"active\",\n  temporaryOffline: \"temporaryOffline\",\n  offline: \"offline\"\n};\n\nconst SensorStatusCriteria = [\n  {\n    name: SensorStatus.active,\n    cutoffInHours: {\n      low: 0,\n      high: 2\n    }\n  },\n  {\n    name: SensorStatus.temporaryOffline,\n    cutoffInHours: {\n      low: 3,\n      high: 6\n    }\n  },\n  {\n    name: SensorStatus.offline,\n    cutoffInHours: {\n      low: 7,\n      high: Infinity\n    }\n  }\n];\n\nexport const calculateSensorStatus = (lastSeenInHours) => {\n  for (let i = 0; i < SensorStatusCriteria.length; i++) {\n    const category = SensorStatusCriteria[i];\n    if (category.cutoffInHours.low <= lastSeenInHours && lastSeenInHours <= category.cutoffInHours.high) {\n      return category.name;\n    }\n  }\n}\n\nexport const returnSensorStatus = (sensorData) => {\n  switch (sensorData.sensor_status) {\n    case SensorStatus.active:\n      return null;\n    case SensorStatus.temporaryOffline:\n      return `Last seen: ${sensorData.lastSeen}h ago`;\n    case SensorStatus.offline:\n      return \"Sensor offline\";\n    default:\n      return null;\n  }\n}\n\n// ----- Misc\nexport const capitalizeFirstCharacter = (inputString) => {\n  if (inputString) return inputString.charAt(0).toUpperCase() + inputString.slice(1);\n  else return null;\n};\n\nexport const getDomainName = (url) => {\n  return new URL(url).hostname;\n}\n\nexport const getUrlAfterScreen = (url) => {\n  const screenString = 'screen';\n  const urlComponents = url.split(screenString);\n  return `${screenString}${urlComponents.pop()}`;\n}\n\nexport const removeLastDirectoryFromURL = (url) => {\n  const urlComponents = url.split('/');\n  // Remove the last component (directory)\n  urlComponents.pop();\n  // Reconstruct the URL with the last directory removed\n  return urlComponents.join('/') + '/';\n}\n\nexport const areDOMOverlapped = (rect1, rect2) => {\n  if (!(rect1.bottom < rect2.top || rect1.top > rect2.bottom)) {\n    if (rect1.top < rect2.top) return -1;\n    else return 1;\n  }\n  else return 0;\n}\n","import AQIdatabase from \"./AirQualityIndexHelper\";\n\n// Helper function to categorize AQI\nfunction linearPieceWise(aqiHigh, aqiLow, concenHigh, concenLow, val) {\n  return parseInt(\n    ((aqiHigh - aqiLow) / (concenHigh - concenLow)) * (val - concenLow) + aqiLow\n  );\n}\n// Returns AQI number value\nfunction convertToAQI(val) {\n  if (val == null)\n    return {\n      aqi: null,\n      aqi_category_index: null\n    };\n\n  for (let i = 0; i < AQIdatabase.length; i++) {\n    const category = AQIdatabase[i];\n    if (val >= category.rawPM2_5.low && val <= category.rawPM2_5.high) {\n      return {\n        aqi: linearPieceWise(category.aqiUS.high, category.aqiUS.low, category.rawPM2_5.high, category.rawPM2_5.low, val),\n        aqi_category_index: category.id\n      }\n    }\n  };\n}\n\nexport default convertToAQI;","import CustomThemes from '../Themes/CustomThemes';\n\nconst AQIdatabase = [\n  {\n    id: 0,\n    category: 'Good',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[0],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[0],\n    aqiUS: {\n      low: 0,\n      high: 50\n    },\n    rawPM2_5: {\n      low: 0.0,\n      high: 12.0\n    },\n    description: 'Air quality is satisfactory, and air pollution poses little or no risk',\n    healthSuggestions: {\n      outdoors: 'Enjoy outdoor activities, the air is great!',\n      indoors_generic: 'Enjoy clean indoor air',\n      indoors_dining_hall: 'Enjoy clean dining hall air',\n      indoors_gym: 'Enjoy clean air for physical activities indoors',\n      indoors_vulnerable: 'Enjoy clean indoor air'\n    }\n  },\n  {\n    id: 1,\n    category: 'Moderate',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[1],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[1],\n    aqiUS: {\n      low: 51,\n      high: 100\n    },\n    rawPM2_5: {\n      low: 12.1,\n      high: 35.4\n    },\n    description: 'Air quality is acceptable. However, there may be a risk for some people, particularly those who are unusually sensitive to air pollution',\n    healthSuggestions: {\n      outdoors: 'Children and individuals with respiratory issues might need to reduce prolonged outdoor exertion',\n      indoors_generic: 'Indoor air is acceptable, but not great',\n      indoors_dining_hall: 'Indoor air is acceptable, but not great<br>Avoid Grill area',\n      indoors_gym: 'Indoor air is acceptable, but not great',\n      indoors_vulnerable: 'Indoor air is acceptable, but not great'\n    }\n  },\n  {\n    id: 2,\n    category: 'Unhealthy for Sensitive Groups',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[2],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[2],\n    aqiUS: {\n      low: 101,\n      high: 150\n    },\n    rawPM2_5: {\n      low: 35.5,\n      high: 55.4\n    },\n    description: 'Members of sensitive groups may experience health effects. The general public is less likely to be affected',\n    healthSuggestions: {\n      outdoors: 'Children and individuals with respiratory issues should limit outdoor exertion',\n      indoors_dining_hall: 'Consider take-aways<br>Avoid Grill area',\n      indoors_gym: 'Individuals with respiratory issues should lower the intensity of indoor exercises',\n      indoors_vulnerable: 'Monitor closely individuals with respiratory issues for any symptom'\n    }\n  },\n  {\n    id: 3,\n    category: 'Unhealthy',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[3],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[3],\n    aqiUS: {\n      low: 151,\n      high: 200\n    },\n    rawPM2_5: {\n      low: 55.5,\n      high: 150.4\n    },\n    description: 'Some members of the general public may experience health effects; members of sensitive groups may experience more serious health effects',\n    healthSuggestions: {\n      outdoors: 'Everyone should limit outdoor activities<br>Wear masks when going outside',\n      indoors_dining_hall:\n        'Consider take-aways<br>Avoid Grill area<br>Come back at off-peak hours',\n      indoors_gym: 'Everyone should lower the intensity of indoor exercises',\n      indoors_vulnerable: 'Monitor closely individuals with respiratory issues for any symptom'\n    }\n  },\n  {\n    id: 4,\n    category: 'Very Unhealthy',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[4],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[4],\n    aqiUS: {\n      low: 201,\n      high: 300\n    },\n    rawPM2_5: {\n      low: 150.5,\n      high: 250.4\n    },\n    description: 'Health alert: The risk of health effects is increased for everyone',\n    healthSuggestions: {\n      outdoors: 'Avoid outdoor activities at all cost<br>Wear N95 masks when going outside',\n      indoors_dining_hall:\n        'Consider take-aways<br>Avoid Grill area<br>Come back at off-peak hours',\n      indoors_gym: 'Indoor air quality is not suitable for any physical activities',\n      indoors_vulnerable: 'Monitor closely individuals with respiratory issues for any symptom'\n    }\n  },\n  {\n    id: 5,\n    category: 'Hazardous',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[5],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[5],\n    aqiUS: {\n      low: 300,\n      high: 500\n    },\n    rawPM2_5: {\n      low: 250.5,\n      high: 550.5\n    },\n    description: 'Health warning of emergency conditions: everyone is more likely to be affected',\n    healthSuggestions: {\n      outdoors: 'Avoid outdoor activities at all cost<br>Wear N95 masks when going outside',\n      indoors_dining_hall:\n        'Consider take-aways<br>Avoid Grill area<br>Come back at off-peak hours',\n      indoors_gym: 'Indoor air quality is not suitable for any physical activities',\n      indoors_vulnerable: ''\n    }\n  },\n];\n\nexport default AQIdatabase;\n","import { fetchDataFromURL } from \"../Components/DatasetDownload/DatasetFetcher\";\nimport { calculateSensorStatus, SensorStatus } from \"../Pages/Screen/ScreenUtils\";\nimport convertToAQI from \"./AirQualityIndexCalculator\";\nimport AQIdatabase from \"./AirQualityIndexHelper\";\nimport parse from 'html-react-parser';\n\nexport const apiDomain = 'https://api.citiesair.com';\n\nexport const fetchAndprocessCurrentSensorsData = async (apiUrl) => {\n  try {\n    const data = await fetchDataFromURL(apiUrl, 'json', true);\n\n    if (!data) {\n      throw new Error('Returned data is empty');\n    }\n\n    try {\n      return processCurrentSensorsData(data);\n    } catch (error) {\n      // Handle the case where data is not an iterable object\n      console.error(\"Error: data is not iterable\", error);\n    }\n  }\n  catch (error) {\n    throw new Error(`Error fetching data: ${error.message}`);\n  }\n}\n\nexport const processCurrentSensorsData = (data) => {\n  Object.entries(data).map(([_, sensorData]) => {\n    // Calculate if the sensor is currently active or not\n    const now = new Date();\n    const currentTimestamp = new Date(sensorData.current?.timestamp);\n    const lastSeenInHours = Math.round((now - currentTimestamp) / 1000 / 3600);\n    if (sensorData.current) {\n      sensorData.current.lastSeenInHours = lastSeenInHours;\n      sensorData.current.sensor_status = calculateSensorStatus(lastSeenInHours);\n    }\n\n    // Calculate AQI from raw measurements\n    if (sensorData.current?.[\"pm2.5\"]) {\n      const aqiObject = convertToAQI(sensorData.current[\"pm2.5\"]);\n      if (aqiObject) {\n        const aqiCategory = AQIdatabase[aqiObject.aqi_category_index];\n        sensorData.current.aqi = aqiObject.aqi;\n        sensorData.current.category = aqiCategory.category;\n\n        // Only add color and healthSuggestion if the sensor is active\n        if (sensorData.current.sensor_status === SensorStatus.active) {\n          sensorData.current = {\n            ...sensorData.current,\n            color: aqiCategory.lightThemeColor,\n            healthSuggestion: aqiCategory.healthSuggestions[sensorData.sensor?.location_type] && parse(aqiCategory.healthSuggestions[sensorData.sensor?.location_type])\n          };\n        }\n      }\n    }\n  });\n  return data;\n}"],"names":["displayLastUpdateAndSensorStatus","sensorData","isScreen","current","sensor_status","SensorStatus","variant","sx","mt","fontWeight","color","AQIdatabase","mr","timestamp","getFormattedElapsedTimeFromNow","props","currentSensorsData","temperatureUnitPreference","orderOfItems","container","justifyContent","verticalAlign","fontSize","fontFamily","Object","entries","map","index","numOfItems","key","item","order","keys","length","xs","Math","max","sm","lg","min","CustomThemes","className","sensor","location_long","location_short","lineHeight","aqi","category","getFormattedTemperature","rawTemp","temperature","currentUnit","TemperatureUnits","returnUnit","transform","rel_humidity","round","includes","location_type","calculateHeatIndex","returnSensorStatus","UppercaseTitle","text","display","textTransform","pb","capitalizePhrase","jsonData","Stack","spacing","element","Paper","elevation","p","Typography","parse","replace","replacePlainHTMLWithMuiComponents","StyledLeafletPopup","styled","Popup","theme","MapPlaceholder","getTileUrl","tileTheme","themePreference","isMiniMap","ThemePreferences","tileAccessToken","centerCoordinate","maxBounds","POSITION_CLASSES","bottomleft","bottomright","topleft","topright","useState","mapData","setMapData","useTheme","MinimapBounds","parentMap","zoom","minimap","useMap","onClick","useCallback","e","setView","latlng","getZoom","useMapEvent","getBounds","bounds","setBounds","onChange","getCenter","handlers","useMemo","move","useEventHandlers","instance","Rectangle","pathOptions","weight","fillColor","MinimapControl","position","mapZoom","MIN_ZOOM","MapContainer","style","height","width","maxWidth","maxHeight","center","dragging","doubleClickZoom","scrollWheelZoom","attributionControl","zoomControl","TileLayer","url","accessToken","location","CircleMarker","coordinates","latitude","longitude","radius","fillOpacity","positionClass","useEffect","fetchDataFromURL","then","data","now","Date","currentTimestamp","lastSeenInHours","calculateSensorStatus","aqiObject","convertToAQI","aqiCategory","aqi_category_index","lightThemeColor","markerIcon","L","html","Box","breakpoints","down","placeholder","attribution","minZoom","maxZoom","AttributionControl","prefix","Marker","icon","direction","Link","href","public_iqAir_station_link","target","rel","palette","primary","main","underline","public_iqAir_station_name","Launch","src","IQAir_Logo","component","gutterBottom","Thermostat","WaterDrop","toLocaleString","title","document","useContext","LinkContext","setCurrentPage","setChartsTitlesList","nyuadCurrentSensorData","setNyuadCurrentSensorData","fetchAndprocessCurrentSensorsData","catch","error","console","log","FullWidthBox","Container","pt","mb","Grid","textAlign","CurrentAQIGrid","alignItems","margin","Button","backgroundColor","py","Divider","id","dateString","inputDate","timeDifference","seconds","floor","minutes","hours","days","active","temporaryOffline","offline","SensorStatusCriteria","name","cutoffInHours","low","high","Infinity","i","lastSeen","capitalizeFirstCharacter","inputString","charAt","toUpperCase","slice","getDomainName","URL","hostname","getUrlAfterScreen","screenString","urlComponents","split","pop","areDOMOverlapped","rect1","rect2","bottom","top","linearPieceWise","aqiHigh","aqiLow","concenHigh","concenLow","val","parseInt","rawPM2_5","aqiUS","darkThemeColor","description","healthSuggestions","outdoors","indoors_generic","indoors_dining_hall","indoors_gym","indoors_vulnerable","apiUrl","Error","processCurrentSensorsData","message","healthSuggestion"],"sourceRoot":""}