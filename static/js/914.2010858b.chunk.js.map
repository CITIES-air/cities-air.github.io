{"version":3,"file":"static/js/914.2010858b.chunk.js","mappings":"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","sources":["Components/UppercaseTitle.jsx","Graphs/HeatMap.jsx","Graphs/Subchart/SeriesSelector.jsx","Graphs/GoogleChartHelper.jsx","Graphs/Subchart/GoogleChartStyleWrapper.jsx","Graphs/Subchart/SubChart.jsx","Graphs/ChartComponent.jsx","Graphs/ChartSubstituteComponents/AirQualityIndexTable.jsx","Graphs/ChartSubstituteComponents/ChartSubstituteComponentLoader.jsx","Components/DatasetDownload/DatasetCalendar.jsx","Components/DatasetDownload/DatasetDownloadDialog.jsx","Pages/Dashboard/Dashboard.jsx","Utils/AirQualityIndexHelper.jsx","Graphs/ChartSubstituteComponents|lazy|/^/.//.*$/|groupOptions: {}|namespace object"],"sourcesContent":["import Typography from '@mui/material/Typography';\n\nexport default function UppercaseTitle({ text }) {\n  return (\n    <Typography\n      variant=\"h4\"\n      color=\"text.primary\"\n      sx={{\n        fontWeight: 'medium',\n        display: 'inline-block',\n        textTransform: 'uppercase',\n        pb: 3,\n        lineHeight: 1\n      }}\n    >\n      {text}\n    </Typography>\n  );\n}\n","import { memo } from 'react';\n\nfunction HeatMap(props) {\n  const { publishedSheetId, gid, range } = props;\n  const embedLink = `https://docs.google.com/spreadsheets/d/e/${publishedSheetId}/pubhtml?gid=${gid}&single=true&widget=false&headers=false&chrome=false&range=${range}`;\n  return (\n    <iframe\n      title=\"Heatmap-iframe\"\n      className=\"heat-map-iframe\"\n      style={{ width: '100%', height: '100%', border: 'none' }}\n      src={embedLink}\n    >\n      Loading...\n    </iframe>\n  );\n}\n\nexport default memo(HeatMap);\n","/* eslint-disable */\nimport { useState, useEffect } from 'react';\nimport { Stack, Grid, MenuItem, FormControl, Select, Chip, Radio, Checkbox, Typography, Switch } from \"@mui/material\";\nimport { useTheme } from '@mui/material/styles';\n\nimport VisibilityIcon from '@mui/icons-material/Visibility';\n\nconst SELECT_ALL = 'Display All Series';\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\n\nexport default function SeriesSelector(props) {\n  const { items: itemsFromChart, selectorID, allowMultiple, onSeriesSelection } = props;\n\n  const theme = useTheme();\n\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: ITEM_HEIGHT * 5.55 + ITEM_PADDING_TOP,\n        overflow: 'visible !important',\n        background: theme.palette.customAlternateBackground\n      }\n    },\n    anchorOrigin: {\n      vertical: -6,\n      horizontal: \"left\"\n    },\n    transformOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"left\"\n    },\n    getContentAnchorEl: null\n  };\n\n  const [items, setItems] = useState(itemsFromChart);\n  const [selectAll, setSelectAll] = useState(allowMultiple); // default: all is selected if multiSelect is true\n\n  useEffect(() => {\n    setItems(itemsFromChart);\n  }, [itemsFromChart]);\n\n  useEffect(() => {\n    setSelectAll(items.every(item => item.selected)); // set selectAll if all items are selected\n  }, [items]);\n\n  const handleChange = (event) => {\n    // Get the array of the currently selected value(s)\n    const {\n      target: { value }\n    } = event;\n\n    // If the current selection has SELECT_ALL\n    // Behavior:\n    // - If SELECT_ALL is being selected now, then set all items to selected\n    // - IF SELECT_ALL is being de-selected now, then set all items but the first one to be unselected \n    // (to make sure there's always at least 1 item being selected)\n    if (value.includes(SELECT_ALL)) {\n      const updatedItems = items.map((item, index) => ({ ...item, selected: index == 0 ? true : !selectAll }));\n      onSeriesSelection(updatedItems);\n      setSelectAll(!selectAll);\n    }\n    // Else, if an ordinary item is selected/de-selected:\n    else {\n      const selectedItems = items.filter(item => value.includes(item.label));\n      const updatedItems = items.map(item => ({\n        ...item,\n        selected: selectedItems.some(selectedItem => selectedItem.label === item.label)\n      }));\n      onSeriesSelection(updatedItems);\n      setSelectAll(false);\n    }\n  };\n\n  const handleItemToggle = (item) => {\n    const updatedItems = items.map(existingItem =>\n      existingItem.label === item.label ? { ...existingItem, selected: !existingItem.selected } : existingItem\n    );\n    onSeriesSelection(updatedItems);\n  };\n\n  const renderedLabel = (selected) => {\n    return (\n      <Stack direction=\"row\" alignItems=\"center\" spacing={0.5}>\n        <VisibilityIcon fontSize=\"1.5rem\" sx={{ color: theme.palette.text.secondary }} />\n        <Typography variant=\"caption\" color=\"text.secondary\">\n          { /* show # of series selected if multiSelect. show cur selected serie if singleSelect */}\n          {allowMultiple ? `${selected.length} series displayed${selectAll ? ` (all)` : \"\"}`\n            : selected\n          }\n        </Typography>\n      </Stack>\n    )\n  };\n\n  return (\n    <Stack spacing={1} direction=\"row\" alignItems=\"center\">\n      <FormControl sx={{\n        [theme.breakpoints.down('sm')]: { width: '100%' },\n        minWidth: '200px',\n        '& .MuiInputBase-root': { mt: 1, borderRadius: theme.spacing(1) }\n      }} size=\"small\">\n        <Select\n          labelId={`${selectorID}-label`}\n          id={selectorID}\n          multiple={allowMultiple}\n          value={items.filter(item => item.selected).map(item => item.label)}\n          onChange={handleChange}\n          MenuProps={MenuProps}\n          renderValue={(selected) => renderedLabel(selected)}\n          sx={{ fontSize: '0.75em' }}\n        >\n          {/* Display all available items, together with checkbox for each item to select from */}\n          {items.map((item) => (\n            <MenuItem\n              disabled={\n                // If there is only 1 selected item and this is the selected item\n                // Then, prevent user from de-select this item too\n                // To ensure at least there is 1 selected item at all times\n                (items.filter(item => item.selected).length === 1 && item.selected) ? true : false\n              }\n              key={item.label}\n              value={item.label}\n              sx={{\n                backgroundColor: 'unset !important',\n                \"&:hover\": {\n                  backgroundColor: 'inherit !important',\n                }\n              }}\n            >\n              { /* checkboxes for MultiSelect, radioButtons for singleSelect*/}\n              {allowMultiple ? <Checkbox\n                checked={item.selected}\n                onClick={() => handleItemToggle(item)}\n\n                sx={{ p: 0.25, transform: 'scale(0.8)' }} />\n                : <Radio\n                  checked={item.selected}\n                  onChange={() => handleChange(item)}\n\n                  sx={{ p: 0.25, transform: 'scale(0.8)' }} />\n              }\n              <Typography variant='caption'>{item.label}</Typography>\n            </MenuItem>\n          ))}\n\n          {/* Show the option to select all if multiSelect is true*/}\n          {allowMultiple && <MenuItem key={SELECT_ALL} value={SELECT_ALL} sx={{\n            borderTop: 'solid 0.5px', borderColor: theme.palette.text.secondary,\n            position: 'sticky', bottom: 0, zIndex: 9999, marginBottom: theme.spacing(-1),\n            background: theme.palette.customAlternateBackground,\n            \"&:hover\": {\n              background: theme.palette.customAlternateBackground\n            }\n          }}>\n            <Stack direction='row' width='100%' alignItems='center' justifyContent='space-between'>\n              <Typography fontWeight={500} variant='caption' sx={{ pl: 1 }}>{SELECT_ALL}</Typography>\n              <Switch\n                checked={selectAll}\n                onClick={() => handleItemToggle(SELECT_ALL)}\n                sx={{ transform: 'scale(0.8)' }}\n              />\n            </Stack>\n          </MenuItem>\n          }\n        </Select>\n      </FormControl>\n\n      {/* Display only selected items in the Grids, and only in landscape mode and if multiSelect is true*/}\n      {allowMultiple && <Grid container spacing={1}\n        sx={{\n          [theme.breakpoints.down('sm')]: {\n            display: 'none'\n          },\n        }}\n      >\n        {items.filter(item => item.selected).map((item) => (\n          <Grid item key={item.label}>\n            <Chip\n              label={<Typography variant='caption'>{item.label}</Typography>}\n              size=\"small\"\n              {...(items.filter(item => item.selected).length !== 1 && { onDelete: () => handleItemToggle(item) })}\n            />\n          </Grid>\n        ))}\n      </Grid>}\n\n\n    </Stack>\n  );\n}\n","/* eslint-disable */\n\nexport const ChartControlType = {\n  CategoryFilter: { position: 'top', stackDirection: 'column' },\n  DateRangeFilter: { position: 'bottom', stackDirection: 'column-reverse' },\n  ChartRangeFilter: { position: 'bottom', stackDirection: 'column-reverse' },\n  NumberRangeFilter: { position: 'top', stackDirection: 'column' }\n}\n// Async function to fetch data from sheet using Google Visualization query language\nexport const fetchDataFromSheet = ({ chartData, subchartIndex }) => {\n  const urlParams =\n    subchartIndex == null\n      ? {\n        headers: chartData.headers || 1,\n        query: chartData.query,\n        gid: chartData.gid,\n      }\n      : {\n        headers:\n          chartData.headers\n          || chartData.subcharts[subchartIndex].headers\n          || null,\n        query:\n          chartData.query\n          || chartData.subcharts[subchartIndex].query\n          || null,\n        gid:\n          chartData.gid\n          || chartData.subcharts[subchartIndex].gid\n          || null,\n      };\n\n  const url = `https://docs.google.com/spreadsheets/d/${chartData.sheetId}/gviz/tq?gid=${urlParams.gid}&headers=${urlParams.headers}&tqx${urlParams.query ? `&tq=${encodeURIComponent(urlParams.query)}` : ''}`;\n  const query = new google.visualization.Query(url);\n\n  return new Promise((resolve, reject) => {\n    query.send(response => {\n      if (response.isError()) {\n        reject(response.getMessage() + ' ' + response.getDetailedMessage());\n      } else {\n        resolve(response);\n      }\n    });\n  });\n};\n\n// Function to generate a random ID for the google chart container\nexport const generateRandomID = () => {\n  return Math.random().toString(36).substr(2, 9); // Generates a random string of length 9\n}\n\n// -------- Chart options --------\n\nconst hideAnnotations = {\n  stem: {\n    length: 0,\n  },\n  textStyle: {\n    opacity: 0,\n  },\n  boxStyle: null,\n};\n\nconst returnResponsiveFontSizeInPixels = ({ isPortrait, isSmaller }) => {\n  return (\n    isSmaller ? (isPortrait ? 6 : 8) : (isPortrait ? 8 : 10)\n  );\n}\n\nexport const returnGenericOptions = (props) => {\n  const { chartData, subchartIndex, isPortrait, isHomepage, theme } = props;\n\n  // Define some shared styling rules for the chart\n  const axisTitleTextStyle = {\n    italic: false,\n    bold: true,\n    color: theme.palette.chart.axisTitle,\n    fontSize: returnResponsiveFontSizeInPixels({ isPortrait })\n  };\n  const axisTextStyle = {\n    color: theme.palette.chart.axisText,\n    fontSize: returnResponsiveFontSizeInPixels({ isPortrait })\n  };\n\n  // ---- Formulate the options for this specific chart:\n  // 1. Populate first with subchart's options (if any)\n  let options = chartData.subcharts?.[subchartIndex].options\n    ? { ...chartData.subcharts[subchartIndex].options }\n    : {};\n\n  // 2. Append own chart's options and then populate with universal options for all charts\n  options = {\n    ...options,\n    ...chartData.options,\n    theme: 'material',\n    curveType: options.curveType || chartData.options?.curveType || 'function',\n    crosshair: { orientation: 'both', trigger: 'focus', opacity: 0.5 },\n    backgroundColor: { fill: 'transparent' },\n    chartArea: {\n      ...chartData.options?.chartArea,\n      width: isPortrait ? (chartData.options?.chartArea?.width?.portrait || '80%') : (chartData.options?.chartArea?.width?.landscape || '75%'),\n      height: isPortrait ? (chartData.options?.chartArea?.height?.portrait || '60%') : (chartData.options?.chartArea?.height?.landscape || '70%'),\n    },\n    width: isPortrait ? (chartData.options?.width?.portrait || '100%') : (chartData.options?.width?.landscape || '100%'),\n    // if there is a filter, we make space for the chartFilter from the chart's height.\n    // value is divided in 2 because the calculation is applied twice due to\n    // how react-google-charts nest components\n    height: chartData.height || '100%',\n    tooltip: {\n      isHtml: true,\n      showColorCode: false\n    },\n    legend: {\n      alignment: isPortrait ? 'center' : 'start',\n      position:\n        chartData.options?.legend?.position\n        ?? (isPortrait ? 'top' : 'right'),\n      scrollArrows: {\n        activeColor: theme.palette.chart.axisTitle,\n        inactiveColor: theme.palette.text.secondary,\n      },\n      pagingTextStyle: {\n        fontSize: 10,\n        color: theme.palette.chart.axisTitle,\n        bold: true,\n      }\n    }\n  };\n\n  // 3. Append to vAxis and hAxis properties\n  options.vAxis = {\n    ...options.vAxis,\n    format: options.vAxis?.format ?? 'decimal',\n    title: options.vAxis?.title ?? '',\n    viewWindow: {\n      min: options.vAxis?.viewWindow?.min ?? 0,\n    },\n  };\n  options.hAxis = {\n    ...options.hAxis,\n    title: options.hAxis?.title ?? '',\n  };\n  // 3.1. If in portrait mode, slant the text of the hAxis\n  if (isPortrait) {\n    options.hAxis = {\n      ...options.hAxis,\n      slantedText: true,\n      slantedTextAngle: 30,\n    };\n  }\n\n  // 4. Override with custom colors:\n  // 4.1. Color scheme of all the series of this chart\n  if (typeof options.colors === 'string' || !options.colors) options.colors = theme.palette.chart.optionsColors[options.colors || 'multiColor'];\n  // 4.2. Individual color of a single serie (if given)\n  if (options.series) {\n    Object.values(options.series).forEach((_serie) => {\n      const serie = _serie;\n      if (serie.color === 'default') {\n        serie.color = theme.palette.primary.main;\n      }\n    });\n  }\n  // 4.3. Color of the trendline\n  if (options.trendlines) {\n    options.trendlines.forEach((_item) => {\n      const item = _item;\n      item.color = theme.palette.primary.main;\n    });\n  }\n  // 4.4. Color axis of the Calendar chart\n  if (options.colorAxis) {\n    switch (options.colorAxis.colors) {\n      case 'matchingColor':\n        options.colorAxis.colors = [\n          theme.palette.chart.colorAxisFirstColor,\n          theme.palette.chart.optionsColors.multiColor[options.colorAxis.colorIndex],\n        ];\n        break;\n      case 'default':\n        options.colorAxis.colors = [\n          theme.palette.chart.colorAxisFirstColor,\n          theme.palette.NYUpurple,\n        ];\n        break;\n      case 'aqi':\n        options.colorAxis = theme.palette.chart.aqiColorAxis;\n        break;\n      default:\n        break;\n    }\n  }\n  // 4.5. Colors of other elements of the chart (typographies and gridlines)\n  options.vAxis = {\n    ...options.vAxis,\n    titleTextStyle: axisTitleTextStyle,\n    textStyle: axisTextStyle,\n    gridlines: {\n      ...options.vAxis?.gridlines,\n      color: options.vAxis?.gridlines?.color || theme.palette.chart.gridlines\n    },\n    minorGridlines: { count: 0 },\n  };\n  options.hAxis = {\n    ...options.hAxis,\n    titleTextStyle: axisTitleTextStyle,\n    textStyle: axisTextStyle,\n    gridlines: {\n      ...options.hAxis?.gridlines,\n      color: options.hAxis?.gridlines?.color || theme.palette.chart.gridlines\n    },\n    minorGridlines: {\n      ...options.hAxis?.minorGridlines,\n      color: options.hAxis?.gridlines?.color || theme.palette.chart.gridlines,\n    },\n  };\n  options.legend = {\n    ...options.legend,\n    textStyle: axisTextStyle,\n  };\n  options.annotations = {\n    ...options.annotations,\n    highContrast: true,\n    textStyle: {\n      color: theme.palette.primary.contrastText,\n      fontSize: returnResponsiveFontSizeInPixels({ isPortrait, isSmaller: true }),\n      opacity: 0.8\n    },\n    stem: {\n      ...options.annotations?.stem,\n      color: theme.palette.chart.axisTitle,\n      thickness: 2\n    },\n    boxStyle: {\n      rx: theme.shape.borderRadius, // rounded corners\n      ry: theme.shape.borderRadius,\n      fill: theme.palette.chart.annotationBoxFill,\n      fillOpacity: 0.5\n    },\n  };\n\n  // 5. If the chart is displayed on the homepage, override the options with:\n  if (isHomepage) {\n    options = {\n      ...options,\n      chartArea: {\n        ...options.chartArea,\n        width: '80%',\n        height: '80%'\n      },\n      seriesSelector: false,\n      pointSize: 0,\n      enableInteractivity: false,\n      annotations: hideAnnotations,\n      legend: 'none',\n      vAxis: {\n        ...options.vAxis,\n        textPosition: 'none',\n        titleTextStyle: {\n          ...options.vAxis.titleTextStyle,\n          bold: false\n        },\n        gridlines: { color: 'transparent', count: 0 },\n        viewWindowMode: 'maximized'\n      },\n      hAxis: {\n        ...options.hAxis,\n        textPosition: 'none',\n        gridlines: { color: 'transparent', count: 0 },\n        titleTextStyle: {\n          ...options.hAxis.titleTextStyle,\n          bold: false\n        }\n      },\n    };\n  }\n\n  return options;\n}\n\nexport const returnCalendarChartOptions = (existingOptions) => {\n  const calendarDimensions = calculateCalendarDimensions({ cellSizeMin: 14, cellSizeMax: 18 });\n  return {\n    ...existingOptions,\n    width: calendarDimensions.chartWidth,\n    calendar: {\n      cellSize: calendarDimensions.cellSize,\n      yearLabel: {\n        fontSize: calendarDimensions.yearLabelFontSize\n      }\n    },\n    noDataPattern: {\n      backgroundColor: 'none',\n      color: 'none',\n    },\n  }\n}\n\nexport const returnChartControlUI = (props) => {\n  const { chartControl, mainChartData, mainChartOptions, subchartIndex, theme, isPortrait } = props;\n  let chartControlUI = {\n    ...chartControl.options?.ui,\n    snapToData: true\n  };\n\n  // Assign the appropriate UI for chartControl based on controlType (if existed)\n  if (chartControl.controlType === 'ChartRangeFilter') {\n    chartControlUI = {\n      ...chartControlUI,\n      chartType: mainChartData.chartType,\n      chartView: {\n        columns:\n          mainChartData.columns\n          || (mainChartData.subcharts\n            && mainChartData.subcharts[subchartIndex].columns)\n          || null\n          || null,\n      },\n      chartOptions: {\n        ...mainChartOptions,\n        ...chartControl.options?.ui?.chartOptions,\n        hAxis: {\n          ...chartControl.options?.ui?.chartOptions?.hAxis,\n          textPosition: 'out',\n          textStyle: { color: theme.palette.chart.axisText, fontSize: returnResponsiveFontSizeInPixels({ isPortrait, isSmaller: true }) }\n        },\n        vAxis: {\n          ...chartControl.options?.ui?.chartOptions?.vAxis,\n          title: null\n        },\n        annotations: hideAnnotations,\n        legend: null,\n      }\n    };\n  }\n  return chartControlUI;\n}\n\nconst calculateCalendarDimensions = ({ cellSizeMin, cellSizeMax }) => {\n  const cellSize = Math.min(Math.max((window.innerWidth * 0.9) / 58, cellSizeMin), cellSizeMax);\n  return {\n    chartWidth: cellSize * 56, // fixed ratio\n    cellSize,\n    yearLabelFontSize: cellSize * 2\n  };\n};\n\nexport const addTouchEventListenerForChartControl = ({ controlWrapper, chartID }) => {\n  const touchHandler = (event) => {\n    var touches = event.changedTouches,\n      first = touches[0],\n      type = '';\n\n    switch (event.type) {\n      case 'touchstart':\n        type = 'mousedown';\n        break;\n      case 'touchmove':\n        type = 'mousemove';\n        break;\n      case 'touchend':\n        type = 'mouseup';\n        break;\n      default:\n        return;\n    }\n\n    var simulatedEvent = new MouseEvent(type, {\n      bubbles: true,\n      cancelable: true,\n      view: window,\n      detail: 1,\n      screenX: first.screenX,\n      screenY: first.screenY,\n      clientX: first.clientX,\n      clientY: first.clientY,\n      button: 0, // left button\n      relatedTarget: null,\n    });\n\n    first.target.dispatchEvent(simulatedEvent);\n    event.preventDefault();\n  }\n\n  let isMounted = true; // Flag to track component's mount status\n  if (!controlWrapper) return;\n\n  const controlDOM = document.querySelector(`#control-${chartID}`);\n  if (!controlDOM) return;\n\n  ['touchstart', 'touchmove', 'touchend', 'touchcancel']\n    .forEach((touchEvent) => {\n      controlDOM.addEventListener(touchEvent, touchHandler, { capture: true });\n    });\n\n  return () => {\n    isMounted = false; // Component is unmounting\n\n    ['touchstart', 'touchmove', 'touchend', 'touchcancel'].forEach((touchEvent) => {\n      controlDOM.removeEventListener(touchEvent, touchHandler, { capture: true });\n    });\n  };\n}","import { Box } from '@mui/material/';\nimport { styled } from '@mui/material/styles';\n\nconst GoogleChartStyleWrapper = styled(Box)(({ theme, isPortrait }) => ({\n  // CSS for HTML tooltip\n  '& .google-visualization-tooltip': {\n    width: 'unset !important',\n    maxWidth: '350px',\n    height: 'unset',\n    padding: '1em',\n    fontSize: `${isPortrait ? 9 : 12}px`,\n    color: theme.palette.chart.tooltip.text,\n    background: theme.palette.chart.tooltip.background,\n    borderRadius: theme.spacing(1 / 2),\n    '& ul': {\n      margin: '0 !important',\n      '& li': {\n        margin: '0 !important',\n        padding: '0 !important',\n        '& span': {\n          fontSize: `${isPortrait ? 9 : 12}px !important`,\n          color: `${theme.palette.chart.tooltip.text} !important`,\n        }\n      }\n    }\n  },\n\n  // -------- chartControl's additional stylings\n  '& .goog-menuitem-highlight, .goog-menuitem-hover': {\n    backgroundColor: `${theme.palette.primary} !important`\n  },\n\n  // CategoryFilter\n  '& .google-visualization-controls-categoryfilter': {\n    fontSize: '0.85rem',\n    marginTop: '0.75rem',\n    marginBottom: '-0.75rem',\n\n    '& .goog-inline-block > .goog-menu-button': {\n      marginTop: 0\n    },\n\n    '& .goog-menu-button-hover .goog-menu-button-outer-box, .goog-menu-button-hover .goog-menu-button-inner-box': {\n      borderColor: 'inherit !important'\n    },\n\n    '& .google-visualization-controls-label': {\n      color: theme.palette.text.secondary,\n      fontWeight: 500,\n      verticalAlign: 'middle',\n      marginBottom: '0.25rem'\n    },\n    '& .goog-menu-button-outer-box': {\n      backgroundColor: theme.palette.background.paper,\n      border: 'unset',\n\n      '& .goog-menu-button-inner-box': {\n        paddingTop: theme.spacing(0.5),\n        paddingBottom: theme.spacing(0.5),\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2),\n        border: 'solid',\n        borderWidth: '0.5px',\n        borderRadius: theme.spacing(0.5),\n        borderColor: theme.palette.text.secondary,\n\n        '& .goog-menu-button-caption': {\n          color: theme.palette.text.secondary\n        }\n      }\n    }\n  },\n\n  // DateRangeFilter\n  '& .google-visualization-controls-rangefilter': {\n    width: '100%',\n    fontSize: '0.75rem',\n    '& .goog-inline-block': {\n      width: '100%',\n    },\n    '& .google-visualization-controls-slider-horizontal': {\n      width: '90%',\n      margin: '0 5%',\n    },\n    '& .google-visualization-controls-rangefilter-thumblabel:nth-of-type(1)': {\n      position: 'absolute',\n      top: '1.5em',\n      left: '5%'\n    },\n    '& .google-visualization-controls-rangefilter-thumblabel:nth-of-type(2)': {\n      position: 'absolute',\n      top: '1.5em',\n      right: '5%'\n    },\n    '& .google-visualization-controls-slider-handle': {\n      background: theme.palette.primary.main\n    },\n    '& .google-visualization-controls-rangefilter-thumblabel': {\n      color: theme.palette.text.secondary,\n      padding: 0,\n      fontWeight: 500\n    },\n    '& .google-visualization-controls-slider-thumb': {\n      background: theme.palette.primary.main,\n      border: 'unset',\n      borderRadius: '4px'\n    }\n  },\n\n  // These are the paths showing on top of the line chart\n  // and the stroke around the bar/column chart\n  // when the user hovers on the legend to make the serie stand out\n  // by Google Chart's default doesn't change color based on light/dark theme, but we modify here:\n  '& path[stroke-opacity=\"0.3\"], path[stroke-opacity=\"0.1\"], path[stroke-opacity=\"0.05\"], rect[stroke-opacity]': {\n    stroke: theme.palette.text.primary,\n    strokeWidth: 3\n  },\n\n  // Cursor of series in legends\n  '& [column-id]:not(:empty)': {\n    cursor: 'pointer',\n    ':hover': {\n      fontWeight: 600\n    }\n  }\n}));\n\nexport default GoogleChartStyleWrapper;\n","/* eslint-disable */\n\nimport { useState, useEffect, useContext } from 'react';\n\nimport { GoogleContext } from '../../ContextProviders/GoogleContext';\n\nimport { Box, Stack } from '@mui/material/';\n\nimport { useTheme } from '@mui/material/styles';\nimport HeatMap from '../HeatMap';\nimport SeriesSelector from './SeriesSelector';\n\nimport { fetchDataFromSheet, generateRandomID, returnGenericOptions, returnCalendarChartOptions, returnChartControlUI, ChartControlType, addTouchEventListenerForChartControl } from '../GoogleChartHelper';\n\nimport GoogleChartStyleWrapper from './GoogleChartStyleWrapper';\n\nimport LoadingAnimation from '../../Components/LoadingAnimation';\n\nimport ChartSubstituteComponentLoader from '../ChartSubstituteComponents/ChartSubstituteComponentLoader';\n\nexport default function SubChart(props) {\n  // Props\n  const { chartData, subchartIndex, windowSize, isPortrait, isHomepage, height, maxHeight } = props;\n\n  // Early return if this doesn't contain a normal Google Chart but a chartSubstituteComponent\n  const chartSubstituteComponentName = chartData.subcharts?.[subchartIndex].chartSubstituteComponentName;\n  if (chartSubstituteComponentName) {\n    return <ChartSubstituteComponentLoader chartSubstituteComponentName={chartSubstituteComponentName} />;\n  }\n\n  // Formulate the className\n  const className = chartData.customClassName ? `${chartData.chartType} ${chartData.customClassName}` : chartData.chartType;\n\n  // Early return for 'HeatMap' chartType\n  if (chartData.chartType === 'HeatMap') {\n    return (\n      <Box\n        position=\"relative\"\n        className={className}\n        height={chartData.height}\n        maxWidth={chartData.maxWidth ? chartData.maxWidth : '100%'}\n        width=\"100%\"\n        sx={{ pt: 2, pb: 2, margin: 'auto' }}\n      >\n        <HeatMap\n          publishedSheetId={chartData.publishedSheetId}\n          gid={chartData.gid || chartData.subcharts[subchartIndex].gid || null}\n          range={\n            chartData.range || chartData.subcharts[subchartIndex].range || null\n          }\n        />\n      </Box>\n    );\n  }\n\n  // Use GoogleContext for loading and manipulating the Google Charts\n  const [google, _] = useContext(GoogleContext);\n\n  // States of the Google Charts\n  const [dataTable, setDataTable] = useState();\n  const [chartWrapper, setChartWrapper] = useState();\n  const [dashboardWrapper, setDashboardWrapper] = useState();\n  const [controlWrapper, setControlWrapper] = useState();\n\n  // Get the current theme\n  const theme = useTheme();\n\n  // To determine the first time the chart renders to show/hide the LoadingAnimation\n  const [isFirstRender, setIsFirstRender] = useState(true);\n\n  // Keep track of the columns (series) of the chart\n  const [allInitialColumns, setAllInitialColumns] = useState();\n  const [dataColumns, setDataColumns] = useState();\n  const [initialVAxisRange, setInitialVAxisRage] = useState();\n\n  // Define the DOM container's ID for drawing the google chart inside\n  const [chartID, __] = useState(generateRandomID());\n\n  // Calendar chart's properties\n  const [chartTotalHeight, setChartTotalHeight] = useState(200);\n\n  // Get the options object for chart\n  let options = returnGenericOptions({ ...props, theme });\n  if (chartData.chartType === 'Calendar') options = returnCalendarChartOptions(options);\n\n  // Properties for chart control (if existed)\n  let hasChartControl = false;\n  let chartControlOptions;\n  // Only show the chart control if:\n  // It exists in the database (either for all subcharts or just for a particular subchart)\n  // And if the chart is currently not shown on homePage\n  let chartControl = chartData.control || chartData.subcharts?.[subchartIndex].control;\n  if (chartControl && (isHomepage !== true)) {\n    hasChartControl = true;\n\n    // Get the options for chartControl if hasChartControl\n    chartControlOptions = {\n      ...chartControl.options,\n      ui: returnChartControlUI({\n        chartControl,\n        mainChartData: chartData,\n        mainChartOptions: options,\n        subchartIndex,\n        theme,\n        isPortrait\n      })\n    };\n\n    // Swap touch events for mouse events on ChartRangeControl\n    // as it doesn't support touch events on mobile\n    if (chartControl.controlType === 'ChartRangeFilter') {\n      useEffect(() => {\n        const cleanupTouchEventListener = addTouchEventListenerForChartControl({ controlWrapper, chartID });\n        return cleanupTouchEventListener;\n      }, [controlWrapper]);\n    }\n  }\n\n  // Properties for selecting (showing or hiding) the serie(s)\n  const seriesSelector = options.seriesSelector || false;\n\n  // Set new options prop and re-render the chart if theme or isPortrait changes\n  useEffect(() => {\n    if (seriesSelector) handleSeriesSelection(dataColumns); // this function set new options, too\n    else {\n      chartWrapper?.setOptions({\n        ...options,\n        ...(chartData.chartType === 'Calendar' && { height: chartTotalHeight })\n      });\n\n      chartWrapper?.draw();\n      if (hasChartControl) {\n        controlWrapper?.setOptions(chartControlOptions);\n        controlWrapper?.draw();\n      }\n    }\n  }, [theme, isPortrait, windowSize, chartTotalHeight]);\n\n  // Set new initialColumnsColors if the theme changes\n  // This only applies to when seriesSelector.method == \"setViewColumn\"\n  useEffect(() => {\n    if (!dataColumns) return;\n    if (seriesSelector && seriesSelector.method == \"setViewColumn\") {\n      setInitialColumnsColors({ dataColumns: dataColumns });\n      handleSeriesSelection(dataColumns);\n    }\n  }, [theme]);\n\n  const getInitialColumns = ({ chartWrapper, dataTable, seriesSelector }) => {\n    // Update the initial DataView's columns (often, all of the series are displayed initially)\n    var initialView = chartWrapper.getView();\n    // If (optional) columns is not specified in database\n    // Assign it from DataTable\n    if (initialView.columns == null) {\n      const viewFromDataTable = new google.visualization.DataView(dataTable);\n      chartWrapper.setView({\n        columns: viewFromDataTable.columns\n      });\n      initialView = chartWrapper.getView();\n    }\n\n    let shouldAssignDomainRoleToFistColumn = true; // variable to only assign type: 'domain' to the very first column\n    let dataSeriesIndex = 0;\n    const allInitialColumns = initialView.columns.map((col, index) => {\n      // A column can either be a number (that denotes the index of the sourceColumn) or an object\n      // The code below harmonize all columns to be an object to store crucial data to toggle their visibility\n      if (typeof col === 'number') col = {\n        role: shouldAssignDomainRoleToFistColumn ? 'domain' : 'data',\n        sourceColumn: col\n      }\n      col.label = dataTable.getColumnLabel(col.sourceColumn);\n      col.indexInAllInitialColumns = index;\n\n      shouldAssignDomainRoleToFistColumn = shouldAssignDomainRoleToFistColumn && false;\n\n      // Set the visibility of data column, \n      if (col.role === 'data') {\n        // initially, all data columns are selected if multiple series are selectable\n        if (seriesSelector?.allowMultiple) {\n          col.selected = true;\n        } else {\n          // else for single serie selector, only first data column is selected\n          if (dataSeriesIndex === 0) {\n            col.selected = true;\n          } else {\n            col.selected = false;\n          }\n        }\n        col.seriesIndex = dataSeriesIndex;\n        dataSeriesIndex++;\n      }\n      return col;\n    });\n    setAllInitialColumns(allInitialColumns);\n    const initialVAxisRange = getInitialVAxisRange({ dataTable: dataTable, allInitialColumns: allInitialColumns });\n    setInitialVAxisRage(initialVAxisRange);\n    // To track selection, only get the columns that are:\n    // role === 'data'\n    // visibleInLegend !== false\n    const dataColumns = allInitialColumns.filter((col) => {\n      return col.role === 'data' && options.series?.[col.seriesIndex]?.visibleInLegend !== false;\n    });\n\n    if (seriesSelector.method === \"setViewColumn\") setInitialColumnsColors({ dataColumns: dataColumns });\n\n    setDataColumns(dataColumns);\n    return dataColumns;\n  };\n\n  const setInitialColumnsColors = ({ dataColumns }) => {\n    dataColumns.forEach((col) => {\n      // Assign inherit color to this data column\n      col.color = options.colors[col.seriesIndex % options.colors.length];\n      // Assign other inherit attributes from its serie object (if existed)\n      col.serieAttribute = options.series?.[col.seriesIndex];\n    });\n  }\n\n  const getInitialVAxisRange = ({ dataTable, allInitialColumns }) => {\n    let vAxisMin, vAxisMax;\n    allInitialColumns.forEach((col, index) => {\n      if (index === 0) return; // the first column is the domain (hAxis)\n      const range = dataTable.getColumnRange(col.sourceColumn);\n      if (!isNaN(range.min) && range.min) vAxisMin = vAxisMin ? Math.min(vAxisMin, range.min) : range.min;\n      if (!isNaN(range.max) && range.max) vAxisMax = vAxisMax ? Math.max(vAxisMax, range.max) : range.max;\n    });\n    return { min: vAxisMin, max: vAxisMax };\n  }\n\n  const handleSeriesSelection = (newDataColumns, _chartWrapper = chartWrapper) => {\n    if (!allInitialColumns) return;\n\n    setDataColumns(newDataColumns);\n\n    if (seriesSelector.method === \"toggleVisibility\" || seriesSelector.method === null) {\n      const hiddenSeriesObject = {};\n      newDataColumns.forEach((col) => {\n        if (!col.selected)\n          hiddenSeriesObject[col.seriesIndex] = {\n            color: 'transparent',\n            enableInteractivity: false,\n            visibleInLegend: false\n          }; // 'hide' the serie by making it transparent\n      });\n\n      _chartWrapper?.setOptions({\n        ...options,\n        series: {\n          ...options.series,\n          ...hiddenSeriesObject\n        }\n      });\n    }\n    else if (seriesSelector.method === \"setViewColumn\") {\n      let newViewColumns = [];\n      newViewColumns.push(0); // this is the domain column\n      newDataColumns.forEach((dataColumn) => {\n        if (dataColumn.selected) {\n          newViewColumns.push(dataColumn);\n          // Find this dataColumn's supporting columns (whose role !== 'data')\n          // A dataColumn has its supporting columns (can be many) follow it immediately\n          for (let i = dataColumn.indexInAllInitialColumns + 1; i < allInitialColumns.length; i++) {\n            if (allInitialColumns[i].role !== 'data') {\n              newViewColumns.push(allInitialColumns[i]);\n            }\n            // If this loop encounter the next dataColumn, break the loop, all supporting columns for this dataColumn have been discovered\n            else {\n              break;\n            }\n          }\n        }\n      });\n      _chartWrapper?.setView({ columns: newViewColumns });\n\n      const newOptions = { ...options };\n      // Preserve the initial vAxis range so that the vAxis doesn't shift based on the visible serie(s)\n      // newOptions.vAxis.viewWindow = {\n      //   min: (options.vAxis.viewWindow.min == null) ? initialVAxisRange.min : options.vAxis.viewWindow.min,\n      //   max: (options.vAxis.viewWindow.max == null) ? initialVAxisRange.max : options.vAxis.viewWindow.max,\n      // }\n      // Set the new color array\n      newOptions.colors = newDataColumns.filter((col) => col.selected).map((col) => col.color);\n      // Set the new series object (if any)\n      // this contains other series' attributes (lineWidth, seriesType...)\n      const series = {};\n      let selectedSeriesCount = 0;\n      newDataColumns.forEach((col) => {\n        if (!col.selected) return;\n        if (col.serieAttribute != null) {\n          series[selectedSeriesCount] = col.serieAttribute;\n        }\n        selectedSeriesCount++;\n      })\n      newOptions.series = series;\n      _chartWrapper?.setOptions(newOptions);\n    }\n\n    // Call draw to apply the new DataView and 'refresh' the chart\n    _chartWrapper?.draw();\n\n    if (hasChartControl) {\n      controlWrapper?.draw();\n    }\n  };\n\n  // Call this function to fetch the data and draw the initial chart\n  useEffect(() => {\n    if (google && !chartWrapper) {\n      fetchDataFromSheet({ chartData: chartData, subchartIndex: subchartIndex })\n        .then(response => {\n          const thisDataTable = response.getDataTable();\n          setDataTable(thisDataTable);\n          const thisChartWrapper = new google.visualization.ChartWrapper({\n            chartType: chartData.chartType,\n            dataTable: (!hasChartControl) ? thisDataTable : undefined,\n            options: options,\n            view: {\n              columns:\n                chartData.columns\n                || (chartData.subcharts\n                  && chartData.subcharts[subchartIndex].columns)\n                || null\n                || null,\n            },\n            containerId: chartID\n          });\n          setChartWrapper(thisChartWrapper);\n\n          if (hasChartControl) {\n            const thisDashboardWrapper = new google.visualization.Dashboard(\n              document.getElementById(`dashboard-${chartID}`));\n            setDashboardWrapper(thisDashboardWrapper);\n\n            google.visualization.events.addListener(thisDashboardWrapper, 'ready', onChartReady);\n\n            const thisControlWrapper = new google.visualization.ControlWrapper({\n              controlType: chartControl.controlType,\n              options: chartControlOptions,\n              containerId: `control-${chartID}`\n            });\n            setControlWrapper(thisControlWrapper);\n\n            // Establish dependencies\n            thisDashboardWrapper.bind(thisControlWrapper, thisChartWrapper);\n\n            thisDashboardWrapper.draw(thisDataTable);\n          }\n          else {\n            google.visualization.events.addListener(thisChartWrapper, 'ready', onChartReady);\n            thisChartWrapper.draw();\n          }\n\n          // Run the seriesSelector for the first time\n          if (seriesSelector) {\n            const initColumns = getInitialColumns({ chartWrapper: thisChartWrapper, dataTable: thisDataTable, seriesSelector: seriesSelector });\n            handleSeriesSelection(initColumns, thisChartWrapper);\n          }\n\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    }\n  }, [google]);\n\n  const renderChart = () => {\n    if (hasChartControl) {\n      return (\n        <Stack\n          id={`dashboard-${chartID}`}\n          direction={ChartControlType[chartControl.controlType]?.stackDirection || 'column-reverse'}\n          sx={{ height: '100%' }}\n        >\n          <Box\n            id={`control-${chartID}`}\n            sx={{\n              height: `calc(${height} / 8)`,\n              opacity: 0.8,\n              filter: 'saturate(0.3)'\n            }}\n          />\n          <Box id={chartID} sx={{ height: height, maxHeight: maxHeight }} />\n        </Stack>\n      )\n    }\n    else return <Box id={chartID} sx={{ height: height, maxHeight: maxHeight }} />;\n  }\n\n  const onChartReady = () => {\n    if (chartData.chartType === 'Calendar') {\n      // querySelector is used to select the first 'g' element in the svg\n      // this is to get the height of the non-responsive element\n      // to set the CalendarChart's height to make it resonsive\n      const chartDOMContainer = document.getElementById(chartID).querySelector('svg > g:nth-of-type(1)');\n      let renderedHeight = chartDOMContainer.getBBox().height;\n      if (options.legend.position === 'none') renderedHeight += 50;\n      setChartTotalHeight(renderedHeight);\n    }\n\n    if (!isFirstRender) return;\n    // Hide the circleProgress when chart finishes rendering the first time\n    setIsFirstRender(false);\n  };\n\n  return (\n    <GoogleChartStyleWrapper\n      isPortrait={isPortrait}\n      className={className}\n      position=\"relative\"\n      height=\"100%\"\n      minHeight={chartData.chartType === 'Calendar' && '200px'}\n    >\n      {/* Conditionally display loading animation here */}\n      {isFirstRender && (\n        <Box sx={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}>\n          <LoadingAnimation />\n        </Box>\n      )}\n\n      {/* Conditionally display seriesSelector here */}\n      {(seriesSelector && !isFirstRender) && (\n        <SeriesSelector\n          items={dataColumns}\n          allowMultiple={seriesSelector.allowMultiple}\n          selectorID={`${chartData.title}-selector`}\n          onSeriesSelection={handleSeriesSelection}\n        />\n      )}\n\n      {/* Display chart here */}\n      {renderChart()}\n    </GoogleChartStyleWrapper>\n  );\n}","import { useState, useEffect, useContext } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Box, Tabs, Tab, useMediaQuery } from '@mui/material/';\nimport { TabContext } from '../ContextProviders/TabContext';\n\nimport SubChart from './Subchart/SubChart';\n\nconst debounceMilliseconds = 100;\n\nconst ChartStyleWrapper = styled(Box)(({ theme }) => ({\n  // CSS for dark theme only\n  ...(theme.palette.mode === 'dark' && {\n    // De-saturate a bit\n    filter: 'saturate(0.85)',\n    // Invert iframe\n    '& .heat-map-iframe': {\n      filter: 'invert(0.848) hue-rotate(180deg)',\n    }\n  }),\n  // Special CSS for historical-snapshot-aqi chart\n  '& .historical-snapshot-aqi svg [clip-path*=\"ABSTRACT_RENDERER\"] > g:nth-of-type(1), .historical-snapshot-aqi [id*=\"googlechart-control\"] svg [clip-path*=\"ABSTRACT_RENDERER\"] > g:nth-of-type(2)': {\n    opacity: 0.6\n  },\n  // Center Calendar chart in wrapper\n  '& .Calendar [dir]:not(:empty)': {\n    margin: 'auto'\n  },\n\n  // add horizontal scrollbar to Calendar charts\n  '& .Calendar > div > div:last-of-type > div': {\n    overflowX: 'auto',\n    overflowY: 'hidden',\n    scrollbarGutter: 'stable'\n  }\n}));\n\nconst StyledTabs = styled(Tabs)(({ theme }) => ({\n  '& .MuiTabScrollButton-root': {\n    color: theme.palette.text.primary\n  },\n  '& .MuiTab-root': {\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '0.75rem',\n      paddingLeft: theme.spacing(1),\n      paddingRight: theme.spacing(1)\n    },\n  }\n}));\n\n// eslint-disable-next-line max-len\nfunction ChartComponent({ chartData: passedChartData, chartHeight: passedChartHeight, isHomepage }) {\n  const isSmallWidth = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n\n  const [isPortrait, setIsPortrait] = useState(window.matchMedia('(orientation: portrait)').matches);\n  const [windowSize, setWindowSize] = useState([\n    window.innerWidth,\n    window.innerHeight,\n  ]);\n\n  let chartMaxHeight;\n  let chartHeight = passedChartHeight;\n  let chartData = passedChartData;\n\n  // use tab context\n  const [_, setTab] = useContext(TabContext);\n\n  // Props for tab panels (multiple data visualizations in the same chart area,\n  // navigate with tab panels)\n  const [indexValue, setIndexValue] = useState(0); // start with the first elem\n\n  // eventListener for window resize\n  // redraw \"Calendar\" charts and charts with a time filter upon window resize.\n  // Filter & Calendar charts are not automatically respnsive, so we have to redraw them.\n  // redraw other charts when device orientation changes\n  useEffect(() => {\n    let timeoutID = null;\n\n    const handleWindowResize = () => {\n      clearTimeout(timeoutID);\n\n      // debounce before triggering re-render. as user is resizing window, the state could\n      // change multiple times causing many expensive rerenders. we try to rerender at the\n      // end of the resize.\n      timeoutID = setTimeout(() => {\n        // Redraw all charts on device orientation change, as the chartWrapperHeights\n        // have changed.\n        setIsPortrait(window.matchMedia('(orientation: portrait)').matches);\n\n        // Redraw all charts on window resized\n        setWindowSize([window.innerWidth, window.innerHeight]);\n      }, debounceMilliseconds);\n    };\n\n    // listen to window resize events\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, [chartData]);\n\n  if (chartData.chartType !== 'Calendar' && !chartHeight) {\n    chartHeight = isPortrait ? '80vw' : '35vw';\n    chartMaxHeight = isPortrait ? '800px' : '500px';\n  }\n\n  // Assign the subcharts array for HeatMap based on the device orientation\n  if (chartData.chartType === 'HeatMap') {\n    chartData = {\n      ...chartData,\n      ...chartData[isPortrait ? 'subchartsPortrait' : 'subchartsLandscape'],\n    };\n  }\n\n  let renderedComponent;\n\n  // Display multiple subcharts\n  // but not in homepage\n  if (chartData.subcharts) {\n    // Handle tab change\n    const handleChange = (__, newValue) => {\n      // use setTab to copy the tab object and update the subIndex\n      setTab((prevState) => ({ ...prevState, [chartData.chartIndex]: newValue }));\n      setIndexValue(newValue);\n    };\n\n    // If the chart in in homepage, just display the first subChart\n    if (isHomepage) {\n      renderedComponent = (\n        <SubChart\n          chartData={chartData}\n          subchartIndex={0}\n          isPortrait={isPortrait}\n          isHomepage={isHomepage}\n          windowSize={windowSize}\n          height={chartData.height ? chartData.height : chartHeight}\n          maxHeight={\n            chartData.chartType === 'HeatMap' ? '' : chartMaxHeight\n          }\n        />\n      );\n    } else {\n      renderedComponent = (\n        <>\n          <StyledTabs\n            value={indexValue}\n            onChange={handleChange}\n            variant={isSmallWidth ? 'fullWidth' : 'standard'}\n          >\n            {chartData.subcharts.map((element, index) => (\n              <Tab\n                key={index}\n                value={index}\n                label={chartData.subcharts[index].subchartTitle}\n              />\n            ))}\n          </StyledTabs>\n          <Box position=\"relative\">\n            {chartData.subcharts.map((__, index) => (\n              <Box\n                key={index}\n                width=\"100%\"\n                height=\"100%\"\n                role=\"tabpanel\"\n                sx={{\n                  transition: '0.35s',\n                  position: (index === 0) ? '' : 'absolute',\n                  opacity: indexValue === index ? '1' : '0',\n                  pointerEvents: indexValue === index ? 'auto' : 'none',\n                  top: (index === 0) ? '' : 0\n                }}\n              >\n                <SubChart\n                  chartData={chartData}\n                  subchartIndex={index}\n                  isPortrait={isPortrait}\n                  isHomepage={isHomepage}\n                  windowSize={windowSize}\n                  height={chartData.height ? chartData.height : chartHeight}\n                  maxHeight={\n                    ['HeatMap', 'Calendar'].includes(chartData.chartType)\n                      ? ''\n                      : chartMaxHeight\n                  }\n                />\n              </Box>\n            ))}\n          </Box>\n        </>\n      );\n    }\n  } else {\n    // If there is only one single chart\n    renderedComponent = (\n      <SubChart\n        chartData={chartData}\n        isPortrait={isPortrait}\n        isHomepage={isHomepage}\n        windowSize={windowSize}\n        height={chartData.height ? chartData.height : chartHeight}\n        maxHeight={\n          chartData.chartType === 'HeatMap' ? '' : chartMaxHeight\n        }\n      />\n    );\n  }\n\n  return (\n    <ChartStyleWrapper height=\"100%\">\n      {renderedComponent}\n    </ChartStyleWrapper>\n  );\n}\n\nexport default ChartComponent;\n","import { Box, Table, TableBody, TableCell, TableHead, TableRow, styled } from '@mui/material';\nimport parse from 'html-react-parser';\nimport { replacePlainHTMLWithMuiComponents } from '../../Utils/Utils';\nimport ChartComponent from '../ChartComponent';\nimport AQIdatabase from '../../Utils/AirQualityIndexHelper';\nimport ThemePreferences from '../../Themes/ThemePreferences';\n\nexport const StyledTable = styled(Table)(({ theme, isTiny }) => ({\n  minWidth: isTiny || 700,\n  '& th, td': {\n    fontSize: isTiny ? '0.625rem' : '0.6875rem',\n    color: theme.palette.text.secondary,\n    [theme.breakpoints.down('sm')]: {\n      fontSize: isTiny ? '0.5rem' : '0.6875rem',\n    },\n  },\n  '& th': {\n    fontWeight: 500,\n    color: theme.palette.text.primary,\n    lineHeight: '1rem'\n  }\n}));\n\nfunction AirQualityIndexTable(props) {\n  const { isTiny, hideAQIDescription, themePreference } = props;\n\n  return (\n    <>\n      <Box overflow=\"auto\">\n        <StyledTable size=\"small\" isTiny={isTiny}>\n          <TableHead>\n            <TableRow>\n              <TableCell sx={{ pr: 0 }}>\n                <Box sx={{ width: '1em', height: '1em' }} />\n              </TableCell>\n              <TableCell sx={{ pl: 1 }}>\n                Category\n              </TableCell>\n              <TableCell align=\"right\">US AQI</TableCell>\n              <TableCell align=\"right\">\n                PM2.5 Concentration\n                (µg/m\n                <sup>3</sup>\n                )\n              </TableCell>\n              {!hideAQIDescription && <TableCell align=\"left\">Description</TableCell>}\n              {!hideAQIDescription && <TableCell align=\"left\">CITIESair&apos; Suggested Actions</TableCell>}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {AQIdatabase.map((element) => (\n              <TableRow\n                key={element.name}\n                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n              >\n                <TableCell sx={{ pr: 0 }}>\n                  <Box sx={{ width: '1em', height: '1em', backgroundColor: themePreference === ThemePreferences.light ? element.lightThemeColor : element.darkThemeColor }} />\n                </TableCell>\n                <TableCell sx={{ pl: 1 }}>\n                  {element.name}\n                </TableCell>\n                <TableCell align=\"right\">\n                  {element.aqiUS.low}\n                  &nbsp;\n                  -\n                  &nbsp;\n                  {element.aqiUS.high}\n                </TableCell>\n                <TableCell align=\"right\">\n                  {element.rawPM2_5.low}\n                  &nbsp;\n                  -\n                  &nbsp;\n                  {element.rawPM2_5.high}\n                </TableCell>\n                {!hideAQIDescription && <TableCell align=\"left\">{element.description}</TableCell>}\n                {!hideAQIDescription\n                  && (\n                    <TableCell align=\"left\">\n                      {\n                        parse(element.healthSuggestions.outdoors, {\n                          replace: replacePlainHTMLWithMuiComponents,\n                        })\n                      }\n                    </TableCell>\n                  )}\n              </TableRow>\n            ))}\n          </TableBody>\n        </StyledTable>\n      </Box>\n      {!hideAQIDescription\n        && (\n          <ChartComponent\n            chartHeight=\"4rem\"\n            chartData={\n              {\n                sheetId: '157f6vu47RBEvnBnW24jGI7cz-ov1aSBUFPdkb5sDKDc',\n                gid: 1958405288,\n                query: 'SELECT * WHERE A = \"US AQI\"',\n                headers: 1,\n                chartType: 'BarChart',\n                columns: [0, 1, 3, 5, 7, 9, 11],\n                options: {\n                  legend: { position: 'none' },\n                  enableInteractivity: false,\n                  hAxis: {\n                    ticks: [0, 50, 100, 150, 200, 300, 500]\n                  },\n                  chartArea:\n                  {\n                    width: { portrait: '98%', landscape: '50%' },\n                    height: { portrait: '20%', landscape: '30%' }\n                  },\n                  isStacked: true,\n                  colors: 'aqi',\n                  bar: { groupWidth: '100%' }\n                }\n              }\n            }\n          />\n        )}\n    </>\n\n  );\n}\n\nexport default AirQualityIndexTable;\n","import { lazy, Suspense } from 'react';\nimport LoadingAnimation from '../../Components/LoadingAnimation';\n\nexport default function ChartSubstituteComponentLoader({ chartSubstituteComponentName }) {\n  return (\n    <Suspense fallback={<LoadingAnimation />}>\n      {(() => {\n        const ChartSubstituteComponent = lazy(\n          () => import(`./${chartSubstituteComponentName}`)\n        );\n        return <ChartSubstituteComponent />;\n      })()}\n    </Suspense>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport dayjs from 'dayjs';\nimport { styled } from '@mui/material/styles';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { PickersDay } from '@mui/x-date-pickers/PickersDay';\nimport { DateCalendar } from '@mui/x-date-pickers/DateCalendar';\nimport { DayCalendarSkeleton } from '@mui/x-date-pickers/DayCalendarSkeleton';\nimport Card from '@mui/material/Card';\nimport ClickAwayListener from '@mui/base/ClickAwayListener';\n\nconst HighlightedDay = styled(PickersDay)(({ theme }) => ({\n  // styles for dot\n  '&:after, :hover::after': {\n    content: '\".\"',\n    fontSize: '1.5rem',\n    bottom: '-0.5rem',\n    position: 'absolute',\n    color: theme.palette.primary.main,\n    opacity: 0.5\n  },\n  '&:hover::after': {\n    opacity: 1\n  }\n}));\n\nfunction isValidDate(date, validDates) {\n  return validDates.indexOf(dayjs(date).format('YYYY-MM-DD')) >= 0;\n}\n\nfunction CustomDayComponent(props) {\n  const { versionDates = [], day, ...other } = props;\n\n  const isHighlighted = versionDates.indexOf(dayjs(day).format('YYYY-MM-DD')) >= 0;\n\n  return (\n    isHighlighted\n      ? <HighlightedDay {...other} day={day} />\n      : <PickersDay {...other} day={day} />\n  );\n}\n\nexport default function DatasetCalendar(props) {\n  const { smallScreen, onChange, versions } = props;\n\n  const versionDates = versions\n    .filter((version) => version.version.length === 10) // valid date\n    .map((version) => version.version);\n\n  return (\n    <ClickAwayListener onClickAway={() => onChange('close')}>\n      <Card\n        sx={!smallScreen && { position: 'absolute', right: 0, zIndex: 999 }}\n        raised\n      >\n        <LocalizationProvider dateAdapter={AdapterDayjs}>\n          <DateCalendar\n            loading={!versionDates}\n            format=\"YYYY-MM-DD\"\n            renderLoading={() => <DayCalendarSkeleton />}\n            slots={{\n              day: CustomDayComponent,\n            }}\n            onChange={(value, selectionState) => {\n              if (selectionState === 'finish') {\n                return onChange(dayjs(value).format('YYYY-MM-DD'));\n              }\n              return null;\n            }}\n            slotProps={{\n              day: {\n                versionDates\n              }\n            }}\n            // disable the date if its not a valid date\n            shouldDisableDate={(day) => !isValidDate(day, versionDates)}\n            disableHighlightToday\n            minDate={dayjs(versionDates.slice(-1)[0])}\n            maxDate={dayjs(versionDates[0])}\n          />\n        </LocalizationProvider>\n      </Card>\n    </ClickAwayListener>\n  );\n}\n","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useContext } from 'react';\nimport { Container, Avatar, Modal, Tooltip, Box, Link, Typography, Stack, Select, FormControl, MenuItem, Grid, Chip, Dialog, Button, DialogActions, DialogContent, useMediaQuery, Table, TableBody, TableCell, TableHead, TableRow } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\nimport { RawDatasetsMetadataContext } from '../../ContextProviders/RawDatasetsMetadataContext';\n\nimport DownloadIcon from '@mui/icons-material/Download';\nimport DataObjectIcon from '@mui/icons-material/DataObject';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport EventIcon from '@mui/icons-material/Event';\nimport PublishedWithChangesIcon from '@mui/icons-material/PublishedWithChanges';\n\nimport * as Tracking from '../../Utils/Tracking';\nimport { fetchDataFromURL } from './DatasetFetcher';\nimport DatasetCalendar from './DatasetCalendar';\n\nexport default function DatasetDownloadDialog(props) {\n  const { project } = props;\n  const rawDatasetsMetadata = useContext(RawDatasetsMetadataContext);\n  const [datasets, setDatasets] = useState();\n\n  useEffect(() => {\n    if (!project || !rawDatasetsMetadata) return;\n    setDatasets(rawDatasetsMetadata[project?.id]); // get all the dataset(s) of this project\n  }, [project, rawDatasetsMetadata]);\n\n  const theme = useTheme();\n  const smallScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  function getOwnerString(owners) {\n    if (!owners || owners.length === 0) {\n      return 'the relevant owners';\n    } else if (owners.length === 1) {\n      return owners[0];\n    } else if (owners.length === 2) {\n      return owners.join(' and ');\n    } else {\n      const lastOwner = owners.pop();\n      const oxfordCommaOwners = owners.join(', ');\n      return `${oxfordCommaOwners}, and ${lastOwner}`;\n    }\n  }\n\n  return (\n    <>\n      <Button\n        onClick={() => {\n          handleOpen();\n          Tracking.sendEventAnalytics(Tracking.Events.rawDatasetButtonClicked, {\n            project_id: project.id\n          });\n        }}\n        variant=\"contained\"\n      >\n        <DataObjectIcon sx={{ fontSize: '1rem' }} />&nbsp;Raw Dataset\n      </Button>\n\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        maxWidth=\"lg\"\n        fullWidth\n        fullScreen={smallScreen}\n        keepMounted\n      >\n        {(\n          smallScreen &&\n          <DialogActions justifyContent=\"flex-start\">\n            <Button autoFocus onClick={handleClose}>\n              <ChevronLeftIcon sx={{ fontSize: '1rem' }} />Back\n            </Button>\n          </DialogActions>\n        )}\n\n        <DialogContent sx={{\n          px: smallScreen ? 2 : 3,\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'start',\n          height: '100%'\n        }}>\n          <Chip label={project.title} size=\"small\" sx={{ mb: 1 }} />\n          <Typography variant=\"h6\" >\n            Preview and download raw dataset(s)\n          </Typography>\n\n          <DatasetSelectorAndPreviewer datasets={datasets} smallScreen={smallScreen} project={project} />\n          {\n            datasets &&\n            <Typography variant=\"caption\" sx={{ my: 3, fontStyle: 'italic' }} >\n              This dataset is provided by the CITIES Dashboard with the support of {getOwnerString(project.owners)}. Should you intend to utilize this dataset for your project, research, or publication, we kindly request that you notify us at <Link href='mailto:nyuad.cities@nyu.edu'>nyuad.cities@nyu.edu</Link> to discuss citation requirements.\n            </Typography>\n          }\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\nconst DatasetSelectorAndPreviewer = (props) => {\n  const { datasets, smallScreen, project } = props;\n  const [previewingDataset, setPreviewingDataset] = useState();\n  const [previewingDatasetId, setPreviewingDatasetId] = useState();\n\n  // Preview the first version of the first dataset initially\n  useEffect(() => {\n    if (datasets?.length > 0) {\n      setPreviewingDataset(datasets[0]?.versions[0]);\n      setPreviewingDatasetId(datasets[0]?.id);\n      fetchDataFromURL(datasets[0]?.versions[0]?.rawLink, 'csv').then((data) => {\n        setPreviewingDataset({ ...datasets[0]?.versions[0], fetchedDataset: data });\n      });\n    }\n  }, [datasets]);\n\n  return (\n    <Grid container justifyContent=\"center\" alignItems=\"start\" spacing={3}>\n      <Grid item sm={12} md={6}>\n        <DatasetsTable\n          datasets={datasets}\n          smallScreen={smallScreen}\n          previewingDataset={previewingDataset}\n          setPreviewingDataset={setPreviewingDataset}\n          previewingDatasetId={previewingDatasetId}\n          setPreviewingDatasetId={setPreviewingDatasetId}\n        />\n      </Grid>\n      <Grid item sm={12} md={6} maxWidth={smallScreen ? '100%' : 'unset'} sx={{ mt: 1 }}>\n        <PreviewDataset\n          previewingDataset={previewingDataset}\n          previewingDatasetId={previewingDatasetId}\n          project={project}\n          smallScreen={smallScreen}\n        />\n      </Grid>\n    </Grid>\n  )\n};\n\nconst DatasetsTable = (props) => {\n  const { datasets, smallScreen, previewingDataset, setPreviewingDataset, previewingDatasetId, setPreviewingDatasetId } = props;\n  return (\n    <Table\n      size=\"small\"\n      sx={{\n        tableLayout: 'fixed',\n        '& td, div, .MuiMenuItem-root': {\n          fontSize: smallScreen ? '0.625rem' : '0.8rem'\n        }\n      }}\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell sx={{ pl: 1 }}>\n            Dataset\n          </TableCell>\n          <TableCell sx={{ width: smallScreen ? '9.5rem' : '11rem' }}>Version</TableCell>\n          <TableCell sx={{ width: smallScreen ? '5rem' : '6rem' }}>\n            Size\n          </TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {datasets?.map((dataset) => (\n          <Dataset\n            smallScreen={smallScreen}\n            dataset={dataset}\n            previewingDataset={previewingDataset}\n            setPreviewingDataset={setPreviewingDataset}\n            isPreviewing={dataset.id === previewingDatasetId}\n            setPreviewingDatasetId={setPreviewingDatasetId}\n          />\n        ))}\n      </TableBody>\n    </Table>\n  )\n}\n\nconst Dataset = (props) => {\n  const { smallScreen, dataset, setPreviewingDataset, isPreviewing, previewingDatasetId, setPreviewingDatasetId } = props;\n\n  const [fetchedDatasets, setFetchedDatasets] = useState({});\n  const NUM_RECENT_VERSIONS = 3;\n\n  const latestVersionOfThisDataset = dataset?.versions[0] || {};\n  const [showCalendar, setShowCalendar] = useState(false);\n  const [selectedVersionOfThisDataset, setSelectedVersionOfThisDataset] = useState(latestVersionOfThisDataset);\n\n  // only show NUM_RECENT_VERSIONS rows in Dropdown\n  const visibleVersions = dataset?.versions.slice(0, NUM_RECENT_VERSIONS);\n  // if currently selected version is not in first NUM_RECENT_VERSION rows,\n  // add it to the list\n  if (!visibleVersions.find((version) => version == selectedVersionOfThisDataset)) {\n    visibleVersions.push({ ...selectedVersionOfThisDataset, isOlderVersion: true });\n  }\n\n  // only show Calendar option if there are more than NUM_RECENT_VERSIONS versions\n  const shouldShowCalendar = dataset?.versions.length > NUM_RECENT_VERSIONS;\n\n  const handleVersionChange = (event) => {\n    const selectedVal = event.target.value;\n    if (selectedVal === 'Calendar') {\n      setShowCalendar(true);\n      return;\n    }\n    // Loop through the array (allVersionsOfThisDataset) to find the one with the selected version\n    const selectedVersion = dataset?.versions.find(aDatasetVersion => {\n      return aDatasetVersion.version === selectedVal;\n    });\n    setSelectedVersionOfThisDataset(selectedVersion);\n    setPreviewingDatasetId(dataset.id);\n    setPreviewingDataset(selectedVersion);\n\n    fetchThisDataset(selectedVersion);\n  };\n\n  const handleCalendarChange = (event) => {\n    // close calendar after selecting\n    setShowCalendar(false)\n    if (event === 'close') { // click outside of card\n      return\n    }\n\n    handleVersionChange({ target: { value: event } });\n  }\n\n  const fetchThisDataset = (selectedVersion) => {\n    // If this dataset version hasn't been fetched yet,\n    // fetch it and append it into the object fetchedDatasets\n    if (!fetchedDatasets[selectedVersion.version]) {\n      fetchDataFromURL(selectedVersion.rawLink, 'csv').then((data) => {\n        const selectedVersionWithFetchedDataset = { ...selectedVersion, fetchedDataset: data };\n        setPreviewingDataset(selectedVersionWithFetchedDataset);\n        setFetchedDatasets({\n          ...fetchedDatasets,\n          [selectedVersionWithFetchedDataset.version]: selectedVersionWithFetchedDataset\n        });\n      });\n    }\n    // If it has been fetched before, simply get it from memory \n    else {\n      setPreviewingDataset(fetchedDatasets[selectedVersion.version]);\n    }\n  }\n\n  const setThisDatasetToPreview = () => {\n    if (previewingDatasetId !== dataset.id) {\n      setPreviewingDatasetId(dataset.id);\n      setPreviewingDataset(selectedVersionOfThisDataset);\n      fetchThisDataset(selectedVersionOfThisDataset);\n    }\n  }\n\n  const theme = useTheme();\n\n  const formatFileSize = (sizeInBytes) => {\n    if (!sizeInBytes) return;\n\n    if (sizeInBytes < 1024 * 1024) {\n      return (sizeInBytes / 1024).toFixed(1) + \" KB\";\n    } else {\n      return (sizeInBytes / (1024 * 1024)).toFixed(1) + \" MB\";\n    }\n  }\n\n  return (\n    <>\n      <TableRow key={dataset.id}>\n        <TableCell\n          sx={{\n            pl: 1,\n            cursor: 'pointer',\n            background: isPreviewing && theme.palette.background.NYUpurpleLight\n          }}\n          onClick={setThisDatasetToPreview}>\n          {selectedVersionOfThisDataset?.name}\n        </TableCell>\n\n        <TableCell sx={{ position: 'relative', background: isPreviewing && theme.palette.background.NYUpurpleLight }}>\n          {showCalendar &&\n            (smallScreen ? <Modal\n              open={showCalendar}\n              sx={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center'\n              }}\n            >\n              <DatasetCalendar\n                onChange={handleCalendarChange}\n                smallScreen={smallScreen}\n                versions={dataset?.versions}\n              />\n            </Modal>\n              : <DatasetCalendar\n                onChange={handleCalendarChange}\n                versions={dataset?.versions}\n              />)}\n          <FormControl size=\"small\">\n            <Select\n              value={selectedVersionOfThisDataset?.version}\n              onClick={() => {\n                if (dataset.versions.length <= 1) setThisDatasetToPreview();\n              }}\n              onChange={handleVersionChange}\n              variant=\"standard\"\n              MenuProps={{ disablePortal: true }}\n            >\n              {visibleVersions.map((aDatasetVersion, index) => (\n                <MenuItem\n                  key={aDatasetVersion.version}\n                  value={aDatasetVersion.version}\n                  sx={[\n                    (index === visibleVersions.length - 1) && {\n                      mb: -0.75\n                    },\n                    aDatasetVersion.isOlderVersion && {\n                      marginTop: '1rem',\n                      '&::before': {\n                        content: '\"\"',\n                        borderTop: `2px dotted ${theme.palette.text.secondary}`,\n                        width: '1rem',\n                        height: '1rem',\n                        position: 'absolute',\n                        top: 0,\n                        left: '50%',\n                        transform: 'translate(-50%, -50%)'\n                      }\n                    }\n                  ]}\n                >\n                  <Stack direction=\"row\" alignItems=\"center\">\n                    {aDatasetVersion.version}\n                    { /* 'LATEST' chip for latest version */}\n                    {aDatasetVersion === latestVersionOfThisDataset &&\n                      <Tooltip title=\"Latest version\" enterDelay={0} leaveDelay={200}>\n                        <Avatar sx={{\n                          ml: 0.5,\n                          width: '1rem',\n                          height: '1rem',\n                          background: theme.palette.success.main\n                        }}>\n                          <PublishedWithChangesIcon sx={{ width: '0.8rem', height: '0.8rem' }} />\n                        </Avatar>\n                      </Tooltip>\n                    }\n                  </Stack>\n                </MenuItem>\n              ))}\n\n              {shouldShowCalendar && <MenuItem\n                key=\"Calendar\"\n                value=\"Calendar\"\n                sx={{ pt: 1, mt: 1, mb: -0.75, borderTop: '0.5px solid' }}\n              >\n                <Stack direction=\"row\" alignItems=\"center\">\n                  Older Versions\n                  <EventIcon fontSize='small' sx={{ ml: 0.5 }} />\n                </Stack>\n              </MenuItem>\n              }\n            </Select>\n          </FormControl>\n        </TableCell>\n        <TableCell sx={{ background: isPreviewing && theme.palette.background.NYUpurpleLight }}>\n          {formatFileSize(selectedVersionOfThisDataset?.sizeInBytes)}\n        </TableCell>\n      </TableRow >\n    </>\n  )\n}\n\nconst PreviewDataset = (props) => {\n  const { previewingDataset, previewingDatasetId, project, smallScreen } = props;\n  const downloadDatasetName = `[${project.id}] ${previewingDataset?.name}-${previewingDataset?.version}.csv`;\n\n  const theme = useTheme();\n\n  const downloadPreviewingDataset = () => {\n    if (!previewingDataset?.fetchedDataset) return;\n\n    const blob = new Blob([previewingDataset?.fetchedDataset], { type: 'application/octet-stream' }); // create a Blob with the raw data\n    const url = URL.createObjectURL(blob); // create a download link for the Blob\n    const downloadLink = document.createElement('a');\n    downloadLink.href = url;\n    downloadLink.download = downloadDatasetName;\n    document.body.appendChild(downloadLink);\n    downloadLink.click(); // simulate a click on the download link\n    URL.revokeObjectURL(url); // clean up by revoking the object URL\n    document.body.removeChild(downloadLink);\n  };\n\n  const [formattedData, setFormattedData] = useState('');\n  const [rowIndices, setRowIndices] = useState('');\n  const numFirstLastRowsToPreview = 5;\n\n  useEffect(() => {\n    if (!previewingDataset?.fetchedDataset) return;\n\n    const csvData = previewingDataset?.fetchedDataset;\n    const lines = csvData.split('\\n');\n    const numRows = lines.length;\n\n    if (numRows <= numFirstLastRowsToPreview * 2) {\n      setFormattedData(csvData);\n      setRowIndices(Array.from({ length: numRows }, (_, index) => index + 1).join('\\n')); // +1 because rowNumber starts at 1 while index starts at 0\n    } else {\n\n      const firstRows = lines.slice(0, numFirstLastRowsToPreview);\n      const lastRows = lines.slice(numRows - numFirstLastRowsToPreview);\n\n      const numOfHiddenRows = numRows - 2 * numFirstLastRowsToPreview;\n\n      const middleRow = [`... [${numOfHiddenRows} rows hidden] ...`];\n\n      setFormattedData(firstRows.concat(middleRow).concat(lastRows).join('\\n'));\n      setRowIndices(\n        Array.from({\n          length: numFirstLastRowsToPreview * 2 + 1 // +1 to account for the middleRow\n        },\n          (_, index) => {\n            const rowIndex = index + 1; // +1 because rowNumber starts at 1 while index starts at 0\n            // Indices for the first rows\n            if (rowIndex < numFirstLastRowsToPreview + 1) {\n              return rowIndex;\n            }\n            // No index for the middle row\n            else if (rowIndex == numFirstLastRowsToPreview + 1) {\n              return '';\n            }\n            // Indices for the last rows\n            else {\n              return numOfHiddenRows + rowIndex - 1;\n            }\n          })\n          .join('\\n'));\n    }\n\n  }, [previewingDataset]);\n\n  return (\n    <Stack spacing={1}>\n      <Box sx={{ '& *': { fontFamily: \"monospace !important\" } }}>\n        <Stack direction=\"row\">\n          <Typography variant='body2' gutterBottom fontWeight={600}>\n            {previewingDataset ?\n              `Previewing: ${previewingDataset.name} (${previewingDataset?.version})`\n              : 'Not previewing any dataset'}\n          </Typography>\n        </Stack>\n\n        <Box\n          component=\"pre\"\n          sx={{\n            overflowX: 'auto',\n            color: theme.palette.text.secondary,\n            backgroundColor: theme.palette.customBackground,\n            p: 2,\n            pt: 1.5,\n            borderRadius: theme.spacing(1),\n            borderTopLeftRadius: 0,\n            minHeight: \"5rem\",\n            width: smallScreen ? '100%' : 'unset',\n            marginTop: 0\n          }}\n        >\n          <Stack direction=\"row\" sx={{ fontSize: smallScreen ? '0.625rem !important' : '0.8rem !important' }}>\n            <Box sx={{ mr: 2, userSelect: 'none' }}>\n              {rowIndices}\n            </Box>\n            <Box>\n              {formattedData}\n            </Box>\n          </Stack>\n        </Box>\n      </Box>\n      <Box textAlign=\"center\" >\n        <Button\n          variant=\"contained\"\n          sx={{\n            textTransform: 'none',\n            textAlign: 'left',\n            lineHeight: 1.1,\n            px: 1.5,\n            py: 1\n          }}\n          onClick={() => {\n            downloadPreviewingDataset();\n            Tracking.sendEventAnalytics(Tracking.Events.rawDatasetDownloaded, {\n              project_id: project.id,\n              dataset_id: previewingDatasetId,\n              dataset_name: previewingDataset.name,\n              dataset_version: previewingDataset.version\n            });\n          }}\n          disabled={!previewingDataset}\n        >\n          <DownloadIcon sx={{ fontSize: '1.25rem', mr: 0.5 }} />\n          {previewingDataset ? downloadDatasetName : \"No dataset available to download\"}\n        </Button>\n      </Box>\n    </Stack >\n  )\n}","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useContext } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { LinkContext } from '../../ContextProviders/LinkContext';\nimport { TabContext } from '../../ContextProviders/TabContext';\nimport parse from 'html-react-parser';\nimport ChartComponent from '../../Graphs/ChartComponent';\nimport UppercaseTitle from '../../Components/UppercaseTitle';\nimport { Box, Typography, Container, Divider, Chip, Grid, Tooltip, Stack } from '@mui/material';\n\nimport { useTheme } from '@mui/material/styles';\n\nimport ThemePreferences from '../../Themes/ThemePreferences';\n\nimport AirQualityIndexLegendQuickGlance from '../../Components/AirQualityHelper';\n\nimport project from '../../temp_database.json';\nimport jsonData from '../../section_data.json';\n\nimport locations from '../../temp_locations.json';\n\nimport PersonIcon from '@mui/icons-material/Person';\nimport EmailIcon from '@mui/icons-material/Email';\nimport PublishedWithChangesIcon from '@mui/icons-material/PublishedWithChanges';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport PlaceIcon from '@mui/icons-material/Place';\n\nimport { replacePlainHTMLWithMuiComponents } from '../../Utils/Utils';\nimport DatasetDownloadDialog from '../../Components/DatasetDownload/DatasetDownloadDialog';\nimport ScreenDialog from '../../Components/ScreenDialog';\n\nimport { scrollToSection } from '../../Components/Header/MenuItemAsNavLink';\nimport FullWidthBox from '../../Components/FullWidthBox';\n\nimport * as Tracking from '../../Utils/Tracking';\n\nimport ChartSubstituteComponentLoader from '../../Graphs/ChartSubstituteComponents/ChartSubstituteComponentLoader';\n\nconst Dashboard = ({ themePreference }) => {\n  return (\n    <>\n    </>\n  )\n};\n\nexport default Dashboard;\n","import CustomThemes from '../Themes/CustomThemes';\n\nconst AQIdatabase = [\n  {\n    id: 0,\n    category: 'Good',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[0],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[0],\n    aqiUS: {\n      low: 0,\n      high: 50\n    },\n    rawPM2_5: {\n      low: 0.0,\n      high: 12.0\n    },\n    description: 'Air quality is satisfactory, and air pollution poses little or no risk',\n    healthSuggestions: {\n      outdoors: 'Enjoy outdoor activities, the air is great!',\n      indoors_generic: 'Enjoy clean indoor air',\n      indoors_dining_hall: 'Enjoy clean dining hall air',\n      indoors_gym: 'Enjoy clean air for physical activities indoors',\n      indoors_vulnerable: 'Enjoy clean indoor air'\n    }\n  },\n  {\n    id: 1,\n    category: 'Moderate',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[1],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[1],\n    aqiUS: {\n      low: 51,\n      high: 100\n    },\n    rawPM2_5: {\n      low: 12.1,\n      high: 35.4\n    },\n    description: 'Air quality is acceptable. However, there may be a risk for some people, particularly those who are unusually sensitive to air pollution',\n    healthSuggestions: {\n      outdoors: 'Children and individuals with respiratory issues might need to reduce prolonged outdoor exertion',\n      indoors_generic: 'Indoor air is acceptable, but not great',\n      indoors_dining_hall: 'Indoor air is acceptable, but not great<br>Avoid Grill area',\n      indoors_gym: 'Indoor air is acceptable, but not great',\n      indoors_vulnerable: 'Indoor air is acceptable, but not great'\n    }\n  },\n  {\n    id: 2,\n    category: 'Unhealthy for Sensitive Groups',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[2],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[2],\n    aqiUS: {\n      low: 101,\n      high: 150\n    },\n    rawPM2_5: {\n      low: 35.5,\n      high: 55.4\n    },\n    description: 'Members of sensitive groups may experience health effects. The general public is less likely to be affected',\n    healthSuggestions: {\n      outdoors: 'Children and individuals with respiratory issues should limit outdoor exertion',\n      indoors_generic: '',\n      indoors_dining_hall: 'Consider take-aways<br>Avoid Grill area',\n      indoors_gym: 'Individuals with respiratory issues should lower the intensity of indoor exercises',\n      indoors_vulnerable: 'Monitor closely individuals with respiratory issues for any symptom'\n    }\n  },\n  {\n    id: 3,\n    category: 'Unhealthy',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[3],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[3],\n    aqiUS: {\n      low: 151,\n      high: 200\n    },\n    rawPM2_5: {\n      low: 55.5,\n      high: 150.4\n    },\n    description: 'Some members of the general public may experience health effects; members of sensitive groups may experience more serious health effects',\n    healthSuggestions: {\n      outdoors: 'Everyone should limit outdoor activities<br>Wear masks when going outside',\n      indoors_generic: '',\n      indoors_dining_hall:\n        'Consider take-aways<br>Avoid Grill area<br>Come back at off-peak hours',\n      indoors_gym: 'Everyone should lower the intensity of indoor exercises',\n      indoors_vulnerable: 'Monitor closely individuals with respiratory issues for any symptom'\n    }\n  },\n  {\n    id: 4,\n    category: 'Very Unhealthy',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[4],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[4],\n    aqiUS: {\n      low: 201,\n      high: 300\n    },\n    rawPM2_5: {\n      low: 150.5,\n      high: 250.4\n    },\n    description: 'Health alert: The risk of health effects is increased for everyone',\n    healthSuggestions: {\n      outdoors: 'Avoid outdoor activities at all cost<br>Wear N95 masks when going outside',\n      indoors_generic: '',\n      indoors_dining_hall:\n        'Consider take-aways<br>Avoid Grill area<br>Come back at off-peak hours',\n      indoors_gym: 'Indoor air quality is not suitable for any physical activities',\n      indoors_vulnerable: 'Monitor closely individuals with respiratory issues for any symptom'\n    }\n  },\n  {\n    id: 5,\n    category: 'Hazardous',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[5],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[5],\n    aqiUS: {\n      low: 300,\n      high: 500\n    },\n    rawPM2_5: {\n      low: 250.5,\n      high: 550.5\n    },\n    description: 'Health warning of emergency conditions: everyone is more likely to be affected',\n    healthSuggestions: {\n      outdoors: 'Avoid outdoor activities at all cost<br>Wear N95 masks when going outside',\n      indoors_generic: '',\n      indoors_dining_hall:\n        'Consider take-aways<br>Avoid Grill area<br>Come back at off-peak hours',\n      indoors_gym: 'Indoor air quality is not suitable for any physical activities',\n      indoors_vulnerable: ''\n    }\n  },\n];\n\nexport default AQIdatabase;\n","var map = {\n\t\"./AirQualityIndexTable\": 692,\n\t\"./AirQualityIndexTable.jsx\": 692,\n\t\"./ChartSubstituteComponentLoader\": 5276,\n\t\"./ChartSubstituteComponentLoader.jsx\": 5276\n};\n\nfunction webpackAsyncContext(req) {\n\treturn Promise.resolve().then(function() {\n\t\tif(!__webpack_require__.o(map, req)) {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t}\n\n\t\tvar id = map[req];\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 6598;\nmodule.exports = webpackAsyncContext;"],"names":["UppercaseTitle","text","variant","color","sx","fontWeight","display","textTransform","pb","lineHeight","HeatMap","props","publishedSheetId","gid","range","embedLink","title","className","style","width","height","border","src","memo","SELECT_ALL","SeriesSelector","itemsFromChart","items","selectorID","allowMultiple","onSeriesSelection","theme","useTheme","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","overflow","background","palette","customAlternateBackground","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","useState","setItems","selectAll","setSelectAll","useEffect","every","item","selected","handleChange","event","value","target","includes","updatedItems","map","index","selectedItems","filter","label","some","selectedItem","handleItemToggle","existingItem","Stack","spacing","direction","alignItems","FormControl","breakpoints","down","mt","borderRadius","size","Select","labelId","id","multiple","onChange","renderValue","Visibility","fontSize","secondary","Typography","length","renderedLabel","MenuItem","disabled","backgroundColor","Checkbox","checked","onClick","p","transform","Radio","borderTop","borderColor","position","bottom","zIndex","marginBottom","justifyContent","pl","Switch","Grid","container","Chip","onDelete","ChartControlType","CategoryFilter","stackDirection","DateRangeFilter","ChartRangeFilter","NumberRangeFilter","fetchDataFromSheet","chartData","subchartIndex","urlParams","headers","query","subcharts","url","sheetId","encodeURIComponent","google","visualization","Query","Promise","resolve","reject","send","response","isError","getMessage","getDetailedMessage","hideAnnotations","stem","textStyle","opacity","boxStyle","returnResponsiveFontSizeInPixels","isPortrait","isSmaller","returnChartControlUI","chartControl","mainChartData","mainChartOptions","chartControlUI","options","ui","snapToData","controlType","chartType","chartView","columns","chartOptions","hAxis","textPosition","chart","axisText","vAxis","annotations","legend","calculateCalendarDimensions","cellSizeMin","cellSizeMax","cellSize","Math","min","max","window","innerWidth","chartWidth","yearLabelFontSize","styled","Box","maxWidth","padding","tooltip","margin","primary","marginTop","verticalAlign","paper","paddingTop","paddingBottom","paddingLeft","paddingRight","borderWidth","top","left","right","main","stroke","strokeWidth","cursor","SubChart","windowSize","isHomepage","chartSubstituteComponentName","ChartSubstituteComponentLoader","customClassName","pt","useContext","GoogleContext","setDataTable","chartWrapper","setChartWrapper","setDashboardWrapper","controlWrapper","setControlWrapper","isFirstRender","setIsFirstRender","allInitialColumns","setAllInitialColumns","dataColumns","setDataColumns","setInitialVAxisRage","random","toString","substr","chartID","chartTotalHeight","setChartTotalHeight","axisTitleTextStyle","italic","bold","axisTitle","axisTextStyle","curveType","crosshair","orientation","trigger","fill","chartArea","portrait","landscape","isHtml","showColorCode","alignment","scrollArrows","activeColor","inactiveColor","pagingTextStyle","format","viewWindow","slantedText","slantedTextAngle","colors","optionsColors","series","Object","values","forEach","_serie","serie","trendlines","_item","colorAxis","colorAxisFirstColor","multiColor","colorIndex","NYUpurple","aqiColorAxis","titleTextStyle","gridlines","minorGridlines","count","highContrast","contrastText","thickness","rx","shape","ry","annotationBoxFill","fillOpacity","seriesSelector","pointSize","enableInteractivity","viewWindowMode","returnGenericOptions","existingOptions","calendarDimensions","calendar","yearLabel","noDataPattern","returnCalendarChartOptions","chartControlOptions","hasChartControl","control","cleanupTouchEventListener","touchHandler","first","changedTouches","type","simulatedEvent","MouseEvent","bubbles","cancelable","view","detail","screenX","screenY","clientX","clientY","button","relatedTarget","dispatchEvent","preventDefault","controlDOM","document","querySelector","touchEvent","addEventListener","capture","removeEventListener","addTouchEventListenerForChartControl","handleSeriesSelection","setOptions","draw","method","setInitialColumnsColors","col","seriesIndex","serieAttribute","getInitialVAxisRange","vAxisMin","vAxisMax","dataTable","getColumnRange","sourceColumn","isNaN","newDataColumns","_chartWrapper","hiddenSeriesObject","visibleInLegend","newViewColumns","push","dataColumn","i","indexInAllInitialColumns","role","setView","newOptions","selectedSeriesCount","then","thisDataTable","getDataTable","thisChartWrapper","ChartWrapper","undefined","containerId","thisDashboardWrapper","Dashboard","getElementById","events","addListener","onChartReady","thisControlWrapper","ControlWrapper","bind","initColumns","initialView","getView","viewFromDataTable","DataView","shouldAssignDomainRoleToFistColumn","dataSeriesIndex","getColumnLabel","initialVAxisRange","getInitialColumns","catch","error","console","log","renderedHeight","getBBox","minHeight","LoadingAnimation","renderChart","ChartStyleWrapper","mode","overflowX","overflowY","scrollbarGutter","StyledTabs","Tabs","chartMaxHeight","renderedComponent","passedChartData","passedChartHeight","chartHeight","isSmallWidth","useMediaQuery","matchMedia","matches","setIsPortrait","innerHeight","setWindowSize","TabContext","setTab","indexValue","setIndexValue","timeoutID","handleWindowResize","clearTimeout","setTimeout","__","newValue","prevState","chartIndex","element","Tab","subchartTitle","transition","pointerEvents","StyledTable","Table","isTiny","minWidth","hideAQIDescription","themePreference","pr","align","AQIdatabase","ThemePreferences","lightThemeColor","darkThemeColor","name","aqiUS","low","high","rawPM2_5","description","parse","healthSuggestions","outdoors","replace","replacePlainHTMLWithMuiComponents","ticks","isStacked","bar","groupWidth","Suspense","fallback","ChartSubstituteComponent","lazy","PickersDay","content","category","CustomThemes","indoors_generic","indoors_dining_hall","indoors_gym","indoors_vulnerable","webpackAsyncContext","req","__webpack_require__","o","e","Error","code","keys","module","exports"],"sourceRoot":""}