{"version":3,"file":"static/js/538.7d78a1d2.chunk.js","mappings":"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","sources":["Components/CurrentAQIGrid.jsx","Pages/Screen/RecentHistoricalGraph.jsx","Pages/Screen/Screen.jsx","Pages/Screen/ScreenUtils.jsx","Pages/Screen/TemperatureUtils.jsx","Utils/AirQualityIndexCalculator.jsx","Utils/AirQualityIndexHelper.jsx","Utils/ApiUtils.jsx"],"sourcesContent":["// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect } from 'react';\n\nimport { Box, Grid, Typography } from '@mui/material';\nimport ThermostatIcon from '@mui/icons-material/Thermostat';\nimport WaterDropIcon from '@mui/icons-material/WaterDrop';\nimport ErrorIcon from '@mui/icons-material/Error';\n\nimport { returnSensorStatus, SensorStatus, getFormattedElapsedTimeFromNow } from '../Pages/Screen/ScreenUtils';\nimport { TemperatureUnits, getFormattedTemperature, calculateHeatIndex } from \"../Pages/Screen/TemperatureUtils\";\n\nimport AQIdatabase from '../Utils/AirQualityIndexHelper';\n\nimport CustomThemes from '../Themes/CustomThemes';\n\nconst CurrentAQIGrid = (props) => {\n\n  const {\n    currentData,\n    temperatureUnit = TemperatureUnits.celsius,\n    isScreen = true,\n    orderOfItems\n  } = props;\n\n  const getGridItemSize = (numOfItems) => {\n    return {\n      xs: Math.max(12 / numOfItems, 6),\n      sm: Math.max(12 / numOfItems, 4),\n      lg: isScreen ? (12 / numOfItems) : Math.min(5, Math.max(12 / numOfItems, 3))\n    }\n  }\n\n  return (\n    <Grid\n      container\n      justifyContent=\"center\"\n      sx={{\n        '& .MuiSvgIcon-root': {\n          verticalAlign: 'sub',\n          fontSize: isScreen ? null : '1rem'\n        },\n        '& *': {\n          fontWeight: '500'\n        },\n        '& .condensedFont': {\n          fontFamily: 'IBM Plex Sans Condensed, sans-serif !important',\n          '& *': {\n            fontFamily: 'IBM Plex Sans Condensed, sans-serif !important'\n          }\n        }\n      }}\n    >\n      {\n        Object.entries(currentData).map(([key, sensorData], index) => (\n          <Grid\n            item\n            order={orderOfItems && orderOfItems[index]}\n            key={key}\n            {...getGridItemSize(Object.keys(currentData).length)}\n            sx={\n              sensorData.current?.sensor_status !== SensorStatus.active &&\n              { '& *': { color: `${CustomThemes.universal.palette.inactiveSensor}!important` } }\n            }\n          >\n            <Box sx={{ '& *': { color: sensorData.current?.color } }}>\n              <Typography variant={isScreen ? \"h4\" : 'h5'} fontWeight=\"500\" className='condensedFont'>\n                {sensorData.sensor?.location_long || sensorData.sensor?.location_short || 'No Location Name'}\n              </Typography>\n              <Typography variant={isScreen ? \"h1\" : 'h2'} fontWeight=\"500\" lineHeight={isScreen ? 0.8 : 0.9}>\n                {sensorData.current?.aqi || '--'}\n              </Typography>\n              <Typography variant={isScreen ? \"h4\" : 'h5'} fontWeight=\"500\" className='condensedFont'>\n                {sensorData.current?.category || '--'}\n              </Typography>\n            </Box>\n\n            <Box sx={{ '& *': { color: isScreen ? '#c8dcff' : 'text.secondary' }, mt: isScreen ? 2 : 1 }} className='condensedFont'>\n              <Typography variant={isScreen ? \"h6\" : 'body1'}>\n                <ThermostatIcon />\n                {\n                  getFormattedTemperature({\n                    rawTemp: sensorData.current?.temperature || \"--\",\n                    currentUnit: TemperatureUnits.celsius,\n                    returnUnit: temperatureUnit\n                  })\n                }\n                &nbsp;&nbsp;-&nbsp;\n                <WaterDropIcon sx={{ transform: 'scaleX(0.9)' }} />\n                {sensorData.current?.rel_humidity ? Math.round(sensorData.current?.rel_humidity) : \"--\"}%\n              </Typography>\n              {\n                // Show heat index for selected location types\n                ['outdoors', 'indoors_gym'].includes(sensorData.sensor?.location_type) &&\n                <Typography variant={isScreen ? \"body1\" : 'body2'} sx={{ fontWeight: '300 !important' }}>\n                  {calculateHeatIndex({\n                    rawTemp: sensorData.current?.temperature,\n                    currentUnit: TemperatureUnits.celsius,\n                    rel_humidity: sensorData.current?.rel_humidity,\n                    returnUnit: temperatureUnit\n                  })}\n                </Typography>\n              }\n              {\n                displayLastUpdateAndSensorStatus({ sensorData, isScreen })\n              }\n            </Box>\n\n            {\n              // Display outdoor-indoor comparison if both sensors are active\n              sensorData.sensor_status !== SensorStatus.active &&\n              <Typography variant={isScreen ? \"h6\" : 'body1'} className=\"condensedFont\">\n                {returnSensorStatus(sensorData)}\n              </Typography>\n            }\n          </Grid>\n        ))\n      }\n    </Grid>\n  );\n};\n\nconst displayLastUpdateAndSensorStatus = ({ sensorData, isScreen }) => {\n  if (isScreen && sensorData.current.sensor_status === SensorStatus.active) return null;\n  else\n    return (\n      <Typography\n        variant={isScreen ? 'h6' : 'caption'}\n        sx={{\n          mt: 0,\n          fontWeight: isScreen && '500 !important'\n        }}\n      >\n        {\n          sensorData.current?.sensor_status !== SensorStatus.active\n          &&\n          <>\n            <ErrorIcon\n              sx={{\n                '& *': {\n                  color: `${AQIdatabase[3].lightThemeColor} !important`\n                },\n                mr: 0.5\n              }} />\n            Offline.&nbsp;\n          </>\n        }\n        Last update:\n        {sensorData.current?.timestamp\n          ? ` ${getFormattedElapsedTimeFromNow(sensorData.current.timestamp)} ago`\n          : '--'}\n      </Typography>\n    )\n}\n\nexport default CurrentAQIGrid;\n","// disable eslint for this file\n/* eslint-disable */\nimport { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\n\nimport convertToAQI from '../../Utils/AirQualityIndexCalculator';\nimport AQIdatabase from '../../Utils/AirQualityIndexHelper';\nimport { SensorStatus } from './ScreenUtils';\nimport { Box } from '@mui/material';\n\nimport { capitalizeFirstCharacter, areDOMOverlapped } from './ScreenUtils';\n\nimport CustomThemes from '../../Themes/CustomThemes';\n\nconst numberOfHoursForHistoricalData = 6;\n\nconst RecentHistoricalGraph = (props) => {\n  const { data } = props;\n\n  const [firstDraw, setFirstDraw] = useState(true);\n\n  const graphContainer = useRef();\n  const layerBackground = useRef();\n  const layerTexts = useRef();\n  const layerXaxisWrapper = useRef();\n  const layerLines = useRef();\n\n  let svg, width, height, xAxis, yAxis;\n  let maxAQItoDisplay = 200;\n  const xTickPeriod = 120; // xAxis ticks every 2 hour\n  const dotRadius = 10;\n  const margin = { top: 30, right: 80, bottom: 0, left: 70 };\n\n  // Set up D3's line generator\n  const lineGenerator = d3\n    .line()\n    .x(function (d) {\n      return xAxis(d.timestamp);\n    }) // set the x values for the line generator\n    .y(function (d) {\n      return yAxis(d.aqi);\n    }) // set the y values for the line generator\n    .curve(d3.curveCardinal.tension(0)); // apply smoothing to the line\n\n  useEffect(() => {\n    if (!data) return;\n    if (!graphContainer.current) return;\n    if (!layerBackground.current) return;\n    if (!layerTexts.current) return;\n    if (!layerXaxisWrapper.current) return;\n    if (!layerLines.current) return;\n\n    svg = d3.select(graphContainer.current);\n    width = graphContainer.current.clientWidth;\n    height = graphContainer.current.clientHeight - margin.top;\n\n    // Clear all previous drawings\n    d3.select(layerBackground.current).selectAll(\"*\").remove();\n    d3.select(layerTexts.current).selectAll(\"*\").remove();\n    d3.select(layerXaxisWrapper.current).selectAll(\"*\").remove();\n    d3.select(layerLines.current).selectAll(\"*\").remove();\n\n    d3.select(layerBackground.current)\n      .attr(\"opacity\", 0.5);\n    d3.select(layerTexts.current)\n      .attr(\"filter\", \"brightness(0.8) contrast(1.2) saturate(1.2)\");\n\n    Object.entries(data).forEach(([key, sensorData]) => {\n      // Create the JS date object and calculate AQI from raw measurements\n      sensorData.historical?.forEach(function (d) {\n        d.timestamp = new Date(d.timestamp);\n        d.aqi = convertToAQI(d[\"pm2.5\"]).aqi;\n      });\n\n      // Calculate the maximum value AQI of this sensor\n      if (sensorData.historical && Array.isArray(sensorData.historical)) {\n        const max = d3.max(sensorData.historical, function (d) {\n          return d.aqi;\n        });\n        if (max > maxAQItoDisplay) maxAQItoDisplay = max;\n      }\n    });\n\n    // Calculate the maximum AQI for the y-axis to display\n    maxAQItoDisplay = Math.ceil(maxAQItoDisplay / 50) * 50; // round to the nearest 50 points\n\n    AQIdatabase.forEach((category) => {\n      if (maxAQItoDisplay >= category.aqiUS.low && maxAQItoDisplay <= category.aqiUS.high) {\n        maxAQItoDisplay = category.aqiUS.high;\n      }\n    });\n\n    // 1. Set up the xAxis domain and range\n    let xAxisMax = new Date();\n    let xAxisMin = new Date();\n    xAxisMin.setHours(xAxisMin.getHours() - numberOfHoursForHistoricalData);\n    xAxis = d3.scaleTime().domain([xAxisMin, xAxisMax]).rangeRound([margin.left, width - margin.right]); // width is inclusive of margin\n\n    // 2. Set up the yAxis domain and range\n    yAxis = d3.scaleLinear().domain([0, maxAQItoDisplay]).range([height + margin.top, margin.top]); // height is already exclusive of margin\n\n    // 7. Add the background category layer and the AQI levels (rectangles) and the grids\n    let font_size = Math.floor((((AQIdatabase[1].aqiUS.high - AQIdatabase[0].aqiUS.high) / maxAQItoDisplay) * height) / 2);\n    let marginText = Math.floor(font_size / 5);\n    // Loop through all the aqi_category and add each category into the graph\n    for (let i = 0; i < AQIdatabase.length; i++) {\n      const category = AQIdatabase[i];\n      if (maxAQItoDisplay <= category.aqiUS.low) break;\n      // Add the rectangles\n      const aqiRange = Math.ceil((category.aqiUS.high - category.aqiUS.low) / 50) * 50;\n      d3.select(layerBackground.current)\n        .append(\"rect\")\n        .attr(\"x\", 0)\n        .attr(\"y\", height - (category.aqiUS.high / maxAQItoDisplay) * height + margin.top)\n        .attr(\"width\", width)\n        .attr(\"height\", aqiRange / maxAQItoDisplay * height)\n        .attr(\"fill\", category.lightThemeColor);\n\n      // Add the AQI categories numbers\n      d3.select(layerTexts.current)\n        .append(\"text\")\n        .attr(\"x\", marginText)\n        .attr(\n          \"y\",\n          height -\n          (category.aqiUS.low / maxAQItoDisplay) * height -\n          3.5 * marginText + margin.top\n        )\n        .attr(\"fill\", category.lightThemeColor)\n        .attr(\"font-size\", font_size)\n        .text(Math.floor(category.aqiUS.low / 50) * 50);\n\n      d3.select(layerTexts.current)\n        .append(\"text\")\n        .attr(\"class\", \"category-text-graph-sm\")\n        .attr(\"x\", marginText + 2)\n        .attr(\n          \"y\",\n          height - (category.aqiUS.low / maxAQItoDisplay) * height - marginText + margin.top\n        )\n        .attr(\"fill\", category.lightThemeColor)\n        .attr(\"font-size\", font_size / 2)\n        .text(category.category);\n    };\n\n    // Add the xAxisWrapper and its texts\n    d3.select(layerXaxisWrapper.current)\n      .append(\"rect\")\n      .attr(\"x\", 0)\n      .attr(\"y\", 0)\n      .attr(\"width\", width)\n      .attr(\"height\", margin.top)\n      .attr(\"fill\", \"white\");\n\n    // 9.2. Add the X Axis on top of the graph, as well as ticks\n    let formatHour = d3.timeFormat(\"%H:%M\");\n    d3.select(layerXaxisWrapper.current)\n      .append(\"g\")\n      .attr(\"transform\", `translate(0,${margin.top})`)\n      .call(\n        d3\n          .axisTop(xAxis)\n          .tickSize(-height) // negative length to make vertical lines\n          .ticks(d3.timeMinute.every(xTickPeriod))\n          .tickFormat(function (d) {\n            return formatHour(d);\n          })\n      )\n      .attr(\"font-size\", font_size / 2.25)\n      .attr(\"color\", CustomThemes.universal.palette.inactiveSensor)\n      .select(\".domain\")\n      .remove();\n    d3.select(layerXaxisWrapper.current)\n      .selectAll('line')\n      .attr('stroke', 'white')\n      .attr('stroke-width', 2)\n      .attr('opacity', 0.5);\n\n    Object.entries(data).forEach(([key, sensorData]) => {\n      // Append the line chart for this location\n      d3.select(layerLines.current)\n        .append(\"path\")\n        .datum(sensorData.historical || [])\n        .attr(\"x\", margin.left)\n        .attr(\"class\", \"line\")\n        .attr(\"d\", lineGenerator)\n        .attr(\"fill\", \"transparent\")\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-width\", \"5px\")\n        .attr(\"opacity\", sensorData.sensor?.location_type === \"outdoors\" ? 1 : 0.5);\n\n      // Append the circle marker at the end of this line chart to denote its liveness\n      const mostRecentData = sensorData.historical?.length > 0 ? sensorData.historical?.[0] : null;\n      if (mostRecentData) {\n        const aqiObject = AQIdatabase[convertToAQI(mostRecentData[\"pm2.5\"]).aqi_category_index];\n        const markerWrapper = d3.select(layerLines.current)\n          .append(\"g\")\n          .attr(\n            \"transform\",\n            \"translate(\" +\n            xAxis(mostRecentData.timestamp) +\n            \",\" +\n            yAxis(mostRecentData.aqi) +\n            \")\"\n          )\n          .attr(\"fill\",\n            sensorData.current?.sensor_status === SensorStatus.active\n              ? aqiObject.lightThemeColor\n              : CustomThemes.universal.palette.inactiveSensor)\n          ;\n\n        sensorData.current?.sensor_status === SensorStatus.active &&\n          markerWrapper.append(\"circle\")\n            .attr(\"cx\", 0)\n            .attr(\"cy\", 0)\n            .attr(\"filter\", \"brightness(0.5)\")\n            .attr(\"class\", \"pulse-ring\")\n            .attr(\"r\", 2.5 * dotRadius);\n\n        markerWrapper.append(\"circle\")\n          .attr(\"cx\", 0)\n          .attr(\"cy\", 0)\n          .attr(\"stroke\", \"#666\")\n          .attr(\"class\", sensorData.current?.sensor_status === SensorStatus.active && \"pulse-dot\")\n          .attr(\"r\", dotRadius);\n\n        markerWrapper.append(\"text\")\n          .attr(\"class\", \"location-label\")\n          .attr(\"x\", dotRadius * 1.5)\n          .attr(\"y\", 0)\n          .attr(\"fill\", \"black\")\n          .attr(\"alignment-baseline\", \"middle\")\n          .attr(\"text-anchor\", \"left\")\n          .attr(\"font-size\", font_size / 3)\n          .text(capitalizeFirstCharacter(sensorData.sensor?.location_short));\n\n        const locationLabels = document.getElementsByClassName(\"location-label\");\n        for (let i = 1; i < locationLabels.length; i++) {\n          const locationLabel_1 = locationLabels[i - 1];\n          const locationLabel_2 = locationLabels[i];\n          const overlapped = areDOMOverlapped(locationLabel_1.getBoundingClientRect(), locationLabel_2.getBoundingClientRect());\n\n          if (overlapped !== 0) {\n            console.log(\"haha\")\n            locationLabel_1.setAttribute(\"y\", overlapped * dotRadius);\n            locationLabel_2.setAttribute(\"y\", - overlapped * dotRadius);\n          }\n        }\n      }\n    });\n\n  }, [data])\n\n  return (\n    <Box\n      sx={{\n        '& .pulse-ring': {\n          animation: 'pulse-ring 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes pulse-ring': {\n            '0%': {\n              transform: 'scale(0.2)'\n            },\n            '80%': {},\n            '100%': {\n              opacity: 0\n            }\n          }\n        },\n        '& .pulse-dot': {\n          animation: 'pulse-dot 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes pulse-dot': {\n            '0%': {\n              transform: 'scale(0.5)'\n            },\n            '50%': {\n              transform: 'scale(1)',\n              filter: 'brightness(1.2) contrast(1.2) saturate(1.2)'\n            },\n            '100%': {\n              transform: 'scale(0.5)'\n            }\n          }\n        }\n      }}\n      width=\"100%\"\n      height=\"100%\"\n    >\n      <svg\n        id=\"recent-historical-graph\"\n        width=\"100%\"\n        height=\"100%\"\n        ref={graphContainer}\n      >\n        <g ref={layerBackground} />\n        <g ref={layerXaxisWrapper} />\n        <g ref={layerTexts} />\n        <g ref={layerLines} />\n      </svg>\n    </Box>\n\n  );\n}\n\nexport default RecentHistoricalGraph;","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect } from 'react';\n\nimport { Box, Grid, Typography, Stack, List, ListItem, ListItemText } from '@mui/material';\n\nimport CITIESlogoLinkToHome from '../../Components/Header/CITIESlogoLinkToHome';\n\nimport { SensorStatus, getDomainName, getUrlAfterScreen } from './ScreenUtils';\nimport { TemperatureUnits } from \"./TemperatureUtils\";\n\nimport RecentHistoricalGraph from './RecentHistoricalGraph';\n\nimport AQIdatabase from '../../Utils/AirQualityIndexHelper';\n\nimport CustomThemes from '../../Themes/CustomThemes';\n\nimport QRCode from \"react-qr-code\";\n\nimport CurrentAQIGrid from '../../Components/CurrentAQIGrid';\nimport { fetchAndProcessCurrentData } from '../../Utils/ApiUtils';\n\nconst Screen = () => {\n  const [isLayoutReversed, setIsLayoutReversed] = useState();\n  const [temperatureUnit, setTemperatureUnit] = useState(TemperatureUnits.celsius); // default\n\n  const [data, setData] = useState({});\n\n  // Tweak the layout of the screen to prevent burn-in\n  useEffect(() => {\n    // Helper function to change layout of the screen based on current's month\n    // (arrange the left and right sections of the screen)\n    // to mitigate burn-in if the same static image is displayed over a long period of time\n    function returnIsLayoutReversed() {\n      let months = [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1]; // 12 months of a year, change the layout every two months\n      let now = new Date();\n      let thisMonthIndex = now.getMonth(); // get the index of this Month (0-11)\n      // Return a boolean value if the layout should be reversed\n      return (months[thisMonthIndex] !== 0);\n    }\n\n    setIsLayoutReversed(returnIsLayoutReversed());\n\n    // Set up an interval to call the function every day\n    const oneDayInMilliseconds = 24 * 60 * 60 * 1000;\n    const intervalId = setInterval(() => {\n      setIsLayoutReversed(returnIsLayoutReversed());\n    }, oneDayInMilliseconds);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  // Get searchParams for customization\n  // like switching to Fahrenheit / turning on-off heatIndex\n  // urlParams should be something like this /?isFahrenheit\n  useEffect(() => {\n    const url = new URL(document.location.href);\n    const searchParamsKeys = url.searchParams;\n\n    searchParamsKeys.forEach((value, key) => {\n      switch (key) {\n        case 'isFahrenheit':\n          setTemperatureUnit(TemperatureUnits.fahrenheit);\n          break;\n        default:\n          break;\n      }\n    });\n  }, []);\n\n  // Fetch air quality data from database\n  useEffect(() => {\n    const currentUrl = window.location.href;\n    const regex = /\\/screen\\/(.+)/;\n    const match = currentUrl.match(regex);\n\n    let apiUrl;\n    if (match && match.length > 1) apiUrl = `https://api.citiesair.com/screen/${match[1]}`\n    else return;\n\n    fetchAndProcessCurrentData(apiUrl)\n      .then((data) => {\n        setData(data)\n      })\n      .catch((error) => console.log(error));\n\n    // Create an interval that fetch new data every 5 minute\n    const fetchInterval = 5 * 60 * 1000; // 5min\n    const intervalId = setInterval(() => {\n      fetchAndProcessCurrentData(apiUrl)\n        .then((data) => {\n          setData(data)\n        })\n        .catch((error) => console.log(error))\n    },\n      fetchInterval);\n    // Clean up the interval when the component unmounts\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  const AirQualityComparison = () => {\n    // Only display air quality comparison if every sensor is currently active\n    if (!Object.values(data).every((sensorData) => sensorData.current?.sensor_status === SensorStatus.active)) return null;\n\n    let outdoorsAQI, indoorsAQI;\n    // Don't display comparison if outdoor air is good\n    for (let i = 0; i < Object.values(data).length; i++) {\n      const sensorData = Object.values(data)[i];\n      if (sensorData.sensor?.location_type === \"outdoors\") {\n        outdoorsAQI = sensorData.current.aqi;\n        if (outdoorsAQI <= AQIdatabase[0].aqiUS.high) return null;\n      }\n      else indoorsAQI = sensorData.current.aqi;\n    }\n\n    const ratio = outdoorsAQI / indoorsAQI;\n    let comparison;\n    if (ratio >= 2) comparison = `${parseFloat(ratio).toFixed(1)} times`;\n    else if (ratio > 1.2) comparison = `${Math.round(100 * ((outdoorsAQI - indoorsAQI) / indoorsAQI))}%`;\n    else return null;\n\n    return (\n      <ListItem>\n        <ListItemText primary={\n          <>Indoors air is\n            <Typography\n              component=\"span\"\n              color={`${AQIdatabase[0].lightThemeColor} !important`}\n            >\n              {` ${comparison} `}\n            </Typography>\n            better than outdoors</>\n        } />\n      </ListItem>\n    );\n  }\n\n  return (\n    <Grid\n      container\n      alignContent=\"stretch\"\n      alignItems=\"stretch\"\n      height=\"100vh\"\n      sx={{\n        overflow: 'hidden',\n        background: \"white\",\n        '& *': {\n          fontWeight: '500 !important'\n        },\n        '& .condensedFont': {\n          fontFamily: 'IBM Plex Sans Condensed, sans-serif !important',\n          '& *': {\n            fontFamily: 'IBM Plex Sans Condensed, sans-serif !important'\n          }\n        },\n        '& .flashingRed': {\n          '& .MuiTypography-root ': {\n            color: `${AQIdatabase[3].lightThemeColor} !important`,\n            opacity: 0.8\n          },\n          color: `${AQIdatabase[3].lightThemeColor} !important`,\n          animation: 'flashingRed 3s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes flashingRed': {\n            '0%': {\n              opacity: 1\n            },\n            '50%': {\n              opacity: 0.5\n            },\n            '100%': {\n              opacity: 1\n            }\n          }\n        }\n      }}\n    >\n      <Grid\n        item\n        xs={6}\n        sx={{\n          py: 3,\n          px: 2,\n          order: isLayoutReversed ? 1 : 0,\n          background: '#212529'\n        }}\n      >\n        <Stack\n          direction=\"column\"\n          justifyContent=\"space-between\"\n          height=\"100%\"\n          textAlign=\"center\"\n        >\n          <Box>\n            <Typography variant=\"h4\" fontWeight=\"500\" color=\"white\">\n              PM2.5 AIR QUALITY INDEX\n            </Typography>\n            <Typography variant=\"h5\" className='condensedFont' color={CustomThemes.universal.palette.inactiveSensor}>\n              Particulate Matter &lt; 2.5μm\n            </Typography>\n          </Box>\n\n          <Grid\n            container\n            justifyContent=\"space-around\"\n          >\n            <CurrentAQIGrid currentData={data} temperatureUnit={temperatureUnit} />\n          </Grid>\n\n          <List className='condensedFont'\n            sx={{\n              listStyleType: 'disclosure-closed',\n              '& .MuiTypography-root': {\n                fontSize: '1.5rem',\n              },\n              '& .MuiListItem-root': {\n                display: 'list-item',\n                ml: 3,\n                p: 0,\n                pr: 3,\n              },\n              '& .MuiTypography-root, .MuiListItem-root': {\n                color: CustomThemes.universal.palette.inactiveSensor\n              }\n            }}>\n            <AirQualityComparison />\n            {\n              Object.entries(data).map(([key, sensorData]) => (\n                sensorData.current?.healthSuggestion &&\n                <ListItem\n                  key={key}\n                  className={sensorData.current?.aqi >= AQIdatabase[2].aqiUS.low && 'flashingRed'}\n                >\n                  <ListItemText\n                    primary={sensorData.current?.healthSuggestion}\n                  />\n                </ListItem>\n              ))\n            }\n          </List>\n        </Stack>\n      </Grid>\n\n      <Grid item xs={6} sx={{ order: isLayoutReversed ? 0 : 1 }}>\n        <Box\n          sx={{\n            position: 'absolute',\n            top: 0,\n            right: !isLayoutReversed && 0,\n            left: isLayoutReversed && 0,\n            width: '5vw',\n            height: '5vw',\n            m: 1\n          }}\n        >\n          <CITIESlogoLinkToHome />\n        </Box>\n        <Grid\n          container\n          alignContent=\"space-between\"\n          justifyContent=\"center\"\n          height=\"100%\"\n          textAlign=\"center\"\n        >\n          <Grid item xs={12} sx={{ pt: 3, px: 2 }}>\n            <Typography variant=\"h4\" fontWeight=\"500\" sx={{ color: 'black' }}>\n              AN INITIATIVE BY CITIESair\n            </Typography>\n          </Grid>\n          <Grid item xs={2}>\n            <Box height=\"auto\" width=\"100%\">\n              <QRCode\n                size={256}\n                style={{ height: \"auto\", maxWidth: \"100%\", width: \"100%\" }}\n                value={\n                  `${getDomainName(document.location.href)}?source=${getUrlAfterScreen(document.location.href)}`\n                } viewBox={`0 0 256 256`}\n              />\n            </Box>\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            height=\"70%\"\n            className='condensedFont'\n            sx={{ '& *': { fontWeight: '600 !important' } }}\n          >\n            <RecentHistoricalGraph data={data} />\n          </Grid>\n        </Grid>\n\n      </Grid>\n    </Grid >\n  );\n};\n\nexport default Screen;\n","// ---------- Calculate time difference and return appropriate format\nexport const getFormattedElapsedTimeFromNow = (dateString) => {\n  const inputDate = new Date(dateString);\n  const currentDate = new Date();\n  const timeDifference = currentDate - inputDate;\n\n  // Calculate time differences in seconds, minutes, hours, and days\n  const seconds = Math.floor(timeDifference / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  // Determine the most prominent time unit\n  if (days > 0) {\n    return `${days}d`;\n  } else if (hours > 0) {\n    return `${hours}h`;\n  } else if (minutes > 0) {\n    return `${minutes}m`;\n  } else {\n    return `${seconds}s`;\n  }\n}\n\n// ---------- Sensor status\nexport const SensorStatus = {\n  active: \"active\",\n  temporaryOffline: \"temporaryOffline\",\n  offline: \"offline\"\n};\n\nconst SensorStatusCriteria = [\n  {\n    name: SensorStatus.active,\n    cutoffInHours: {\n      low: 0,\n      high: 2\n    }\n  },\n  {\n    name: SensorStatus.temporaryOffline,\n    cutoffInHours: {\n      low: 3,\n      high: 6\n    }\n  },\n  {\n    name: SensorStatus.offline,\n    cutoffInHours: {\n      low: 7,\n      high: Infinity\n    }\n  }\n];\n\nexport const calculateSensorStatus = (lastSeenInHours) => {\n  for (let i = 0; i < SensorStatusCriteria.length; i++) {\n    const category = SensorStatusCriteria[i];\n    if (category.cutoffInHours.low <= lastSeenInHours && lastSeenInHours <= category.cutoffInHours.high) {\n      return category.name;\n    }\n  }\n}\n\nexport const returnSensorStatus = (currentDataForSensor) => {\n  switch (currentDataForSensor.sensor_status) {\n    case SensorStatus.active:\n      return null;\n    case SensorStatus.temporaryOffline:\n      return `Last seen: ${currentDataForSensor.lastSeen}h ago`;\n    case SensorStatus.offline:\n      return \"Sensor offline\";\n    default:\n      return null;\n  }\n}\n\n// ----- Misc\nexport const capitalizeFirstCharacter = (inputString) => {\n  if (inputString) return inputString.charAt(0).toUpperCase() + inputString.slice(1);\n  else return null;\n};\n\nexport const getDomainName = (url) => {\n  return new URL(url).hostname;\n}\n\nexport const getUrlAfterScreen = (url) => {\n  const screenString = 'screen';\n  const urlComponents = url.split(screenString);\n  return `${screenString}${urlComponents.pop()}`;\n}\n\nexport const removeLastDirectoryFromURL = (url) => {\n  const urlComponents = url.split('/');\n  // Remove the last component (directory)\n  urlComponents.pop();\n  // Reconstruct the URL with the last directory removed\n  return urlComponents.join('/') + '/';\n}\n\nexport const areDOMOverlapped = (rect1, rect2) => {\n  if (!(rect1.bottom < rect2.top || rect1.top > rect2.bottom)) {\n    console.log(\"haha\")\n    if (rect1.top < rect2.top) return -1;\n    else return 1;\n  }\n  else return 0;\n}\n","export const TemperatureUnits = {\n  celsius: 'C',\n  fahrenheit: 'F',\n};\n\n// Converts a temperature to the specified unit\nexport function convertTemperature(temp, toUnit) {\n  if (!temp) return;\n\n  if (toUnit === TemperatureUnits.celsius) {\n    return ((temp - 32) * 5 / 9).toFixed(1);\n  } else if (toUnit === TemperatureUnits.fahrenheit) {\n    return (temp * 9 / 5 + 32).toFixed(1);\n  }\n\n  return temp; // Return as-is for unsupported units\n}\n\n// Return formatted temperature in the appropriate system\nexport function getFormattedTemperature({ rawTemp, currentUnit, returnUnit }) {\n  return `${(currentUnit === returnUnit) ? rawTemp : convertTemperature(rawTemp, returnUnit)}°${returnUnit}`;\n}\n\n// -------- Heat index calculation\n// Define the heat index categories and their thresholds\nconst heatIndexCategories = [\n  { name: \"No Caution\", threshold: 80 },\n  { name: \"Caution\", threshold: 90 },\n  { name: \"Extreme Caution\", threshold: 105 },\n  { name: \"Danger\", threshold: 130 },\n  { name: \"Extreme Danger\", threshold: Infinity },\n];\n// Calculate heat index temperature and return the category\nexport function calculateHeatIndex({ rawTemp, currentUnit, rel_humidity, returnUnit }) {\n  if (!rawTemp || !rel_humidity) return;\n\n  // Make sure the input values are valid\n  const tempF = (currentUnit === TemperatureUnits.fahrenheit)\n    ? rawTemp :\n    convertTemperature(rawTemp, TemperatureUnits.fahrenheit);\n  if (rel_humidity < 0 || rel_humidity > 100) return null;\n\n  let heatIndexF;\n\n  if (tempF < 80) heatIndexF = tempF;\n  else\n    heatIndexF = Math.round(\n      (\n        -42.379 +\n        (2.04901523 * tempF) +\n        (10.14333127 * rel_humidity) -\n        (0.22475541 * tempF * rel_humidity) -\n        (0.00683783 * tempF * tempF) -\n        (0.05481717 * rel_humidity * rel_humidity) +\n        (0.00122874 * tempF * tempF * rel_humidity) +\n        (0.00085282 * tempF * rel_humidity * rel_humidity) -\n        (0.00000199 * tempF * tempF * rel_humidity * rel_humidity)\n      )\n      * 10\n    ) / 10\n      ;\n\n  // Find the appropriate category for the calculated heat index\n  const category = heatIndexCategories.find((c) => heatIndexF < c.threshold);\n  // Return an object with the heat index and the category name\n  const formattedHeatIndex = getFormattedTemperature({\n    rawTemp: heatIndexF,\n    currentUnit: TemperatureUnits.fahrenheit,\n    returnUnit: returnUnit\n  });\n\n  if (formattedHeatIndex && isNaN(formattedHeatIndex) && category?.name) {\n    return `Heat Index: ${formattedHeatIndex} - ${category?.name}`;\n  }\n  else return null;\n}\n\n","import AQIdatabase from \"./AirQualityIndexHelper\";\n\n// Helper function to categorize AQI\nfunction linearPieceWise(aqiHigh, aqiLow, concenHigh, concenLow, val) {\n  return parseInt(\n    ((aqiHigh - aqiLow) / (concenHigh - concenLow)) * (val - concenLow) + aqiLow\n  );\n}\n// Returns AQI number value\nfunction convertToAQI(val) {\n  if (val == null)\n    return {\n      aqi: null,\n      aqi_category_index: null\n    };\n\n  for (let i = 0; i < AQIdatabase.length; i++) {\n    const category = AQIdatabase[i];\n    if (val >= category.rawPM2_5.low && val <= category.rawPM2_5.high) {\n      return {\n        aqi: linearPieceWise(category.aqiUS.high, category.aqiUS.low, category.rawPM2_5.high, category.rawPM2_5.low, val),\n        aqi_category_index: category.id\n      }\n    }\n  };\n}\n\nexport default convertToAQI;","import CustomThemes from '../Themes/CustomThemes';\n\nconst AQIdatabase = [\n  {\n    id: 0,\n    category: 'Good',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[0],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[0],\n    aqiUS: {\n      low: 0,\n      high: 50\n    },\n    rawPM2_5: {\n      low: 0.0,\n      high: 12.0\n    },\n    description: 'Air quality is satisfactory, and air pollution poses little or no risk',\n    healthSuggestions: {\n      outdoors: 'Enjoy outdoor activities, the air is great!',\n      indoors_generic: 'Enjoy clean indoor air',\n      indoors_dining_hall: 'Enjoy clean dining hall air',\n      indoors_gym: 'Enjoy clean air for physical activities indoors',\n      indoors_vulnerable: 'Enjoy clean indoor air'\n    }\n  },\n  {\n    id: 1,\n    category: 'Moderate',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[1],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[1],\n    aqiUS: {\n      low: 51,\n      high: 100\n    },\n    rawPM2_5: {\n      low: 12.1,\n      high: 35.4\n    },\n    description: 'Air quality is acceptable. However, there may be a risk for some people, particularly those who are unusually sensitive to air pollution',\n    healthSuggestions: {\n      outdoors: 'Children and individuals with respiratory issues might need to reduce prolonged outdoor exertion',\n      indoors_generic: 'Indoor air is acceptable, but not great',\n      indoors_dining_hall: 'Indoor air is acceptable, but not great<br>Avoid Grill area',\n      indoors_gym: 'Indoor air is acceptable, but not great',\n      indoors_vulnerable: 'Indoor air is acceptable, but not great'\n    }\n  },\n  {\n    id: 2,\n    category: 'Unhealthy for Sensitive Groups',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[2],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[2],\n    aqiUS: {\n      low: 101,\n      high: 150\n    },\n    rawPM2_5: {\n      low: 35.5,\n      high: 55.4\n    },\n    description: 'Members of sensitive groups may experience health effects. The general public is less likely to be affected',\n    healthSuggestions: {\n      outdoors: 'Children and individuals with respiratory issues should limit outdoor exertion',\n      indoors_dining_hall: 'Consider take-aways<br>Avoid Grill area',\n      indoors_gym: 'Individuals with respiratory issues should lower the intensity of indoor exercises',\n      indoors_vulnerable: 'Monitor closely individuals with respiratory issues for any symptom'\n    }\n  },\n  {\n    id: 3,\n    category: 'Unhealthy',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[3],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[3],\n    aqiUS: {\n      low: 151,\n      high: 200\n    },\n    rawPM2_5: {\n      low: 55.5,\n      high: 150.4\n    },\n    description: 'Some members of the general public may experience health effects; members of sensitive groups may experience more serious health effects',\n    healthSuggestions: {\n      outdoors: 'Everyone should limit outdoor activities<br>Wear masks when going outside',\n      indoors_dining_hall:\n        'Consider take-aways<br>Avoid Grill area<br>Come back at off-peak hours',\n      indoors_gym: 'Everyone should lower the intensity of indoor exercises',\n      indoors_vulnerable: 'Monitor closely individuals with respiratory issues for any symptom'\n    }\n  },\n  {\n    id: 4,\n    category: 'Very Unhealthy',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[4],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[4],\n    aqiUS: {\n      low: 201,\n      high: 300\n    },\n    rawPM2_5: {\n      low: 150.5,\n      high: 250.4\n    },\n    description: 'Health alert: The risk of health effects is increased for everyone',\n    healthSuggestions: {\n      outdoors: 'Avoid outdoor activities at all cost<br>Wear N95 masks when going outside',\n      indoors_dining_hall:\n        'Consider take-aways<br>Avoid Grill area<br>Come back at off-peak hours',\n      indoors_gym: 'Indoor air quality is not suitable for any physical activities',\n      indoors_vulnerable: 'Monitor closely individuals with respiratory issues for any symptom'\n    }\n  },\n  {\n    id: 5,\n    category: 'Hazardous',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[5],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[5],\n    aqiUS: {\n      low: 300,\n      high: 500\n    },\n    rawPM2_5: {\n      low: 250.5,\n      high: 550.5\n    },\n    description: 'Health warning of emergency conditions: everyone is more likely to be affected',\n    healthSuggestions: {\n      outdoors: 'Avoid outdoor activities at all cost<br>Wear N95 masks when going outside',\n      indoors_dining_hall:\n        'Consider take-aways<br>Avoid Grill area<br>Come back at off-peak hours',\n      indoors_gym: 'Indoor air quality is not suitable for any physical activities',\n      indoors_vulnerable: ''\n    }\n  },\n];\n\nexport default AQIdatabase;\n","import { fetchDataFromURL } from \"../Components/DatasetDownload/DatasetFetcher\";\nimport { calculateSensorStatus, SensorStatus } from \"../Pages/Screen/ScreenUtils\";\nimport convertToAQI from \"./AirQualityIndexCalculator\";\nimport AQIdatabase from \"./AirQualityIndexHelper\";\nimport parse from 'html-react-parser';\n\nexport const apiDomain = 'https://api.citiesair.com';\n\nexport const fetchAndProcessCurrentData = async (apiUrl) => {\n  try {\n    const data = await fetchDataFromURL(apiUrl, 'json', true);\n\n    if (!data) {\n      throw new Error('Returned data is empty');\n    }\n\n    try {\n      return processCurrentData(data);\n    } catch (error) {\n      // Handle the case where data is not an iterable object\n      console.error(\"Error: data is not iterable\", error);\n    }\n  }\n  catch (error) {\n    throw new Error(`Error fetching data: ${error.message}`);\n  }\n}\n\nexport const processCurrentData = (data) => {\n  Object.entries(data).map(([_, sensorData]) => {\n    // Calculate if the sensor is currently active or not\n    const now = new Date();\n    const currentTimestamp = new Date(sensorData.current?.timestamp);\n    const lastSeenInHours = Math.round((now - currentTimestamp) / 1000 / 3600);\n    if (sensorData.current) {\n      sensorData.current.lastSeenInHours = lastSeenInHours;\n      sensorData.current.sensor_status = calculateSensorStatus(lastSeenInHours);\n    }\n\n    // Calculate AQI from raw measurements\n    if (sensorData.current?.[\"pm2.5\"]) {\n      const aqiObject = convertToAQI(sensorData.current[\"pm2.5\"]);\n      if (aqiObject) {\n        const aqiCategory = AQIdatabase[aqiObject.aqi_category_index];\n        sensorData.current.aqi = aqiObject.aqi;\n        sensorData.current.category = aqiCategory.category;\n\n        // Only add color and healthSuggestion if the sensor is active\n        if (sensorData.current.sensor_status === SensorStatus.active) {\n          sensorData.current = {\n            ...sensorData.current,\n            color: aqiCategory.lightThemeColor,\n            healthSuggestion: aqiCategory.healthSuggestions[sensorData.sensor?.location_type] && parse(aqiCategory.healthSuggestions[sensorData.sensor?.location_type])\n          };\n        }\n      }\n    }\n  });\n  return data;\n}"],"names":["displayLastUpdateAndSensorStatus","sensorData","isScreen","current","sensor_status","SensorStatus","variant","sx","mt","fontWeight","color","AQIdatabase","mr","timestamp","getFormattedElapsedTimeFromNow","props","currentData","temperatureUnit","TemperatureUnits","orderOfItems","container","justifyContent","verticalAlign","fontSize","fontFamily","Object","entries","map","index","numOfItems","key","item","order","keys","length","xs","Math","max","sm","lg","min","CustomThemes","className","sensor","location_long","location_short","lineHeight","aqi","category","getFormattedTemperature","rawTemp","temperature","currentUnit","returnUnit","transform","rel_humidity","round","includes","location_type","calculateHeatIndex","returnSensorStatus","width","height","xAxis","yAxis","data","useState","graphContainer","useRef","layerBackground","layerTexts","layerXaxisWrapper","layerLines","maxAQItoDisplay","margin","lineGenerator","d3","x","d","y","curve","useEffect","clientWidth","clientHeight","selectAll","remove","attr","forEach","historical","Date","convertToAQI","Array","isArray","ceil","aqiUS","low","high","xAxisMax","xAxisMin","setHours","getHours","domain","rangeRound","range","font_size","floor","marginText","i","aqiRange","append","lightThemeColor","text","formatHour","call","tickSize","ticks","tickFormat","select","datum","mostRecentData","aqiObject","aqi_category_index","markerWrapper","dotRadius","capitalizeFirstCharacter","locationLabels","document","getElementsByClassName","locationLabel_1","locationLabel_2","overlapped","areDOMOverlapped","getBoundingClientRect","console","log","setAttribute","Box","animation","opacity","filter","id","ref","isLayoutReversed","setIsLayoutReversed","setTemperatureUnit","setData","returnIsLayoutReversed","getMonth","intervalId","setInterval","clearInterval","URL","location","href","searchParams","value","apiUrl","match","window","fetchAndProcessCurrentData","then","catch","error","AirQualityComparison","values","every","outdoorsAQI","indoorsAQI","comparison","ratio","parseFloat","toFixed","ListItem","ListItemText","primary","Typography","component","Grid","alignContent","alignItems","overflow","background","py","px","Stack","direction","textAlign","CurrentAQIGrid","List","listStyleType","display","ml","p","pr","healthSuggestion","position","top","right","left","m","CITIESlogoLinkToHome","pt","size","style","maxWidth","getDomainName","getUrlAfterScreen","viewBox","dateString","inputDate","timeDifference","seconds","minutes","hours","days","active","temporaryOffline","offline","SensorStatusCriteria","name","cutoffInHours","Infinity","calculateSensorStatus","lastSeenInHours","currentDataForSensor","lastSeen","inputString","charAt","toUpperCase","slice","url","hostname","screenString","urlComponents","split","pop","rect1","rect2","bottom","celsius","fahrenheit","convertTemperature","temp","toUnit","heatIndexCategories","threshold","heatIndexF","tempF","find","c","formattedHeatIndex","isNaN","linearPieceWise","aqiHigh","aqiLow","concenHigh","concenLow","val","parseInt","rawPM2_5","darkThemeColor","description","healthSuggestions","outdoors","indoors_generic","indoors_dining_hall","indoors_gym","indoors_vulnerable","fetchDataFromURL","Error","processCurrentData","message","now","currentTimestamp","aqiCategory","parse"],"sourceRoot":""}