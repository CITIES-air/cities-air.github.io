{"version":3,"file":"static/js/300.45c64276.chunk.js","mappings":"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","sources":["Pages/Home/About.jsx","IQAir_logo.svg","Pages/Home/Map.jsx","Pages/Home/GetInTouch.jsx","Pages/Home/Home.jsx"],"sourcesContent":["import { Stack, Typography, Paper } from '@mui/material';\n\nimport parse from 'html-react-parser';\nimport UppercaseTitle from '../../Components/UppercaseTitle';\nimport ExpandableSection from '../Project/ExpandableSection';\n\nimport jsonData from '../../section_data.json';\nimport { replacePlainHTMLWithMuiComponents, capitalizePhrase } from '../../Utils/Utils';\n\nfunction About() {\n  return (\n    <>\n      <UppercaseTitle text={capitalizePhrase(jsonData.about.id)} />\n      <Stack spacing={3}>\n        {jsonData.about.content.map((element, index) => (\n          <Paper key={index} elevation={2} sx={{ p: 3 }}>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {parse(element.mainText, {\n                replace: replacePlainHTMLWithMuiComponents,\n              })}\n            </Typography>\n            {\n              element.reference && (\n                <ExpandableSection\n                  title={\"Reference\"}\n                  content={(\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      {parse(element.reference, {\n                        replace: replacePlainHTMLWithMuiComponents,\n                      })}\n                    </Typography>\n                  )}\n                />\n              )\n            }\n          </Paper>\n        ))}\n        <Typography variant=\"caption\" color=\"text.secondary\" sx={{ px: 3 }}>\n          {parse(jsonData.disclaimer.content, {\n            replace: replacePlainHTMLWithMuiComponents,\n          })}\n        </Typography>\n      </Stack>\n    </>\n  );\n}\n\nexport default About;\n","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgIqAirLogo(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 77,\n    height: 29,\n    viewBox: \"0 0 77 29\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    fill: \"none\",\n    fillRule: \"evenodd\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 28.988h76.999V0H0z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#4e8abe\",\n    d: \"M25.789 19.005c0 2.573.218 2.646 1.36 2.792l.534.073c.17.17.146.608-.049.703a74.045 74.045 0 0 0-6.506 0c-.194-.095-.219-.533-.048-.703l.533-.073c1.142-.146 1.36-.22 1.36-2.792v-9.03c0-2.574-.218-2.647-1.36-2.794l-.533-.072c-.171-.17-.146-.607.048-.704a71.547 71.547 0 0 0 6.507-.001c.194.098.218.535.048.705l-.534.072c-1.142.147-1.36.22-1.36 2.794v9.03zM51.372 16.35h4.257l-.78-6.33h-.044l-3.433 6.33zm2.318-9.763h3.589L59.93 22.5h-3.476l-.514-3.543h-5.95L47.985 22.5h-3.7L53.69 6.587zM66.995 9.195h-3.187l.58-2.607h3.186l-.579 2.607zm-3.543 1.783h3.187l-2.452 11.523H61l2.452-11.523zM69.18 10.978h3.009l-.47 2.072.046.045c.714-1.583 2.274-2.429 3.967-2.429.335 0 .647.023.98.067l-.645 3.075c-.446-.089-.892-.2-1.338-.2-2.43 0-3.298 1.827-3.722 3.79l-1.07 5.102h-3.164l2.407-11.522z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#4e8abe\",\n    d: \"M31.508 14.004c0 3.35 1.433 7.915 5.584 7.915 2.767 0 5.002-2.064 5.002-6.943 0-3.666-1.65-7.915-5.512-7.915-2.428 0-5.074 1.772-5.074 6.943m13.887.534c0 3.787-2.282 6.822-5.487 7.843-.145.097-.049.29.22.509 1.383 1.214 3.543 3.132 5.364 3.666.583.17 1.165.267 1.748.267a3.36 3.36 0 0 0 1.214-.243c.146.073.22.34.146.486-.729.557-1.99.752-3.035.752-3.253 0-6.604-1.942-8.983-4.467-.437-.437-.606-.51-.898-.534-4.418-.365-7.477-3.958-7.477-8.11 0-4.952 3.592-8.618 8.691-8.618 5.608 0 8.497 4.079 8.497 8.449\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#D9272E\",\n    d: \"M15.984 21.264a1.22 1.22 0 0 1-1.22 1.221H1.218A1.22 1.22 0 0 1 0 21.265V7.72c0-.674.546-1.219 1.22-1.219h13.543a1.22 1.22 0 0 1 1.221 1.22v13.543z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#FFF\",\n    d: \"M9.735 12.91V9.418H6.369v3.494l-3.495-.006v3.36h3.495v3.496h3.366v-3.497h3.494V12.91z\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgIqAirLogo);\nexport default __webpack_public_path__ + \"static/media/IQAir_logo.6664e0a790249b05f736fb791effaaf3.svg\";\nexport { ForwardRef as ReactComponent };","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useMemo, useCallback } from 'react';\nimport { Box, Typography, Stack, Link } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport { MapContainer, TileLayer, Marker, Popup, useMap, AttributionControl, useMapEvent, Rectangle, CircleMarker } from 'react-leaflet';\nimport { useEventHandlers } from '@react-leaflet/core';\nimport L from 'leaflet';\n\nimport LaunchIcon from '@mui/icons-material/Launch';\n\nimport IQAir_Logo from '../../IQAir_logo.svg';\n\nimport { SensorStatus, calculateSensorStatus, getFormattedElapsedTimeFromNow } from '../Screen/ScreenUtils';\n\nimport { fetchDataFromURL } from '../../Components/DatasetDownload/DatasetFetcher';\n\nimport { getFormattedTemperature, TemperatureUnits } from '../Screen/TemperatureUtils';\n\nimport AQIdatabase from '../../Utils/AirQualityIndexHelper';\nimport convertToAQI from '../../Utils/AirQualityIndexCalculator';\n\nimport ThermostatIcon from '@mui/icons-material/Thermostat';\nimport WaterDropIcon from '@mui/icons-material/WaterDrop';\nimport ThemePreferences from '../../Themes/ThemePreferences';\n\nimport { styled } from '@mui/material/styles';\nimport CustomThemes from '../../Themes/CustomThemes';\n\nconst StyledLeafletPopup = styled(Popup)(({ theme }) => ({\n    '& .leaflet-popup-tip-container': {\n        display: 'none !important'\n    }\n}));\n\n\nfunction MapPlaceholder() {\n    return (\n        <p>\n            Map of CITIESair stations in Abu Dhabi\n            <noscript>You need to enable JavaScript to see this map.</noscript>\n        </p>\n    )\n}\n\nconst getTileUrl = ({ themePreference, isMiniMap }) => {\n    let tileTheme;\n    switch (themePreference) {\n        case ThemePreferences.dark:\n            tileTheme = isMiniMap ? 'light' : 'dark';\n            break\n        default:\n            tileTheme = isMiniMap ? 'dark' : 'light';\n            break\n    }\n    return `https://{s}.tile.jawg.io/jawg-${tileTheme}/{z}/{x}/{y}{r}.png?access-token={accessToken}`;\n}\nconst getMiniMapBoundOptions = ({ themePreference }) => {\n    switch (themePreference) {\n        case ThemePreferences.dark:\n            return {\n                fillColor: \"#000\",\n                color: \"#000\"\n            }\n        default:\n            return {\n                fillColor: \"#fff\",\n                color: \"#fff\"\n            }\n    }\n}\nconst tileAttribution = '<a href=\"https://leafletjs.com/\" target=\"_blank\"><b>Leaflet</b></a> | <a href=\"https://jawg.io\" target=\"_blank\">&copy; <b>Jawg</b>Maps</a> <a href=\"https://www.openstreetmap.org/copyright\">&copy; OpenStreetMap</a> contributors';\nconst tileAccessToken = 'N4ppJQTC3M3uFOAsXTbVu6456x1MQnQTYityzGPvAkVB3pS27NMwJ4b3AfebMfjY';\nconst centerCoordinate = [24.46, 54.52];\nconst maxBounds = [\n    [22.608292, 51.105185], // [Southwest corner coordinates]\n    [26.407575, 56.456571], // [Northeast corner coordinates]\n];\n\nconst MIN_ZOOM = 8;\nconst MAX_ZOOM = 12;\nconst DEFAULT_ZOOM = 10;\nconst POSITION_CLASSES = {\n    bottomleft: 'leaflet-bottom leaflet-left',\n    bottomright: 'leaflet-bottom leaflet-right',\n    topleft: 'leaflet-top leaflet-left',\n    topright: 'leaflet-top leaflet-right',\n}\n\nconst Map = ({ themePreference, temperatureUnitPreference }) => {\n    const [mapData, setMapData] = useState({});\n    const theme = useTheme();\n\n    const url = 'https://api.citiesair.com/map_public_outdoors_stations';\n\n    useEffect(() => {\n        fetchDataFromURL(url, 'json').then((data => {\n            Object.entries(data).map(([_, location]) => {\n                // Calculate if the sensor is currently active or not\n                const now = new Date();\n                const currentTimestamp = new Date(location.current?.timestamp);\n                const lastSeenInHours = Math.round((now - currentTimestamp) / 1000 / 3600);\n                if (location.current) {\n                    location.current.lastSeenInHours = lastSeenInHours;\n                    location.current.sensor_status = calculateSensorStatus(lastSeenInHours);\n                }\n\n                // Calculate AQI from raw measurements\n                if (location.current?.[\"pm2.5\"]) {\n                    const aqiObject = convertToAQI(location.current[\"pm2.5\"]);\n                    if (aqiObject) {\n                        const aqiCategory = AQIdatabase[aqiObject.aqi_category_index];\n                        location.current.aqi = aqiObject.aqi;\n                        location.current.category = aqiCategory.category;\n\n                        if (location.current.sensor_status === SensorStatus.active) {\n                            location.current.color = aqiCategory.lightThemeColor;\n                        }\n                        else {\n                            location.current.color = CustomThemes.universal.palette.inactiveSensor;\n                        }\n                    }\n                }\n\n                // Create the marker icon on the map\n                location.markerIcon = new L.DivIcon({\n                    className: 'aqi-marker-icon',\n                    html: `<div onmouseover=\"this.style.opacity=1;\" onmouseleave=\"this.style.opacity=0.75;\" style=\"width: 2.25rem; height: 2.25rem; background-color: ${location.current.color}; border-radius: 50%; border: solid 2px; display: flex; justify-content: center; align-items: center; font-size: 1rem; font-weight: 500; color: ${themePreference === ThemePreferences.light ? 'black' : 'white'}; opacity: 0.75; :hover: {opacity: 1}\">${location.current.aqi || '--'}</div>`\n\n                });\n            });\n            setMapData(data);\n        }));\n\n    }, []);\n\n    function MinimapBounds({ parentMap, zoom }) {\n        const minimap = useMap()\n\n        // Clicking a point on the minimap sets the parent's map center\n        const onClick = useCallback(\n            (e) => {\n                parentMap.setView(e.latlng, parentMap.getZoom())\n            },\n            [parentMap],\n        )\n        useMapEvent('click', onClick)\n\n        // Keep track of bounds in state to trigger renders\n        const [bounds, setBounds] = useState(parentMap.getBounds())\n        const onChange = useCallback(() => {\n            setBounds(parentMap.getBounds())\n            // Update the minimap's view to match the parent map's center and zoom\n            minimap.setView(parentMap.getCenter(), zoom)\n        }, [minimap, parentMap, zoom])\n\n        // Listen to events on the parent map\n        const handlers = useMemo(() => ({ move: onChange, zoom: onChange }), [])\n        useEventHandlers({ instance: parentMap }, handlers)\n\n        return (\n            <Rectangle\n                bounds={bounds}\n                pathOptions={{\n                    weight: 1,\n                    ...getMiniMapBoundOptions({ themePreference })\n                }}\n            />\n        );\n    }\n\n    function MinimapControl({ position, zoom, mapData }) {\n        const parentMap = useMap()\n        const mapZoom = zoom || MIN_ZOOM - 2;\n\n        // Memoize the minimap so it's not affected by position changes\n        const minimap = useMemo(\n            () => (\n                <MapContainer\n                    style={{ height: \"20vh\", width: \"30vw\", maxWidth: \"250px\", maxHeight: \"200px\" }}\n                    center={parentMap.getCenter()}\n                    zoom={mapZoom}\n                    dragging={false}\n                    doubleClickZoom={false}\n                    scrollWheelZoom={false}\n                    attributionControl={false}\n                    zoomControl={false}\n                >\n                    <TileLayer\n                        url={getTileUrl({ themePreference, isMiniMap: true })}\n                        accessToken={tileAccessToken}\n                    />\n                    {\n                        Object.entries(mapData).map(([key, location]) => (\n                            <CircleMarker\n                                key={key}\n                                center={[location.sensor?.coordinates?.latitude, location.sensor?.coordinates?.longitude]}\n                                pathOptions={{\n                                    fillColor: location.current?.color,\n                                    radius: 3,\n                                    weight: 0,\n                                    fillOpacity: 1\n                                }}\n                            >\n                            </CircleMarker>\n\n                        ))\n                    }\n                    <MinimapBounds parentMap={parentMap} zoom={mapZoom} />\n                </MapContainer>\n            ),\n            [],\n        )\n\n        const positionClass =\n            (position && POSITION_CLASSES[position]) || POSITION_CLASSES.bottomleft\n        return (\n            <div className={positionClass}>\n                <div className=\"leaflet-control leaflet-bar\">{minimap}</div>\n            </div>\n        )\n    }\n\n    return (\n        <Box sx={{\n            height: \"50vh\",\n            [theme.breakpoints.down('md')]: {\n                height: '70vh',\n            },\n            '& .leaflet-container': { height: \"100%\", width: \"100%\" },\n            '& .leaflet-control-attribution': { fontSize: '0.5rem' }\n        }}>\n            <MapContainer\n                center={centerCoordinate}\n                zoom={DEFAULT_ZOOM}\n                maxBounds={maxBounds}\n                scrollWheelZoom={false}\n                placeholder={<MapPlaceholder />}\n                attributionControl={false}\n            >\n                <MinimapControl position=\"bottomleft\" mapData={mapData} />\n\n                <TileLayer\n                    attribution={tileAttribution}\n                    url={getTileUrl({ themePreference })}\n                    minZoom={MIN_ZOOM}\n                    maxZoom={MAX_ZOOM}\n                    bounds={maxBounds}\n                    accessToken={tileAccessToken}\n                />\n                <AttributionControl position=\"bottomright\" prefix={false} />\n                {\n                    Object.entries(mapData).map(([key, location]) => (\n                        <Marker\n                            key={key}\n                            position={[location.sensor?.coordinates?.latitude, location.sensor?.coordinates?.longitude]}\n                            icon={location.markerIcon}\n                        >\n                            <StyledLeafletPopup>\n                                <Stack direction=\"row\" spacing={3}>\n                                    <Link\n                                        variant=\"body1\"\n                                        fontWeight={500}\n                                        href={location.sensor?.public_iqAir_station_link}\n                                        target='_blank'\n                                        rel=\"noopener noreferrer\"\n                                        color={`${theme.palette.primary.main}!important`}\n                                        underline=\"hover\"\n                                    >\n                                        {location.sensor?.public_iqAir_station_name}\n                                        &nbsp;\n                                        <sup>\n                                            <LaunchIcon fontSize='0.8rem' />\n                                        </sup>\n                                    </Link>\n                                    <Box>\n                                        <img src={IQAir_Logo} />\n                                    </Box>\n                                </Stack>\n\n                                <Box sx={{ '& *': { color: location.current?.color } }}>\n                                    <Typography variant=\"h3\" fontWeight=\"500\" lineHeight={0.9}>\n                                        {location.current?.aqi || '--'}\n                                        <Typography variant='caption' fontWeight=\"500\">(US AQI)</Typography>\n                                    </Typography>\n\n                                    <Typography variant=\"body1\" component=\"span\" fontWeight=\"500\">\n                                        {location.current?.category || '--'}\n                                    </Typography>\n                                </Box>\n\n                                <Typography\n                                    variant=\"caption\"\n                                    sx={{ display: 'block', fontWeight: 500 }}\n                                    gutterBottom\n                                >\n                                    PM2.5: {location.current?.[\"pm2.5\"] || '--'}µg/m<sup>3</sup>\n                                </Typography>\n                                <Typography\n                                    variant=\"caption\"\n                                    sx={{ display: 'block', fontWeight: 500 }}\n                                    gutterBottom\n                                >\n                                    <ThermostatIcon sx={{ fontSize: '1rem', verticalAlign: 'sub' }} />\n                                    {\n                                        getFormattedTemperature({\n                                            rawTemp: location.current?.temperature,\n                                            currentUnit: TemperatureUnits.celsius,\n                                            returnUnit: temperatureUnitPreference\n                                        })}\n                                    &nbsp;&nbsp;-&nbsp;&nbsp;\n                                    <WaterDropIcon sx={{ fontSize: '1rem', verticalAlign: 'sub' }} />\n                                    {location.current?.rel_humidity ? Math.round(location.current?.rel_humidity) : \"--\"}%\n                                </Typography>\n                                <Typography variant=\"caption\" sx={{ display: 'block', fontWeight: 500 }}>\n\n                                </Typography>\n                                <Box>\n                                    <Typography variant='caption' sx={{ mt: 0 }}>\n                                        <Typography variant='caption' fontWeight=\"500\">Last update:</Typography>\n                                        {location.current?.timestamp\n                                            ? ` ${getFormattedElapsedTimeFromNow(location.current.timestamp)} ago (${new Date(location.current.timestamp).toLocaleString()})`\n                                            : '--'}\n                                    </Typography>\n                                    <br />\n                                    <Typography\n                                        variant=\"caption\"\n                                        textTransform=\"capitalize\"\n                                    >\n                                        <Typography variant='caption' fontWeight=\"500\">Status:</Typography>\n                                        &nbsp;\n                                        {location.current?.sensor_status}\n                                    </Typography>\n                                </Box>\n                            </StyledLeafletPopup>\n                        </Marker>\n\n                    ))\n                }\n\n            </MapContainer>\n        </Box>\n    )\n}\n\nexport default Map;","import { Stack, Typography, Paper } from '@mui/material';\n\nimport parse from 'html-react-parser';\nimport UppercaseTitle from '../../Components/UppercaseTitle';\nimport ExpandableSection from '../Project/ExpandableSection';\n\nimport jsonData from '../../section_data.json';\nimport { replacePlainHTMLWithMuiComponents, capitalizePhrase } from '../../Utils/Utils';\n\nfunction GetInTouch() {\n  return (\n    <>\n      <UppercaseTitle text={capitalizePhrase(jsonData.getInTouch.id)} />\n      <Paper elevation={2} sx={{ p: 3, pb: 1 }}>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {parse(jsonData.getInTouch.content, {\n            replace: replacePlainHTMLWithMuiComponents,\n          })}\n        </Typography>\n      </Paper>\n    </>\n  );\n}\n\nexport default GetInTouch;\n","import { useEffect, useContext, useState } from 'react';\n\nimport { Button, Box, Grid, Stack, Typography, Container, Card, CardContent, CardMedia, CardActionArea, Divider, Tooltip } from '@mui/material';\nimport { LinkContext } from '../../ContextProviders/LinkContext';\n\nimport UppercaseTitle from '../../Components/UppercaseTitle';\nimport FullWidthBox from '../../Components/FullWidthBox';\n\n// import AtAGlance from './AtAGlance';\nimport About from './About';\n\nimport jsonData from '../../section_data.json';\n\nimport * as Tracking from '../../Utils/Tracking';\nimport parse from 'html-react-parser';\nimport { replacePlainHTMLWithMuiComponents } from '../../Utils/Utils';\n\nimport Map from './Map';\n\nimport CurrentAQIGrid from '../../Components/CurrentAQIGrid';\nimport { fetchAndprocessCurrentSensorsData } from '../../Utils/ApiUtils';\n\nimport LaunchIcon from '@mui/icons-material/Launch';\nimport GetInTouch from './GetInTouch';\n\nfunction Home({ themePreference, temperatureUnitPreference, title }) {\n  // Update the page's title\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n\n  // useState for home page data\n  // eslint-disable-next-line no-unused-vars\n  const [_, setCurrentPage, __, setChartsTitlesList] = useContext(LinkContext);\n\n  // set underline link to home\n  useEffect(() => {\n    setCurrentPage('home');\n    setChartsTitlesList([]);\n  }, [setCurrentPage, setChartsTitlesList]);\n\n  // Fetch public NYUAD sensors data\n  const [nyuadCurrentSensorData, setNyuadCurrentSensorData] = useState({});\n\n  useEffect(() => {\n    let apiUrl = 'https://api.citiesair.com/current/nyuad';\n\n    fetchAndprocessCurrentSensorsData(apiUrl)\n      .then((data) => {\n        setNyuadCurrentSensorData(data)\n      })\n      .catch((error) => console.log(error));\n  }, []);\n\n  return (\n    <Box width=\"100%\">\n      <FullWidthBox>\n        <Container sx={{ pt: 3, pb: 4 }}>\n          <UppercaseTitle text=\"real-time air quality at NYUAD\" />\n          <Typography variant='body1' color='text.secondary' sx={{ mt: -2, mb: 2 }}>\n            PM2.5 (Particulate Matter Smaller Than 2.5 Micrometer)\n          </Typography>\n\n          <Grid container justifyContent=\"center\" spacing={3}>\n            <Grid item textAlign=\"center\" xs={10}>\n              <CurrentAQIGrid\n                currentSensorsData={nyuadCurrentSensorData}\n                isScreen={false}\n                orderOfItems={[3, 1, 2]}\n                temperatureUnitPreference={temperatureUnitPreference}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <Stack width=\"fit-content\" alignItems=\"center\" margin=\"auto\">\n                <Button\n                  variant='contained'\n                  sx={{ width: \"fit-content\", mb: 1 }}\n                  href=\"https://citiesdashboard.com/project/air-quality\"\n                  target=\"blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <LaunchIcon sx={{ fontSize: '0.8rem' }} />&nbsp;NYUAD Dashboard (Public Access)\n                </Button>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  See detailed analysis of historical air quality data at NYUAD\n                </Typography>\n              </Stack>\n            </Grid>\n          </Grid>\n\n\n        </Container>\n      </FullWidthBox>\n\n      <FullWidthBox sx={{ backgroundColor: 'customAlternateBackground' }}>\n        <Container sx={{ py: 3 }}>\n          <UppercaseTitle text=\"public outdoor stations\" />\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            {parse(jsonData.publicOutdoorStations.content, {\n              replace: replacePlainHTMLWithMuiComponents,\n            })}\n          </Typography>\n        </Container>\n        <Map themePreference={themePreference} temperatureUnitPreference={temperatureUnitPreference} />\n\n      </FullWidthBox>\n\n      <Divider />\n\n      <FullWidthBox id={jsonData.about.id} sx={{ pt: 3, pb: 4 }}>\n        <Container>\n          <About />\n        </Container>\n      </FullWidthBox>\n\n      <Divider />\n\n      <FullWidthBox id={jsonData.getInTouch.id} sx={{ pt: 3, pb: 4 }}>\n        <Container>\n          <GetInTouch />\n        </Container>\n      </FullWidthBox>\n\n    </Box >\n  );\n}\n\nexport default Home;\n"],"names":["UppercaseTitle","text","capitalizePhrase","jsonData","Stack","spacing","element","index","Paper","elevation","sx","p","Typography","variant","color","parse","mainText","replace","replacePlainHTMLWithMuiComponents","reference","ExpandableSection","title","content","px","StyledLeafletPopup","styled","Popup","theme","display","MapPlaceholder","getTileUrl","tileTheme","themePreference","isMiniMap","ThemePreferences","tileAccessToken","centerCoordinate","maxBounds","POSITION_CLASSES","bottomleft","bottomright","topleft","topright","temperatureUnitPreference","useState","mapData","setMapData","useTheme","MinimapBounds","parentMap","zoom","minimap","useMap","onClick","useCallback","e","setView","latlng","getZoom","useMapEvent","getBounds","bounds","setBounds","onChange","getCenter","handlers","useMemo","move","useEventHandlers","instance","Rectangle","pathOptions","weight","fillColor","MinimapControl","position","mapZoom","MIN_ZOOM","MapContainer","style","height","width","maxWidth","maxHeight","center","dragging","doubleClickZoom","scrollWheelZoom","attributionControl","zoomControl","TileLayer","url","accessToken","Object","entries","map","key","location","CircleMarker","sensor","coordinates","latitude","longitude","current","radius","fillOpacity","positionClass","className","useEffect","fetchDataFromURL","then","data","now","Date","currentTimestamp","timestamp","lastSeenInHours","Math","round","sensor_status","calculateSensorStatus","aqiObject","convertToAQI","aqiCategory","AQIdatabase","aqi_category_index","aqi","category","SensorStatus","lightThemeColor","CustomThemes","markerIcon","L","html","Box","breakpoints","down","fontSize","placeholder","attribution","minZoom","maxZoom","AttributionControl","prefix","Marker","icon","direction","Link","fontWeight","href","public_iqAir_station_link","target","rel","palette","primary","main","underline","public_iqAir_station_name","Launch","src","IQAir_Logo","lineHeight","component","gutterBottom","Thermostat","verticalAlign","getFormattedTemperature","rawTemp","temperature","currentUnit","TemperatureUnits","returnUnit","WaterDrop","rel_humidity","mt","getFormattedElapsedTimeFromNow","toLocaleString","textTransform","pb","document","useContext","LinkContext","setCurrentPage","setChartsTitlesList","nyuadCurrentSensorData","setNyuadCurrentSensorData","fetchAndprocessCurrentSensorsData","catch","error","console","log","FullWidthBox","Container","pt","mb","Grid","container","justifyContent","item","textAlign","xs","CurrentAQIGrid","currentSensorsData","isScreen","orderOfItems","alignItems","margin","Button","backgroundColor","py","Divider","id"],"sourceRoot":""}