{"version":3,"file":"static/js/538.35ab6f54.chunk.js","mappings":"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","sources":["Components/CurrentAQIGrid.jsx","Pages/Screen/RecentHistoricalGraph.jsx","Pages/Screen/Screen.jsx"],"sourcesContent":["// disable eslint for this file\r\n/* eslint-disable */\r\nimport { Box, Grid, Typography, Skeleton, Stack } from '@mui/material';\r\nimport ThermostatIcon from '@mui/icons-material/Thermostat';\r\nimport WaterDropIcon from '@mui/icons-material/WaterDrop';\r\nimport ErrorIcon from '@mui/icons-material/Error';\r\n\r\nimport { returnSensorStatus, SensorStatus, getFormattedElapsedTimeFromNow } from '../Pages/Screen/ScreenUtils';\r\nimport { TemperatureUnits, getFormattedTemperature, calculateHeatIndex } from \"../Pages/Screen/TemperatureUtils\";\r\n\r\nimport AQIdatabase from '../Utils/AirQualityIndexHelper';\r\n\r\nimport CustomThemes from '../Themes/CustomThemes';\r\n\r\nconst CurrentAQIGrid = (props) => {\r\n  const { currentSensorsData, temperatureUnitPreference, isScreen = true, orderOfItems } = props;\r\n\r\n  const getGridItemSize = (numOfItems) => {\r\n    return {\r\n      xs: Math.max(12 / numOfItems, 6),\r\n      sm: Math.max(12 / numOfItems, 4),\r\n      lg: isScreen ? (12 / numOfItems) : Math.min(5, Math.max(12 / numOfItems, 3))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      justifyContent=\"center\"\r\n      sx={{\r\n        '& .MuiSvgIcon-root': {\r\n          verticalAlign: 'sub',\r\n          fontSize: isScreen ? null : '1rem'\r\n        },\r\n        '& *': {\r\n          fontWeight: '500'\r\n        },\r\n        '& .condensedFont': {\r\n          fontFamily: 'IBM Plex Sans Condensed, sans-serif !important',\r\n          '& *': {\r\n            fontFamily: 'IBM Plex Sans Condensed, sans-serif !important'\r\n          }\r\n        }\r\n      }}\r\n    >\r\n      {\r\n        currentSensorsData ?\r\n\r\n          (Object.entries(currentSensorsData).map(([key, sensorData], index) => (\r\n            <Grid\r\n              item\r\n              order={orderOfItems && orderOfItems[index]}\r\n              key={key}\r\n              {...getGridItemSize(Object.keys(currentSensorsData).length)}\r\n              sx={\r\n                sensorData.current?.sensor_status !== SensorStatus.active &&\r\n                { '& *': { color: `${CustomThemes.universal.palette.inactiveSensor}` } }\r\n              }\r\n            >\r\n              <Box sx={{ '& *': { color: sensorData.current?.color } }}>\r\n                <Typography variant={isScreen ? \"h4\" : 'h5'} fontWeight=\"500\" className='condensedFont'>\r\n                  {sensorData.sensor?.location_long || sensorData.sensor?.location_short || 'No Location Name'}\r\n                </Typography>\r\n                <Typography variant={isScreen ? \"h1\" : 'h2'} fontWeight=\"500\" lineHeight={isScreen ? 0.8 : 0.9}>\r\n                  {sensorData.current?.aqi || '--'}\r\n                </Typography>\r\n                <Typography variant={isScreen ? \"h4\" : 'h5'} fontWeight=\"500\" className='condensedFont'>\r\n                  {sensorData.current?.category || '--'}\r\n                </Typography>\r\n              </Box>\r\n\r\n              <Box sx={{\r\n                '& *': {\r\n                  color:\r\n                    isScreen ? (\r\n                      sensorData.current?.sensor_status === SensorStatus.active ?\r\n                        '#c8dcff' : CustomThemes.universal.palette.inactiveSensor\r\n                    )\r\n                      : 'text.secondary'\r\n                }, mt: isScreen ? 2 : 1\r\n              }} className='condensedFont'>\r\n                <Typography variant={isScreen ? \"h6\" : 'body1'}>\r\n                  <ThermostatIcon />\r\n                  {\r\n                    getFormattedTemperature({\r\n                      rawTemp: sensorData.current?.temperature,\r\n                      currentUnit: TemperatureUnits.celsius,\r\n                      returnUnit: temperatureUnitPreference\r\n                    })\r\n                  }\r\n                  &nbsp;&nbsp;-&nbsp;\r\n                  <WaterDropIcon sx={{ transform: 'scaleX(0.9)' }} />\r\n                  {sensorData.current?.rel_humidity ? Math.round(sensorData.current?.rel_humidity) : \"--\"}%\r\n                </Typography>\r\n                {\r\n                  // Show heat index for selected location types\r\n                  ['outdoors', 'indoors_gym'].includes(sensorData.sensor?.location_type) &&\r\n                  <Typography variant={isScreen ? \"body1\" : 'body2'} sx={{ fontWeight: '300 !important' }}>\r\n                    {calculateHeatIndex({\r\n                      rawTemp: sensorData.current?.temperature,\r\n                      currentUnit: TemperatureUnits.celsius,\r\n                      rel_humidity: sensorData.current?.rel_humidity,\r\n                      returnUnit: temperatureUnitPreference\r\n                    })}\r\n                  </Typography>\r\n                }\r\n                {\r\n                  displayLastUpdateAndSensorStatus({ sensorData, isScreen })\r\n                }\r\n              </Box>\r\n\r\n              {\r\n                // Display outdoor-indoor comparison if both sensors are active\r\n                sensorData.sensor_status !== SensorStatus.active &&\r\n                <Typography variant={isScreen ? \"h6\" : 'body1'} className=\"condensedFont\">\r\n                  {returnSensorStatus(sensorData)}\r\n                </Typography>\r\n              }\r\n            </Grid>\r\n          ))\r\n          )\r\n          :\r\n          (\r\n            <Stack direction=\"column\" alignItems=\"center\" justifyContent=\"center\">\r\n              <Skeleton variant='text' sx={{ width: '15rem', fontSize: '2rem' }} />\r\n              <Skeleton variant='text' sx={{ width: '5rem', fontSize: '4rem', my: -1.5 }} />\r\n              <Skeleton variant='text' sx={{ width: '10rem', fontSize: '2rem' }} />\r\n              <Skeleton variant='text' sx={{ width: '7.5rem', fontSize: '1rem' }} />\r\n              <Skeleton variant='text' sx={{ width: '7.5rem', fontSize: '1rem' }} />\r\n            </Stack>\r\n          )\r\n      }\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst displayLastUpdateAndSensorStatus = ({ sensorData, isScreen }) => {\r\n  if (isScreen && sensorData.current.sensor_status === SensorStatus.active) return null;\r\n  else\r\n    return (\r\n      <Typography\r\n        variant={isScreen ? 'h6' : 'caption'}\r\n        sx={{\r\n          mt: 0,\r\n          fontWeight: isScreen && '500 !important'\r\n        }}\r\n      >\r\n        {\r\n          sensorData.current?.sensor_status !== SensorStatus.active\r\n          &&\r\n          <>\r\n            <ErrorIcon\r\n              sx={{\r\n                '& *': {\r\n                  color: `${AQIdatabase[3].lightThemeColor} !important`\r\n                },\r\n                mr: 0.5\r\n              }} />\r\n            Offline.&nbsp;\r\n          </>\r\n        }\r\n        Last update:\r\n        {(sensorData.current?.timestamp || sensorData.sensor?.last_seen)\r\n          ? ` ${getFormattedElapsedTimeFromNow(sensorData.current?.timestamp || sensorData.sensor?.last_seen)} ago`\r\n          : '--'}\r\n      </Typography>\r\n    )\r\n}\r\n\r\nexport default CurrentAQIGrid;\r\n","// disable eslint for this file\n/* eslint-disable */\nimport { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\n\nimport convertToAQI from '../../Utils/AirQualityIndexCalculator';\nimport AQIdatabase from '../../Utils/AirQualityIndexHelper';\nimport { SensorStatus } from './ScreenUtils';\nimport { Box } from '@mui/material';\n\nimport { capitalizeFirstCharacter, areDOMOverlapped } from './ScreenUtils';\n\nimport CustomThemes from '../../Themes/CustomThemes';\n\nconst numberOfHoursForHistoricalData = 6;\n\nconst RecentHistoricalGraph = (props) => {\n  const { data } = props;\n\n  const [firstDraw, setFirstDraw] = useState(true);\n\n  const graphContainer = useRef();\n  const layerBackground = useRef();\n  const layerTexts = useRef();\n  const layerXaxisWrapper = useRef();\n  const layerLines = useRef();\n\n  let svg, width, height, xAxis, yAxis;\n  let maxAQItoDisplay = 200;\n  const xTickPeriod = 120; // xAxis ticks every 2 hour\n  const dotRadius = 10;\n  const margin = { top: 30, right: 80, bottom: 0, left: 70 };\n\n  // Set up D3's line generator\n  const lineGenerator = d3\n    .line()\n    .x(function (d) {\n      return xAxis(d.timestamp);\n    }) // set the x values for the line generator\n    .y(function (d) {\n      return yAxis(d.aqi);\n    }) // set the y values for the line generator\n    .curve(d3.curveCardinal.tension(0)); // apply smoothing to the line\n\n  useEffect(() => {\n    if (!data) return;\n    if (!graphContainer.current) return;\n    if (!layerBackground.current) return;\n    if (!layerTexts.current) return;\n    if (!layerXaxisWrapper.current) return;\n    if (!layerLines.current) return;\n\n    svg = d3.select(graphContainer.current);\n    width = graphContainer.current.clientWidth;\n    height = graphContainer.current.clientHeight - margin.top;\n\n    // Clear all previous drawings\n    d3.select(layerBackground.current).selectAll(\"*\").remove();\n    d3.select(layerTexts.current).selectAll(\"*\").remove();\n    d3.select(layerXaxisWrapper.current).selectAll(\"*\").remove();\n    d3.select(layerLines.current).selectAll(\"*\").remove();\n\n    d3.select(layerBackground.current)\n      .attr(\"opacity\", 0.5);\n    d3.select(layerTexts.current)\n      .attr(\"filter\", \"brightness(0.8) contrast(1.2) saturate(1.2)\");\n\n    Object.entries(data).forEach(([key, sensorData]) => {\n      // Create the JS date object and calculate AQI from raw measurements\n      sensorData.historical?.forEach(function (d) {\n        d.timestamp = new Date(d.timestamp);\n        d.aqi = convertToAQI(d[\"pm2.5\"]).aqi;\n      });\n\n      // Calculate the maximum value AQI of this sensor\n      if (sensorData.historical && Array.isArray(sensorData.historical)) {\n        const max = d3.max(sensorData.historical, function (d) {\n          return d.aqi;\n        });\n        if (max > maxAQItoDisplay) maxAQItoDisplay = max;\n      }\n    });\n\n    // Calculate the maximum AQI for the y-axis to display\n    maxAQItoDisplay = Math.ceil(maxAQItoDisplay / 50) * 50; // round to the nearest 50 points\n\n    for (let category of AQIdatabase) {\n      if (maxAQItoDisplay >= category.aqiUS.low && maxAQItoDisplay <= category.aqiUS.high) {\n        maxAQItoDisplay = category.aqiUS.high;\n        break;\n      }\n    };\n\n    // 1. Set up the xAxis domain and range\n    let xAxisMax = new Date();\n    let xAxisMin = new Date();\n    xAxisMin.setHours(xAxisMin.getHours() - numberOfHoursForHistoricalData);\n    xAxis = d3.scaleTime().domain([xAxisMin, xAxisMax]).rangeRound([margin.left, width - margin.right]); // width is inclusive of margin\n\n    // 2. Set up the yAxis domain and range\n    yAxis = d3.scaleLinear().domain([0, maxAQItoDisplay]).range([height + margin.top, margin.top]); // height is already exclusive of margin\n\n    // 7. Add the background category layer and the AQI levels (rectangles) and the grids\n    let font_size = Math.floor((((AQIdatabase[1].aqiUS.high - AQIdatabase[0].aqiUS.high) / maxAQItoDisplay) * height) / 2);\n    let marginText = Math.floor(font_size / 5);\n    // Loop through all the aqi_category and add each category into the graph\n    for (let i = 0; i < AQIdatabase.length; i++) {\n      const category = AQIdatabase[i];\n      if (maxAQItoDisplay <= category.aqiUS.low) break;\n      // Add the rectangles\n      const aqiRange = Math.ceil((category.aqiUS.high - category.aqiUS.low) / 50) * 50;\n      d3.select(layerBackground.current)\n        .append(\"rect\")\n        .attr(\"x\", 0)\n        .attr(\"y\", height - (category.aqiUS.high / maxAQItoDisplay) * height + margin.top)\n        .attr(\"width\", width)\n        .attr(\"height\", aqiRange / maxAQItoDisplay * height)\n        .attr(\"fill\", category.lightThemeColor);\n\n      // Add the AQI categories numbers\n      d3.select(layerTexts.current)\n        .append(\"text\")\n        .attr(\"x\", marginText)\n        .attr(\n          \"y\",\n          height -\n          (category.aqiUS.low / maxAQItoDisplay) * height -\n          3.5 * marginText + margin.top\n        )\n        .attr(\"fill\", category.lightThemeColor)\n        .attr(\"font-size\", font_size)\n        .text(Math.floor(category.aqiUS.low / 50) * 50);\n\n      d3.select(layerTexts.current)\n        .append(\"text\")\n        .attr(\"class\", \"category-text-graph-sm\")\n        .attr(\"x\", marginText + 2)\n        .attr(\n          \"y\",\n          height - (category.aqiUS.low / maxAQItoDisplay) * height - marginText + margin.top\n        )\n        .attr(\"fill\", category.lightThemeColor)\n        .attr(\"font-size\", font_size / 2)\n        .text(category.category);\n    };\n\n    // Add the xAxisWrapper and its texts\n    d3.select(layerXaxisWrapper.current)\n      .append(\"rect\")\n      .attr(\"x\", 0)\n      .attr(\"y\", 0)\n      .attr(\"width\", width)\n      .attr(\"height\", margin.top)\n      .attr(\"fill\", \"white\");\n\n    // 9.2. Add the X Axis on top of the graph, as well as ticks\n    let formatHour = d3.timeFormat(\"%H:%M\");\n    d3.select(layerXaxisWrapper.current)\n      .append(\"g\")\n      .attr(\"transform\", `translate(0,${margin.top})`)\n      .call(\n        d3\n          .axisTop(xAxis)\n          .tickSize(-height) // negative length to make vertical lines\n          .ticks(d3.timeMinute.every(xTickPeriod))\n          .tickFormat(function (d) {\n            return formatHour(d);\n          })\n      )\n      .attr(\"font-size\", font_size / 2.25)\n      .attr(\"color\", CustomThemes.universal.palette.inactiveSensor)\n      .select(\".domain\")\n      .remove();\n    d3.select(layerXaxisWrapper.current)\n      .selectAll('line')\n      .attr('stroke', 'white')\n      .attr('stroke-width', 2)\n      .attr('opacity', 0.5);\n\n    Object.entries(data).forEach(([key, sensorData]) => {\n      // Append the line chart for this location\n      d3.select(layerLines.current)\n        .append(\"path\")\n        .datum(sensorData.historical || [])\n        .attr(\"x\", margin.left)\n        .attr(\"class\", \"line\")\n        .attr(\"d\", lineGenerator)\n        .attr(\"fill\", \"transparent\")\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-width\", \"5px\")\n        .attr(\"opacity\", sensorData.sensor?.location_type === \"outdoors\" ? 1 : 0.5);\n\n      // Append the circle marker at the end of this line chart to denote its liveness\n      const mostRecentData = sensorData.historical?.length > 0 ? sensorData.historical?.[0] : null;\n      if (mostRecentData) {\n        const aqiObject = AQIdatabase[convertToAQI(mostRecentData[\"pm2.5\"]).aqi_category_index];\n        const markerWrapper = d3.select(layerLines.current)\n          .append(\"g\")\n          .attr(\n            \"transform\",\n            \"translate(\" +\n            xAxis(mostRecentData.timestamp) +\n            \",\" +\n            yAxis(mostRecentData.aqi) +\n            \")\"\n          )\n          .attr(\"fill\",\n            sensorData.current?.sensor_status === SensorStatus.active\n              ? aqiObject.lightThemeColor\n              : CustomThemes.universal.palette.inactiveSensor)\n          ;\n\n        sensorData.current?.sensor_status === SensorStatus.active &&\n          markerWrapper.append(\"circle\")\n            .attr(\"cx\", 0)\n            .attr(\"cy\", 0)\n            .attr(\"filter\", \"brightness(0.5)\")\n            .attr(\"class\", \"pulse-ring\")\n            .attr(\"r\", 2.5 * dotRadius);\n\n        markerWrapper.append(\"circle\")\n          .attr(\"cx\", 0)\n          .attr(\"cy\", 0)\n          .attr(\"stroke\", \"#666\")\n          .attr(\"class\", sensorData.current?.sensor_status === SensorStatus.active && \"pulse-dot\")\n          .attr(\"r\", dotRadius);\n\n        markerWrapper.append(\"text\")\n          .attr(\"class\", \"location-label\")\n          .attr(\"x\", dotRadius * 1.5)\n          .attr(\"y\", 0)\n          .attr(\"fill\", \"black\")\n          .attr(\"alignment-baseline\", \"middle\")\n          .attr(\"text-anchor\", \"left\")\n          .attr(\"font-size\", font_size / 3)\n          .text(capitalizeFirstCharacter(sensorData.sensor?.location_short));\n\n        const locationLabels = document.getElementsByClassName(\"location-label\");\n        for (let i = 1; i < locationLabels.length; i++) {\n          const locationLabel_1 = locationLabels[i - 1];\n          const locationLabel_2 = locationLabels[i];\n          const overlapped = areDOMOverlapped(locationLabel_1.getBoundingClientRect(), locationLabel_2.getBoundingClientRect());\n\n          if (overlapped !== 0) {\n            locationLabel_1.setAttribute(\"y\", overlapped * dotRadius);\n            locationLabel_2.setAttribute(\"y\", - overlapped * dotRadius);\n          }\n        }\n      }\n    });\n\n  }, [data])\n\n  return (\n    <Box\n      sx={{\n        '& .pulse-ring': {\n          animation: 'pulse-ring 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes pulse-ring': {\n            '0%': {\n              transform: 'scale(0.2)'\n            },\n            '80%': {},\n            '100%': {\n              opacity: 0\n            }\n          }\n        },\n        '& .pulse-dot': {\n          animation: 'pulse-dot 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes pulse-dot': {\n            '0%': {\n              transform: 'scale(0.5)'\n            },\n            '50%': {\n              transform: 'scale(1)',\n              filter: 'brightness(1.2) contrast(1.2) saturate(1.2)'\n            },\n            '100%': {\n              transform: 'scale(0.5)'\n            }\n          }\n        }\n      }}\n      width=\"100%\"\n      height=\"100%\"\n    >\n      <svg\n        id=\"recent-historical-graph\"\n        width=\"100%\"\n        height=\"100%\"\n        ref={graphContainer}\n      >\n        <g ref={layerBackground} />\n        <g ref={layerXaxisWrapper} />\n        <g ref={layerTexts} />\n        <g ref={layerLines} />\n      </svg>\n    </Box>\n\n  );\n}\n\nexport default RecentHistoricalGraph;","// disable eslint for this file\r\n/* eslint-disable */\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { UserContext } from '../../ContextProviders/UserContext';\r\n\r\nimport { Box, Grid, Typography, Stack, List, ListItem, ListItemText } from '@mui/material';\r\n\r\nimport CITIESlogoLinkToHome from '../../Components/Header/CITIESlogoLinkToHome';\r\n\r\nimport { SensorStatus, getDomainName, getUrlAfterScreen } from './ScreenUtils';\r\nimport { TemperatureUnits } from \"./TemperatureUtils\";\r\n\r\nimport RecentHistoricalGraph from './RecentHistoricalGraph';\r\n\r\nimport AQIdatabase from '../../Utils/AirQualityIndexHelper';\r\n\r\nimport CustomThemes from '../../Themes/CustomThemes';\r\n\r\nimport QRCode from \"react-qr-code\";\r\n\r\nimport CurrentAQIGrid from '../../Components/CurrentAQIGrid';\r\nimport { EndPoints, fetchAndProcessCurrentSensorsData, getApiUrl } from '../../Utils/ApiUtils';\r\n\r\nconst Screen = ({ title, temperatureUnitPreference }) => {\r\n  const { user } = useContext(UserContext);\r\n  const navigate = useNavigate();\r\n\r\n  // useEffect(() => {\r\n  //   if (user.checkedAuthentication === true && user.authenticated === false) {\r\n  //     navigate('/login');\r\n  //   }\r\n  // }, [user])\r\n\r\n  // Update the page's title\r\n  useEffect(() => {\r\n    document.title = title;\r\n  }, [title]);\r\n\r\n  const [isLayoutReversed, setIsLayoutReversed] = useState();\r\n\r\n  const [data, setData] = useState({});\r\n\r\n  // Tweak the layout of the screen to prevent burn-in\r\n  useEffect(() => {\r\n    // Helper function to change layout of the screen based on current's month\r\n    // (arrange the left and right sections of the screen)\r\n    // to mitigate burn-in if the same static image is displayed over a long period of time\r\n    function returnIsLayoutReversed() {\r\n      let months = [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1]; // 12 months of a year, change the layout every two months\r\n      let now = new Date();\r\n      let thisMonthIndex = now.getMonth(); // get the index of this Month (0-11)\r\n      // Return a boolean value if the layout should be reversed\r\n      return (months[thisMonthIndex] !== 0);\r\n    }\r\n\r\n    setIsLayoutReversed(returnIsLayoutReversed());\r\n\r\n    // Set up an interval to call the function every day\r\n    const oneDayInMilliseconds = 24 * 60 * 60 * 1000;\r\n    const intervalId = setInterval(() => {\r\n      setIsLayoutReversed(returnIsLayoutReversed());\r\n    }, oneDayInMilliseconds);\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  // Fetch air quality data from database\r\n  useEffect(() => {\r\n    const url = getApiUrl({ endpoint: EndPoints.screen });\r\n    if (!url) return;\r\n\r\n    fetchAndProcessCurrentSensorsData(url)\r\n      .then((data) => {\r\n        setData(data)\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        // Check if the error indicates that authentication is required\r\n        navigate('/login');\r\n      });\r\n\r\n    // Create an interval that fetch new data every 5 minute\r\n    const fetchInterval = 5 * 60 * 1000; // 5min\r\n    const intervalId = setInterval(() => {\r\n      fetchAndProcessCurrentSensorsData(apiUrl)\r\n        .then((data) => {\r\n          setData(data)\r\n        })\r\n        .catch((error) => console.log(error))\r\n    },\r\n      fetchInterval);\r\n    // Clean up the interval when the component unmounts\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  const AirQualityComparison = () => {\r\n    // Only display air quality comparison if every sensor is currently active\r\n    if (!Object.values(data).every((sensorData) => sensorData.current?.sensor_status === SensorStatus.active)) return null;\r\n\r\n    let outdoorsAQI, indoorsAQI;\r\n    // Don't display comparison if outdoor air is good\r\n    for (let i = 0; i < Object.values(data).length; i++) {\r\n      const sensorData = Object.values(data)[i];\r\n      if (sensorData.sensor?.location_type === \"outdoors\") {\r\n        outdoorsAQI = sensorData.current.aqi;\r\n        if (outdoorsAQI <= AQIdatabase[0].aqiUS.high) return null;\r\n      }\r\n      else indoorsAQI = sensorData.current.aqi;\r\n    }\r\n\r\n    const ratio = outdoorsAQI / indoorsAQI;\r\n    let comparison;\r\n    if (ratio >= 2) comparison = `${parseFloat(ratio).toFixed(1)} times`;\r\n    else if (ratio > 1.2) comparison = `${Math.round(100 * ((outdoorsAQI - indoorsAQI) / indoorsAQI))}%`;\r\n    else return null;\r\n\r\n    return (\r\n      <ListItem>\r\n        <ListItemText primary={\r\n          <>Indoors air is\r\n            <Typography\r\n              component=\"span\"\r\n              color={`${AQIdatabase[0].lightThemeColor} !important`}\r\n            >\r\n              {` ${comparison} `}\r\n            </Typography>\r\n            better than outdoors</>\r\n        } />\r\n      </ListItem>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      alignContent=\"stretch\"\r\n      alignItems=\"stretch\"\r\n      height=\"100vh\"\r\n      sx={{\r\n        overflow: 'hidden',\r\n        background: \"white\",\r\n        '& *': {\r\n          fontWeight: '500 !important'\r\n        },\r\n        '& .condensedFont': {\r\n          fontFamily: 'IBM Plex Sans Condensed, sans-serif !important',\r\n          '& *': {\r\n            fontFamily: 'IBM Plex Sans Condensed, sans-serif !important'\r\n          }\r\n        },\r\n        '& .flashingRed': {\r\n          '& .MuiTypography-root ': {\r\n            color: `${AQIdatabase[3].lightThemeColor} !important`,\r\n            opacity: 0.8\r\n          },\r\n          color: `${AQIdatabase[3].lightThemeColor} !important`,\r\n          animation: 'flashingRed 3s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\r\n          '@keyframes flashingRed': {\r\n            '0%': {\r\n              opacity: 1\r\n            },\r\n            '50%': {\r\n              opacity: 0.5\r\n            },\r\n            '100%': {\r\n              opacity: 1\r\n            }\r\n          }\r\n        }\r\n      }}\r\n    >\r\n      <Grid\r\n        item\r\n        xs={6}\r\n        sx={{\r\n          py: 3,\r\n          px: 2,\r\n          order: isLayoutReversed ? 1 : 0,\r\n          background: '#212529'\r\n        }}\r\n      >\r\n        <Stack\r\n          direction=\"column\"\r\n          justifyContent=\"space-between\"\r\n          height=\"100%\"\r\n          textAlign=\"center\"\r\n        >\r\n          <Box>\r\n            <Typography variant=\"h4\" fontWeight=\"500\" color=\"white\">\r\n              PM2.5 AIR QUALITY INDEX\r\n            </Typography>\r\n            <Typography variant=\"h5\" className='condensedFont' color={CustomThemes.universal.palette.inactiveSensor}>\r\n              Particulate Matter &lt; 2.5μm\r\n            </Typography>\r\n          </Box>\r\n\r\n          <Grid\r\n            container\r\n            justifyContent=\"space-around\"\r\n          >\r\n            <CurrentAQIGrid currentSensorsData={data} temperatureUnitPreference={temperatureUnitPreference} />\r\n          </Grid>\r\n\r\n          <List className='condensedFont'\r\n            sx={{\r\n              listStyleType: 'disclosure-closed',\r\n              '& .MuiTypography-root': {\r\n                fontSize: '1.5rem',\r\n              },\r\n              '& .MuiListItem-root': {\r\n                display: 'list-item',\r\n                ml: 3,\r\n                p: 0,\r\n                pr: 3,\r\n              },\r\n              '& .MuiTypography-root, .MuiListItem-root': {\r\n                color: CustomThemes.universal.palette.inactiveSensor\r\n              }\r\n            }}>\r\n            <AirQualityComparison />\r\n            {\r\n              Object.entries(data).map(([key, sensorData]) => (\r\n                sensorData.current?.healthSuggestion &&\r\n                <ListItem\r\n                  key={key}\r\n                  className={sensorData.current?.aqi >= AQIdatabase[2].aqiUS.low && 'flashingRed'}\r\n                >\r\n                  <ListItemText\r\n                    primary={sensorData.current?.healthSuggestion}\r\n                  />\r\n                </ListItem>\r\n              ))\r\n            }\r\n          </List>\r\n        </Stack>\r\n      </Grid>\r\n\r\n      <Grid item xs={6} sx={{ order: isLayoutReversed ? 0 : 1 }}>\r\n        <Box\r\n          sx={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            right: !isLayoutReversed && 0,\r\n            left: isLayoutReversed && 0,\r\n            width: '5vw',\r\n            height: '5vw',\r\n            m: 1\r\n          }}\r\n        >\r\n          <CITIESlogoLinkToHome />\r\n        </Box>\r\n        <Grid\r\n          container\r\n          alignContent=\"space-between\"\r\n          justifyContent=\"center\"\r\n          height=\"100%\"\r\n          textAlign=\"center\"\r\n        >\r\n          <Grid item xs={12} sx={{ pt: 3, px: 2 }}>\r\n            <Typography variant=\"h4\" fontWeight=\"500\" sx={{ color: 'black' }}>\r\n              AN INITIATIVE BY CITIESair\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <Box height=\"auto\" width=\"100%\">\r\n              <QRCode\r\n                size={256}\r\n                style={{ height: \"auto\", maxWidth: \"100%\", width: \"100%\" }}\r\n                value={\r\n                  `${getDomainName(document.location.href)}?source=${getUrlAfterScreen(document.location.href)}`\r\n                } viewBox={`0 0 256 256`}\r\n              />\r\n            </Box>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            height=\"70%\"\r\n            className='condensedFont'\r\n            sx={{ '& *': { fontWeight: '600 !important' } }}\r\n          >\r\n            <RecentHistoricalGraph data={data} />\r\n          </Grid>\r\n        </Grid>\r\n\r\n      </Grid>\r\n    </Grid >\r\n  );\r\n};\r\n\r\nexport default Screen;\r\n"],"names":["displayLastUpdateAndSensorStatus","sensorData","isScreen","current","sensor_status","SensorStatus","variant","sx","mt","fontWeight","color","AQIdatabase","mr","timestamp","sensor","last_seen","getFormattedElapsedTimeFromNow","props","currentSensorsData","temperatureUnitPreference","orderOfItems","container","justifyContent","verticalAlign","fontSize","fontFamily","Object","entries","map","index","numOfItems","key","item","order","keys","length","xs","Math","max","sm","lg","min","CustomThemes","className","location_long","location_short","lineHeight","aqi","category","getFormattedTemperature","rawTemp","temperature","currentUnit","TemperatureUnits","returnUnit","transform","rel_humidity","round","includes","location_type","calculateHeatIndex","returnSensorStatus","direction","alignItems","width","my","height","xAxis","yAxis","data","useState","graphContainer","useRef","layerBackground","layerTexts","layerXaxisWrapper","layerLines","maxAQItoDisplay","margin","lineGenerator","d3","x","d","y","curve","useEffect","clientWidth","clientHeight","selectAll","remove","attr","forEach","historical","Date","convertToAQI","Array","isArray","ceil","aqiUS","low","high","xAxisMax","xAxisMin","setHours","getHours","domain","rangeRound","range","font_size","floor","marginText","i","aqiRange","append","lightThemeColor","text","formatHour","call","tickSize","ticks","tickFormat","select","datum","mostRecentData","aqiObject","aqi_category_index","markerWrapper","dotRadius","capitalizeFirstCharacter","locationLabels","document","getElementsByClassName","locationLabel_1","locationLabel_2","overlapped","areDOMOverlapped","getBoundingClientRect","setAttribute","Box","animation","opacity","filter","id","ref","title","navigate","useContext","UserContext","user","useNavigate","isLayoutReversed","setIsLayoutReversed","setData","returnIsLayoutReversed","getMonth","intervalId","setInterval","clearInterval","url","getApiUrl","endpoint","EndPoints","fetchAndProcessCurrentSensorsData","then","catch","error","console","log","apiUrl","AirQualityComparison","values","every","outdoorsAQI","indoorsAQI","comparison","ratio","parseFloat","toFixed","ListItem","ListItemText","primary","Typography","component","Grid","alignContent","overflow","background","py","px","Stack","textAlign","CurrentAQIGrid","List","listStyleType","display","ml","p","pr","healthSuggestion","position","top","right","left","m","CITIESlogoLinkToHome","pt","size","style","maxWidth","value","getDomainName","location","href","getUrlAfterScreen","viewBox"],"sourceRoot":""}