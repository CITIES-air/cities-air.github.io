{"version":3,"file":"static/js/442.994463ac.chunk.js","mappings":"uVAeA,MAwSA,EAtS+BA,IAC7B,MAAM,KAAEC,GAASD,EAEXE,GAAiBC,EAAAA,EAAAA,UACjBC,GAAkBD,EAAAA,EAAAA,UAClBE,GAAaF,EAAAA,EAAAA,UACbG,GAAoBH,EAAAA,EAAAA,UACpBI,GAAaJ,EAAAA,EAAAA,UAEnB,IAAIK,EAAKC,EAAOC,EAAQC,EAAOC,EAC3BC,EAAkB,IACtB,MAEMC,EAAgB,GAAhBA,EAA2B,GAA3BA,EAAgD,GAGhDC,EAAgBC,EAAAA,MAEnBC,GAAE,SAAUC,GACX,OAAOP,EAAMO,EAAEC,UACjB,IACCC,GAAE,SAAUF,GACX,OAAON,EAAMM,EAAEG,IAAIC,IACrB,IACCC,MAAMP,EAAAA,IAAiBQ,QAAQ,IA4NlC,OA1NAC,EAAAA,EAAAA,YAAU,KACR,IAAKxB,EAAM,OACX,IAAKC,EAAewB,QAAS,OAC7B,IAAKtB,EAAgBsB,QAAS,OAC9B,IAAKrB,EAAWqB,QAAS,OACzB,IAAKpB,EAAkBoB,QAAS,OAChC,IAAKnB,EAAWmB,QAAS,OAEzBlB,EAAMQ,EAAAA,GAAUd,EAAewB,SAC/BjB,EAAQP,EAAewB,QAAQC,YAC/BjB,EAASR,EAAewB,QAAQE,aAAed,EAG/CE,EAAAA,GAAUZ,EAAgBsB,SAASG,UAAU,KAAKC,SAClDd,EAAAA,GAAUX,EAAWqB,SAASG,UAAU,KAAKC,SAC7Cd,EAAAA,GAAUV,EAAkBoB,SAASG,UAAU,KAAKC,SACpDd,EAAAA,GAAUT,EAAWmB,SAASG,UAAU,KAAKC,SAE7Cd,EAAAA,GAAUZ,EAAgBsB,SACvBK,KAAK,UAAW,IACnBf,EAAAA,GAAUX,EAAWqB,SAClBK,KAAK,SAAU,+CAElBC,OAAOC,QAAQhC,GAAMiC,SAAQC,IAAwB,IAADC,EAAA,IAArBC,EAAKC,GAAWH,EAO7C,GALqB,QAArBC,EAAAE,EAAWC,kBAAU,IAAAH,GAArBA,EAAuBF,SAAQ,SAAUhB,GACvCA,EAAEC,UAAY,IAAIqB,KAAKtB,EAAEC,UAC3B,IAGImB,EAAWC,YAAcE,MAAMC,QAAQJ,EAAWC,YAAa,CACjE,MAAMI,EAAM3B,EAAAA,IAAOsB,EAAWC,YAAY,SAAUrB,GAClD,OAAOA,EAAEG,IAAIC,GACf,IACIqB,EAAM9B,IAAiBA,EAAkB8B,EAC/C,KAIF9B,EAAoD,GAAlC+B,KAAKC,KAAKhC,EAAkB,IAE9C,IAAK,IAAIiC,KAAYC,EAAAA,EACnB,GAAIlC,GAAmBiC,EAASE,MAAMC,KAAOpC,GAAmBiC,EAASE,MAAME,KAAM,CACnFrC,EAAkBiC,EAASE,MAAME,OAASC,IAAWtC,EAAkBiC,EAASE,MAAME,KACtF,KACF,CAIF,IAAIE,EAAW,IAAIZ,KACfa,EAAW,IAAIb,KACnBa,EAASC,SAASD,EAASE,WA/EQ,GAgFnC5C,EAAQK,EAAAA,KAAewC,OAAO,CAACH,EAAUD,IAAWK,WAAW,CAAC3C,EAAaL,EAAQK,IAGrFF,EAAQI,EAAAA,MAAiBwC,OAAO,CAAC,EAAG3C,IAAkB6C,MAAM,CAAChD,EAASI,EAAYA,IAGlF,IAAI6C,EAAYf,KAAKD,IACnBC,KAAKgB,OAAQb,EAAAA,EAAY,GAAGC,MAAME,KAAOH,EAAAA,EAAY,GAAGC,MAAME,MAAQrC,EAAmBH,EAAS,GAClG,IAEEmD,EAAajB,KAAKgB,MAAMD,EAAY,GAExC,IAAK,IAAIG,EAAI,EAAGA,EAAIf,EAAAA,EAAYgB,OAAQD,IAAK,CAC3C,MAAMhB,EAAWC,EAAAA,EAAYe,GACvBE,EAAQlB,EAASE,MAAME,OAASC,IAAWtC,EAAkBiC,EAASE,MAAME,KAC5Ee,EAAQnB,EAASE,MAAMC,IAE7B,GAAIpC,GAAmBoD,EAAO,MAG9B,MAAMC,EAA6C,GAAlCtB,KAAKC,MAAMmB,EAAQC,GAAS,IAC7CjD,EAAAA,GAAUZ,EAAgBsB,SACvByC,OAAO,QACPpC,KAAK,IAAK,GACVA,KAAK,IAAKrB,EAAUsD,EAAQnD,EAAmBH,EAASI,GACxDiB,KAAK,QAAStB,GACdsB,KAAK,SAAUmC,EAAWrD,EAAkBH,GAC5CqB,KAAK,OAAQe,EAASsB,MAAMC,OAG/BrD,EAAAA,GAAUX,EAAWqB,SAClByC,OAAO,QACPpC,KAAK,IAAK8B,GACV9B,KACC,IACArB,EACCoC,EAASE,MAAMC,IAAMpC,EAAmBH,EACzC,IAAMmD,EAAa/C,GAEpBiB,KAAK,OAAQe,EAASsB,MAAMC,OAC5BtC,KAAK,YAAa4B,GAClBW,KAA2C,GAAtC1B,KAAKgB,MAAMd,EAASE,MAAMC,IAAM,KAExCjC,EAAAA,GAAUX,EAAWqB,SAClByC,OAAO,QACPpC,KAAK,QAAS,0BACdA,KAAK,IAAK8B,EAAa,GACvB9B,KACC,IACArB,EAAUoC,EAASE,MAAMC,IAAMpC,EAAmBH,EAASmD,EAAa/C,GAEzEiB,KAAK,OAAQe,EAASsB,MAAMC,OAC5BtC,KAAK,YAAa4B,EAAY,GAC9BW,KAAKxB,EAASA,SACnB,CAGA9B,EAAAA,GAAUV,EAAkBoB,SACzByC,OAAO,QACPpC,KAAK,IAAK,GACVA,KAAK,IAAK,GACVA,KAAK,QAAStB,GACdsB,KAAK,SAAUjB,GACfiB,KAAK,OAAQ,SAGhB,IAAIwC,EAAavD,EAAAA,IAAc,SAC/BA,EAAAA,GAAUV,EAAkBoB,SACzByC,OAAO,KACPpC,KAAK,YAAY,eAADyC,OAAiB1D,EAAU,MAC3C2D,KACCzD,EAAAA,IACWL,GACR+D,UAAUhE,GACViE,MAAM3D,EAAAA,IAAc4D,MA7IT,MA8IXC,YAAW,SAAU3D,GACpB,OAAOqD,EAAWrD,EACpB,KAEHa,KAAK,YAAarB,EAAS,IAC3BqB,KAAK,QAAS+C,EAAAA,EAAaC,UAAUC,QAAQC,gBAC7CC,OAAO,WACPpD,SACHd,EAAAA,GAAUV,EAAkBoB,SACzBG,UAAU,QACVE,KAAK,SAAU,SACfA,KAAK,eAAgB,GACrBA,KAAK,UAAW,IAEnBC,OAAOC,QAAQhC,GAAMiC,SAAQiD,IAAwB,IAADC,EAAAC,EAAAC,EAAA,IAArBjD,EAAKC,GAAW6C,EAE7CnE,EAAAA,GAAUT,EAAWmB,SAClByC,OAAO,QACPoB,MAAMjD,EAAWC,YAAc,IAC/BR,KAAK,IAAKjB,GACViB,KAAK,QAAS,QACdA,KAAK,IAAKhB,GACVgB,KAAK,OAAQ,eACbA,KAAK,SAAU,SACfA,KAAK,eAAgB,OACrBA,KAAK,UAAgD,cAApB,QAAjBqD,EAAA9C,EAAWkD,cAAM,IAAAJ,OAAA,EAAjBA,EAAmBK,eAA+B,EAAI,IAGzE,MAAMC,GAAsC,QAArBL,EAAA/C,EAAWC,kBAAU,IAAA8C,OAAA,EAArBA,EAAuBtB,QAAS,EAAyB,QAAxBuB,EAAGhD,EAAWC,kBAAU,IAAA+C,OAAA,EAArBA,EAAwB,GAAK,KACxF,GAAII,EAAgB,CAAC,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAClB,MAAMjD,EAAWC,EAAAA,EAA0B,OAAd2C,QAAc,IAAdA,GAAmB,QAALC,EAAdD,EAAgBrE,WAAG,IAAAsE,OAAL,EAAdA,EAAqBK,eAClD,IAAI5B,EACAtB,IAAUsB,EAAQtB,EAASsB,MAAM6B,EAAAA,EAAiBC,QAEtD,MAAMC,EAAgBnF,EAAAA,GAAUT,EAAWmB,SACxCyC,OAAO,KACPpC,KACC,YACA,aACApB,EAAM+E,EAAevE,WACrB,IACAP,EAAM8E,EAAerE,IAAIC,KACzB,KAEDS,KAAK,QACc,QAAlB6D,EAAAtD,EAAWZ,eAAO,IAAAkE,OAAA,EAAlBA,EAAoBQ,iBAAkBC,EAAAA,EAAaC,OAC/ClC,EACAU,EAAAA,EAAaC,UAAUC,QAAQC,iBAGrB,QAAlBY,EAAAvD,EAAWZ,eAAO,IAAAmE,OAAA,EAAlBA,EAAoBO,iBAAkBC,EAAAA,EAAaC,QACjDH,EAAchC,OAAO,UAClBpC,KAAK,KAAM,GACXA,KAAK,KAAM,GACXA,KAAK,SAAU,mBACfA,KAAK,QAAS,cACdA,KAAK,IAAK,IAEfoE,EAAchC,OAAO,UAClBpC,KAAK,KAAM,GACXA,KAAK,KAAM,GACXA,KAAK,SAAU,QACfA,KAAK,SAA2B,QAAlB+D,EAAAxD,EAAWZ,eAAO,IAAAoE,OAAA,EAAlBA,EAAoBM,iBAAkBC,EAAAA,EAAaC,QAAU,aAC3EvE,KAAK,IA5MI,IA8MZoE,EAAchC,OAAO,QAClBpC,KAAK,QAAS,kBACdA,KAAK,IAAKwE,IACVxE,KAAK,IAAK,GACVA,KAAK,OAAQ,SACbA,KAAK,qBAAsB,UAC3BA,KAAK,cAAe,QACpBA,KAAK,YAAarB,EAAS,IAC3B4D,MAAKkC,EAAAA,EAAAA,IAA0C,QAAlBT,EAACzD,EAAWkD,cAAM,IAAAO,OAAA,EAAjBA,EAAmBU,iBAEpD,MAAMC,EAAiBC,SAASC,uBAAuB,kBACvD,IAAK,IAAI9C,EAAI,EAAGA,EAAI4C,EAAe3C,OAAQD,IAAK,CAC9C,MAAM+C,EAAkBH,EAAe5C,EAAI,GACrCgD,EAAkBJ,EAAe5C,GACjCiD,GAAaC,EAAAA,EAAAA,IAAiBH,EAAgBI,wBAAyBH,EAAgBG,yBAE1E,IAAfF,IACFF,EAAgBK,aAAa,IA/NrB,GA+N0BH,GAClCD,EAAgBI,aAAa,IAhOrB,IAgO4BH,GAExC,CACF,IACA,GAED,CAAC9G,KAGFkH,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CACFC,GAAI,CACF,gBAAiB,CACfC,UAAW,iEACX,wBAAyB,CACvB,KAAM,CACJC,UAAW,cAEb,MAAO,CAAC,EACR,OAAQ,CACNC,QAAS,KAIf,eAAgB,CACdF,UAAW,gEACX,uBAAwB,CACtB,KAAM,CACJC,UAAW,cAEb,MAAO,CACLA,UAAW,WACXE,OAAQ,+CAEV,OAAQ,CACNF,UAAW,iBAKnB9G,MAAM,OACNC,OAAO,OAAMgH,UAEbC,EAAAA,EAAAA,MAAA,OACEC,GAAG,0BACHnH,MAAM,OACNC,OAAO,OACPmH,IAAK3H,EAAewH,SAAA,EAEpBP,EAAAA,EAAAA,KAAA,KAAGU,IAAKzH,KACR+G,EAAAA,EAAAA,KAAA,KAAGU,IAAKvH,KACR6G,EAAAA,EAAAA,KAAA,KAAGU,IAAKxH,KACR8G,EAAAA,EAAAA,KAAA,KAAGU,IAAKtH,QAEN,E,qECvRV,MA2RA,EA3Re4B,IAAgB,IAAf,MAAE2F,GAAO3F,EACvB,MAAM,0BAAE4F,EAAyB,gBAAEC,IAAoBC,EAAAA,EAAAA,YAAWC,EAAAA,IAE5D,KAAEC,IAASF,EAAAA,EAAAA,YAAWG,EAAAA,GACtBC,GAAWC,EAAAA,EAAAA,MAGXC,GADWC,EAAAA,EAAAA,MACaC,UAG9BhH,EAAAA,EAAAA,YAAU,KACRkF,SAASmB,MAAQA,CAAK,GACrB,CAACA,IAEJ,MAAOY,EAAkBC,IAAuBC,EAAAA,EAAAA,aAEzC3I,EAAM4I,IAAWD,EAAAA,EAAAA,UAAS,CAAC,IAGlCnH,EAAAA,EAAAA,YAAU,KAIR,SAASqH,IAKP,OAAmC,IAJtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IACrC,IAAItG,MACWuG,WAG3B,CAEAJ,EAAoBG,KAGpB,MACME,EAAaC,aAAY,KAC7BN,EAAoBG,IAAyB,GAFlB,OAK7B,MAAO,KACLI,cAAcF,EAAW,CAC1B,GACA,KAGHvH,EAAAA,EAAAA,YAAU,KAER,IAAmC,IAA/B0G,EAAKgB,sBAAT,CAEA,IAA2B,IAAvBhB,EAAKiB,cAAwB,CAE/B,GAAgC,GAA5BpH,OAAOqH,KAAKpJ,GAAM8D,OAAa,OAEnC,MAAMuF,GAAMC,EAAAA,EAAAA,IAAU,CAAEC,SAAUC,EAAAA,GAAiBC,SACnD,IAAKJ,EAAK,QAEVK,EAAAA,EAAAA,IAAkCL,GAC/BM,MAAM3J,IACL4I,EAAQ5I,EAAK,IAEd4J,OAAOC,IACNC,QAAQC,IAAIF,EAAM,IAItB,MACMd,EAAaC,aAAY,MAC7BU,EAAAA,EAAAA,IAAkCL,GAC/BM,MAAM3J,IACL4I,EAAQ5I,EAAK,IAEd4J,OAAOC,GAAUC,QAAQC,IAAIF,IAAO,GANnB,KAUtB,MAAO,KACLZ,cAAcF,EAAW,CAE7B,CACEX,EAAS,GAAD7D,OAAIyF,EAAAA,EAAaC,MAAK,KAAA1F,OAAIyF,EAAAA,EAAaE,cAAa,KAAA3F,OAAI+D,GAhClB,CAiChD,GACC,CAACJ,IAEJ,MAAMiC,EAAuBA,KAE3B,IAAKpI,OAAOqI,OAAOpK,GAAM2E,OAAOtC,IAAU,IAAAsD,EAAA,OAAuB,QAAlBA,EAAAtD,EAAWZ,eAAO,IAAAkE,OAAA,EAAlBA,EAAoBQ,iBAAkBC,EAAAA,EAAaC,MAAM,IAAG,OAAO,KAElH,IAAIgE,EAAaC,EAEjB,IAAK,IAAIzG,EAAI,EAAGA,EAAI9B,OAAOqI,OAAOpK,GAAM8D,OAAQD,IAAK,CAAC,IAADsB,EACnD,MAAM9C,EAAaN,OAAOqI,OAAOpK,GAAM6D,GACvC,GAAyC,cAApB,QAAjBsB,EAAA9C,EAAWkD,cAAM,IAAAJ,OAAA,EAAjBA,EAAmBK,gBAErB,GADA6E,EAAchI,EAAWZ,QAAQL,IAC7BiJ,GAAevH,EAAAA,EAAY,GAAGC,MAAME,KAAM,OAAO,UAElDqH,EAAajI,EAAWZ,QAAQL,GACvC,CAEA,MAAMmJ,EAAQF,EAAcC,EAC5B,IAAIE,EACJ,GAAID,GAAS,EAAGC,EAAU,GAAAjG,OAAMkG,WAAWF,GAAOG,QAAQ,GAAE,cACvD,MAAIH,EAAQ,KACZ,OAAO,KADUC,EAAU,GAAAjG,OAAM5B,KAAKgI,OAAcN,EAAcC,GAAcA,EAApC,KAAgD,IACjF,CAEhB,OACEpD,EAAAA,EAAAA,KAAC0D,EAAAA,GAAQ,CAAAnD,UACPP,EAAAA,EAAAA,KAAC2D,EAAAA,EAAY,CAACC,SACZpD,EAAAA,EAAAA,MAAAqD,EAAAA,SAAA,CAAAtD,SAAA,CAAE,kBACAP,EAAAA,EAAAA,KAAC8D,EAAAA,EAAU,CACTC,UAAU,OACV9G,MAAK,GAAAI,OAAKzB,EAAAA,EAAY,GAAGqB,MAAM4D,GAAgB,eAAcN,SAAA,IAAAlD,OAExDiG,EAAU,OACJ,6BAGR,EAIf,OACE9C,EAAAA,EAAAA,MAACwD,EAAAA,GAAI,CACHC,WAAS,EACTC,aAAa,UACbC,WAAW,UACX5K,OAAO,QACP2G,GAAI,CACFkE,SAAU,SACVC,WAAY,QACZ,MAAO,CACLC,WAAY,kBAEd,mBAAoB,CAClBC,WAAY,iDACZ,MAAO,CACLA,WAAY,mDAGhB,iBAAkB,CAChB,yBAA0B,CACxBtH,MAAM,GAADI,OAAKzB,EAAAA,EAAY,GAAGqB,MAAMC,MAAK,eACpCmD,QAAS,IAEXpD,MAAM,GAADI,OAAKzB,EAAAA,EAAY,GAAGqB,MAAMC,MAAK,eACpCiD,UAAW,kEACX,yBAA0B,CACxB,KAAM,CACJE,QAAS,GAEX,MAAO,CACLA,QAAS,IAEX,OAAQ,CACNA,QAAS,MAIfE,SAAA,EAEFP,EAAAA,EAAAA,KAACgE,EAAAA,GAAI,CACHQ,MAAI,EACJC,GAAI,EACJvE,GAAI,CACFwE,GAAI,EACJC,GAAI,EACJC,MAAOrD,EAAmB,EAAI,EAC9B8C,WAAY,WACZ9D,UAEFC,EAAAA,EAAAA,MAACqE,EAAAA,EAAK,CACJC,UAAU,SACVC,eAAe,gBACfxL,OAAO,OACPyL,UAAU,SAAQzE,SAAA,EAElBC,EAAAA,EAAAA,MAACP,EAAAA,EAAG,CAAAM,SAAA,EACFP,EAAAA,EAAAA,KAAC8D,EAAAA,EAAU,CAACmB,QAAQ,KAAKX,WAAW,MAAMrH,MAAM,QAAOsD,SAAC,uBAGxDP,EAAAA,EAAAA,KAAC8D,EAAAA,EAAU,CAACmB,QAAQ,KAAKC,UAAU,gBAAgBjI,MAAOU,EAAAA,EAAaC,UAAUC,QAAQC,eAAeyC,SAAC,wCAK3GP,EAAAA,EAAAA,KAACgE,EAAAA,GAAI,CACHC,WAAS,EACTc,eAAe,eAAcxE,UAE7BP,EAAAA,EAAAA,KAACmF,EAAAA,EAAc,CACbC,mBAAoBtM,EACpB8H,0BAA2BA,EAC3ByE,UAAU,EACVC,KAAMC,EAAAA,EAAmBC,WAI7BhF,EAAAA,EAAAA,MAACiF,EAAAA,EAAI,CAACP,UAAU,gBACdhF,GAAI,CACFwF,cAAe,oBACf,wBAAyB,CACvBC,SAAU,UAEZ,sBAAuB,CACrBC,QAAS,YACTC,GAAI,EACJC,EAAG,EACHC,GAAI,GAEN,2CAA4C,CAC1C9I,MAAOU,EAAAA,EAAaC,UAAUC,QAAQC,iBAExCyC,SAAA,EACFP,EAAAA,EAAAA,KAACiD,EAAoB,IAEnBpI,OAAOC,QAAQhC,GAAMkN,KAAIhI,IAAA,IAAAU,EAAAC,EAAAsH,EAAA,IAAE/K,EAAKC,GAAW6C,EAAA,OACvB,QAAlBU,EAAAvD,EAAWZ,eAAO,IAAAmE,OAAA,EAAlBA,EAAoBwH,oBACpBlG,EAAAA,EAAAA,KAAC0D,EAAAA,GAAQ,CAEPwB,WAA6B,QAAlBvG,EAAAxD,EAAWZ,eAAO,IAAAoE,OAAA,EAAlBA,EAAoBzE,MAAO0B,EAAAA,EAAY,GAAGC,MAAMC,KAAO,cAAcyE,UAEhFP,EAAAA,EAAAA,KAAC2D,EAAAA,EAAY,CACXC,QAA2B,QAApBqC,EAAE9K,EAAWZ,eAAO,IAAA0L,OAAA,EAAlBA,EAAoBC,oBAJ1BhL,EAMI,aAOrBsF,EAAAA,EAAAA,MAACwD,EAAAA,GAAI,CAACQ,MAAI,EAACC,GAAI,EAAGvE,GAAI,CAAE0E,MAAOrD,EAAmB,EAAI,GAAIhB,SAAA,EACxDP,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CACFC,GAAI,CACFiG,SAAU,WACVC,IAAK,EACLC,OAAQ9E,GAAoB,EAC5B+E,KAAM/E,GAAoB,EAC1BjI,MAAO,MACPC,OAAQ,MACRgN,EAAG,GACHhG,UAEFP,EAAAA,EAAAA,KAACwG,EAAAA,EAAoB,OAEvBhG,EAAAA,EAAAA,MAACwD,EAAAA,GAAI,CACHC,WAAS,EACTC,aAAa,gBACba,eAAe,SACfxL,OAAO,OACPyL,UAAU,SAAQzE,SAAA,EAElBP,EAAAA,EAAAA,KAACgE,EAAAA,GAAI,CAACQ,MAAI,EAACC,GAAI,GAAIvE,GAAI,CAAEuG,GAAI,EAAG9B,GAAI,GAAIpE,UACtCP,EAAAA,EAAAA,KAAC8D,EAAAA,EAAU,CAACmB,QAAQ,KAAKX,WAAW,MAAMpE,GAAI,CAAEjD,MAAO,SAAUsD,SAAC,iBAIpEP,EAAAA,EAAAA,KAACgE,EAAAA,GAAI,CAACQ,MAAI,EAACC,GAAI,EAAElE,UACfP,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAAC1G,OAAO,OAAOD,MAAM,OAAMiH,UAC7BP,EAAAA,EAAAA,KAAC0G,EAAAA,GAAM,CACLpB,KAAM,IACNqB,MAAO,CAAEpN,OAAQ,OAAQqN,SAAU,OAAQtN,MAAO,QAClDuN,MAAK,GAAAxJ,QACAyJ,EAAAA,EAAAA,IAActH,SAASuH,SAASC,MAAK,YAAA3J,QAAW4J,EAAAA,EAAAA,IAAkBzH,SAASuH,SAASC,OACvFE,QAAO,qBAIflH,EAAAA,EAAAA,KAACgE,EAAAA,GAAI,CACHQ,MAAI,EACJC,GAAI,GACJlL,OAAO,MACP2L,UAAU,gBACVhF,GAAI,CAAE,MAAO,CAAEoE,WAAY,mBAAqB/D,UAEhDP,EAAAA,EAAAA,KAACmH,EAAqB,CAACrO,KAAMA,cAK7B,C","sources":["Components/AirQuality/AirQualityScreen/RecentHistoricalGraph.jsx","Pages/Screen.jsx"],"sourcesContent":["// disable eslint for this file\r\n/* eslint-disable */\r\nimport { useRef, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nimport convertToAQI from '../../../Utils/AirQuality/AirQualityIndexCalculator';\r\nimport AQIdatabase from '../../../Utils/AirQuality/AirQualityIndexHelper';\r\nimport { SensorStatus } from '../SensorStatus';\r\nimport { Box } from '@mui/material';\r\n\r\nimport { capitalizeFirstCharacter, areDOMOverlapped } from './ScreenUtils';\r\n\r\nimport CustomThemes from '../../../Themes/CustomThemes';\r\nimport ThemePreferences from '../../../Themes/ThemePreferences';\r\n\r\nconst numberOfHoursForHistoricalData = 6;\r\n\r\nconst RecentHistoricalGraph = (props) => {\r\n  const { data } = props;\r\n\r\n  const graphContainer = useRef();\r\n  const layerBackground = useRef();\r\n  const layerTexts = useRef();\r\n  const layerXaxisWrapper = useRef();\r\n  const layerLines = useRef();\r\n\r\n  let svg, width, height, xAxis, yAxis;\r\n  let maxAQItoDisplay = 200;\r\n  const xTickPeriod = 120; // xAxis ticks every 2 hour\r\n  const dotRadius = 10;\r\n  const margin = { top: 30, right: 80, bottom: 0, left: 70 };\r\n\r\n  // Set up D3's line generator\r\n  const lineGenerator = d3\r\n    .line()\r\n    .x(function (d) {\r\n      return xAxis(d.timestamp);\r\n    }) // set the x values for the line generator\r\n    .y(function (d) {\r\n      return yAxis(d.aqi.val);\r\n    }) // set the y values for the line generator\r\n    .curve(d3.curveCardinal.tension(0)); // apply smoothing to the line\r\n\r\n  useEffect(() => {\r\n    if (!data) return;\r\n    if (!graphContainer.current) return;\r\n    if (!layerBackground.current) return;\r\n    if (!layerTexts.current) return;\r\n    if (!layerXaxisWrapper.current) return;\r\n    if (!layerLines.current) return;\r\n\r\n    svg = d3.select(graphContainer.current);\r\n    width = graphContainer.current.clientWidth;\r\n    height = graphContainer.current.clientHeight - margin.top;\r\n\r\n    // Clear all previous drawings\r\n    d3.select(layerBackground.current).selectAll(\"*\").remove();\r\n    d3.select(layerTexts.current).selectAll(\"*\").remove();\r\n    d3.select(layerXaxisWrapper.current).selectAll(\"*\").remove();\r\n    d3.select(layerLines.current).selectAll(\"*\").remove();\r\n\r\n    d3.select(layerBackground.current)\r\n      .attr(\"opacity\", 0.5);\r\n    d3.select(layerTexts.current)\r\n      .attr(\"filter\", \"brightness(0.8) contrast(1.2) saturate(1.2)\");\r\n\r\n    Object.entries(data).forEach(([key, sensorData]) => {\r\n      // Create the JS date object and calculate AQI from raw measurements\r\n      sensorData.historical?.forEach(function (d) {\r\n        d.timestamp = new Date(d.timestamp)\r\n      });\r\n\r\n      // Calculate the maximum value AQI of this sensor\r\n      if (sensorData.historical && Array.isArray(sensorData.historical)) {\r\n        const max = d3.max(sensorData.historical, function (d) {\r\n          return d.aqi.val;\r\n        });\r\n        if (max > maxAQItoDisplay) maxAQItoDisplay = max;\r\n      }\r\n    });\r\n\r\n    // Calculate the maximum AQI for the y-axis to display\r\n    maxAQItoDisplay = Math.ceil(maxAQItoDisplay / 50) * 50; // round to the nearest 50 points\r\n\r\n    for (let category of AQIdatabase) {\r\n      if (maxAQItoDisplay >= category.aqiUS.low && maxAQItoDisplay <= category.aqiUS.high) {\r\n        maxAQItoDisplay = category.aqiUS.high === Infinity ? maxAQItoDisplay : category.aqiUS.high;\r\n        break;\r\n      }\r\n    };\r\n\r\n    // 1. Set up the xAxis domain and range\r\n    let xAxisMax = new Date();\r\n    let xAxisMin = new Date();\r\n    xAxisMin.setHours(xAxisMin.getHours() - numberOfHoursForHistoricalData);\r\n    xAxis = d3.scaleTime().domain([xAxisMin, xAxisMax]).rangeRound([margin.left, width - margin.right]); // width is inclusive of margin\r\n\r\n    // 2. Set up the yAxis domain and range\r\n    yAxis = d3.scaleLinear().domain([0, maxAQItoDisplay]).range([height + margin.top, margin.top]); // height is already exclusive of margin\r\n\r\n    // 7. Add the background category layer and the AQI levels (rectangles) and the grids\r\n    let font_size = Math.max(\r\n      Math.floor(((AQIdatabase[1].aqiUS.high - AQIdatabase[0].aqiUS.high) / maxAQItoDisplay) * height / 2),\r\n      20);\r\n\r\n    let marginText = Math.floor(font_size / 5);\r\n    // Loop through all the aqi_category and add each category into the graph\r\n    for (let i = 0; i < AQIdatabase.length; i++) {\r\n      const category = AQIdatabase[i];\r\n      const upper = category.aqiUS.high === Infinity ? maxAQItoDisplay : category.aqiUS.high;\r\n      const lower = category.aqiUS.low;\r\n\r\n      if (maxAQItoDisplay <= lower) break;\r\n\r\n      // Add the rectangles\r\n      const aqiRange = Math.ceil((upper - lower) / 50) * 50;\r\n      d3.select(layerBackground.current)\r\n        .append(\"rect\")\r\n        .attr(\"x\", 0)\r\n        .attr(\"y\", height - (upper / maxAQItoDisplay) * height + margin.top)\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", aqiRange / maxAQItoDisplay * height)\r\n        .attr(\"fill\", category.color.Light);\r\n\r\n      // Add the AQI categories numbers\r\n      d3.select(layerTexts.current)\r\n        .append(\"text\")\r\n        .attr(\"x\", marginText)\r\n        .attr(\r\n          \"y\",\r\n          height -\r\n          (category.aqiUS.low / maxAQItoDisplay) * height -\r\n          3.5 * marginText + margin.top\r\n        )\r\n        .attr(\"fill\", category.color.Light)\r\n        .attr(\"font-size\", font_size)\r\n        .text(Math.floor(category.aqiUS.low / 50) * 50);\r\n\r\n      d3.select(layerTexts.current)\r\n        .append(\"text\")\r\n        .attr(\"class\", \"category-text-graph-sm\")\r\n        .attr(\"x\", marginText + 2)\r\n        .attr(\r\n          \"y\",\r\n          height - (category.aqiUS.low / maxAQItoDisplay) * height - marginText + margin.top\r\n        )\r\n        .attr(\"fill\", category.color.Light)\r\n        .attr(\"font-size\", font_size / 2)\r\n        .text(category.category);\r\n    };\r\n\r\n    // Add the xAxisWrapper and its texts\r\n    d3.select(layerXaxisWrapper.current)\r\n      .append(\"rect\")\r\n      .attr(\"x\", 0)\r\n      .attr(\"y\", 0)\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", margin.top)\r\n      .attr(\"fill\", \"white\");\r\n\r\n    // 9.2. Add the X Axis on top of the graph, as well as ticks\r\n    let formatHour = d3.timeFormat(\"%H:%M\");\r\n    d3.select(layerXaxisWrapper.current)\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(0,${margin.top})`)\r\n      .call(\r\n        d3\r\n          .axisTop(xAxis)\r\n          .tickSize(-height) // negative length to make vertical lines\r\n          .ticks(d3.timeMinute.every(xTickPeriod))\r\n          .tickFormat(function (d) {\r\n            return formatHour(d);\r\n          })\r\n      )\r\n      .attr(\"font-size\", height / 20)\r\n      .attr(\"color\", CustomThemes.universal.palette.inactiveSensor)\r\n      .select(\".domain\")\r\n      .remove();\r\n    d3.select(layerXaxisWrapper.current)\r\n      .selectAll('line')\r\n      .attr('stroke', 'white')\r\n      .attr('stroke-width', 2)\r\n      .attr('opacity', 0.5);\r\n\r\n    Object.entries(data).forEach(([key, sensorData]) => {\r\n      // Append the line chart for this location\r\n      d3.select(layerLines.current)\r\n        .append(\"path\")\r\n        .datum(sensorData.historical || [])\r\n        .attr(\"x\", margin.left)\r\n        .attr(\"class\", \"line\")\r\n        .attr(\"d\", lineGenerator)\r\n        .attr(\"fill\", \"transparent\")\r\n        .attr(\"stroke\", \"black\")\r\n        .attr(\"stroke-width\", \"5px\")\r\n        .attr(\"opacity\", sensorData.sensor?.location_type === \"outdoors\" ? 1 : 0.5);\r\n\r\n      // Append the circle marker at the end of this line chart to denote its liveness\r\n      const mostRecentData = sensorData.historical?.length > 0 ? sensorData.historical?.[0] : null;\r\n      if (mostRecentData) {\r\n        const category = AQIdatabase[mostRecentData?.aqi?.categoryIndex];\r\n        let color;\r\n        if (category) color = category.color[ThemePreferences.light];\r\n\r\n        const markerWrapper = d3.select(layerLines.current)\r\n          .append(\"g\")\r\n          .attr(\r\n            \"transform\",\r\n            \"translate(\" +\r\n            xAxis(mostRecentData.timestamp) +\r\n            \",\" +\r\n            yAxis(mostRecentData.aqi.val) +\r\n            \")\"\r\n          )\r\n          .attr(\"fill\",\r\n            sensorData.current?.sensor_status === SensorStatus.active\r\n              ? color\r\n              : CustomThemes.universal.palette.inactiveSensor)\r\n          ;\r\n\r\n        sensorData.current?.sensor_status === SensorStatus.active &&\r\n          markerWrapper.append(\"circle\")\r\n            .attr(\"cx\", 0)\r\n            .attr(\"cy\", 0)\r\n            .attr(\"filter\", \"brightness(0.5)\")\r\n            .attr(\"class\", \"pulse-ring\")\r\n            .attr(\"r\", 2.5 * dotRadius);\r\n\r\n        markerWrapper.append(\"circle\")\r\n          .attr(\"cx\", 0)\r\n          .attr(\"cy\", 0)\r\n          .attr(\"stroke\", \"#666\")\r\n          .attr(\"class\", sensorData.current?.sensor_status === SensorStatus.active && \"pulse-dot\")\r\n          .attr(\"r\", dotRadius);\r\n\r\n        markerWrapper.append(\"text\")\r\n          .attr(\"class\", \"location-label\")\r\n          .attr(\"x\", dotRadius * 1.5)\r\n          .attr(\"y\", 0)\r\n          .attr(\"fill\", \"black\")\r\n          .attr(\"alignment-baseline\", \"middle\")\r\n          .attr(\"text-anchor\", \"left\")\r\n          .attr(\"font-size\", height / 25)\r\n          .text(capitalizeFirstCharacter(sensorData.sensor?.location_short));\r\n\r\n        const locationLabels = document.getElementsByClassName(\"location-label\");\r\n        for (let i = 1; i < locationLabels.length; i++) {\r\n          const locationLabel_1 = locationLabels[i - 1];\r\n          const locationLabel_2 = locationLabels[i];\r\n          const overlapped = areDOMOverlapped(locationLabel_1.getBoundingClientRect(), locationLabel_2.getBoundingClientRect());\r\n\r\n          if (overlapped !== 0) {\r\n            locationLabel_1.setAttribute(\"y\", overlapped * dotRadius);\r\n            locationLabel_2.setAttribute(\"y\", - overlapped * dotRadius);\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n  }, [data])\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        '& .pulse-ring': {\r\n          animation: 'pulse-ring 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\r\n          '@keyframes pulse-ring': {\r\n            '0%': {\r\n              transform: 'scale(0.2)'\r\n            },\r\n            '80%': {},\r\n            '100%': {\r\n              opacity: 0\r\n            }\r\n          }\r\n        },\r\n        '& .pulse-dot': {\r\n          animation: 'pulse-dot 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\r\n          '@keyframes pulse-dot': {\r\n            '0%': {\r\n              transform: 'scale(0.5)'\r\n            },\r\n            '50%': {\r\n              transform: 'scale(1)',\r\n              filter: 'brightness(1.2) contrast(1.2) saturate(1.2)'\r\n            },\r\n            '100%': {\r\n              transform: 'scale(0.5)'\r\n            }\r\n          }\r\n        }\r\n      }}\r\n      width=\"100%\"\r\n      height=\"100%\"\r\n    >\r\n      <svg\r\n        id=\"recent-historical-graph\"\r\n        width=\"100%\"\r\n        height=\"100%\"\r\n        ref={graphContainer}\r\n      >\r\n        <g ref={layerBackground} />\r\n        <g ref={layerXaxisWrapper} />\r\n        <g ref={layerTexts} />\r\n        <g ref={layerLines} />\r\n      </svg>\r\n    </Box>\r\n\r\n  );\r\n}\r\n\r\nexport default RecentHistoricalGraph;","// disable eslint for this file\r\n/* eslint-disable */\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { UserContext } from '../ContextProviders/UserContext';\r\n\r\nimport { Box, Grid, Typography, Stack, List, ListItem, ListItemText } from '@mui/material';\r\n\r\nimport CITIESlogoLinkToHome from '../Components/Header/CITIESlogoLinkToHome';\r\n\r\nimport { SensorStatus } from '../Components/AirQuality/SensorStatus';\r\nimport { getDomainName, getUrlAfterScreen } from '../Components/AirQuality/AirQualityScreen/ScreenUtils';\r\n\r\nimport RecentHistoricalGraph from '../Components/AirQuality/AirQualityScreen/RecentHistoricalGraph';\r\n\r\nimport AQIdatabase from '../Utils/AirQuality/AirQualityIndexHelper';\r\n\r\nimport CustomThemes from '../Themes/CustomThemes';\r\n\r\nimport QRCode from \"react-qr-code\";\r\n\r\nimport CurrentAQIGrid from '../Components/AirQuality/CurrentAQIGrid';\r\nimport { CurrentAQIGridSize } from '../Components/AirQuality/CurrentAQIGridSize';\r\nimport { GeneralEndpoints, fetchAndProcessCurrentSensorsData, getApiUrl } from '../Utils/ApiUtils';\r\nimport { UniqueRoutes } from '../Utils/RoutesUtils';\r\nimport { PreferenceContext } from '../ContextProviders/PreferenceContext';\r\n\r\nconst Screen = ({ title }) => {\r\n  const { temperatureUnitPreference, themePreference } = useContext(PreferenceContext);\r\n\r\n  const { user } = useContext(UserContext);\r\n  const navigate = useNavigate();\r\n\r\n  const location = useLocation();\r\n  const locationPath = location.pathname;\r\n\r\n  // Update the page's title\r\n  useEffect(() => {\r\n    document.title = title;\r\n  }, [title]);\r\n\r\n  const [isLayoutReversed, setIsLayoutReversed] = useState();\r\n\r\n  const [data, setData] = useState({});\r\n\r\n  // Tweak the layout of the screen to prevent burn-in\r\n  useEffect(() => {\r\n    // Helper function to change layout of the screen based on current's month\r\n    // (arrange the left and right sections of the screen)\r\n    // to mitigate burn-in if the same static image is displayed over a long period of time\r\n    function returnIsLayoutReversed() {\r\n      let months = [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1]; // 12 months of a year, change the layout every two months\r\n      let now = new Date();\r\n      let thisMonthIndex = now.getMonth(); // get the index of this Month (0-11)\r\n      // Return a boolean value if the layout should be reversed\r\n      return (months[thisMonthIndex] !== 0);\r\n    }\r\n\r\n    setIsLayoutReversed(returnIsLayoutReversed());\r\n\r\n    // Set up an interval to call the function every day\r\n    const oneDayInMilliseconds = 24 * 60 * 60 * 1000;\r\n    const intervalId = setInterval(() => {\r\n      setIsLayoutReversed(returnIsLayoutReversed());\r\n    }, oneDayInMilliseconds);\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  // Fetch air quality data from database, depends on the state of 'user' object\r\n  useEffect(() => {\r\n    // Only attempt to fetch data if the user has been authenticated\r\n    if (user.checkedAuthentication === false) return;\r\n\r\n    if (user.authenticated === true) {\r\n      // Do nothing if the data has been fetched before\r\n      if (Object.keys(data).length != 0) return;\r\n\r\n      const url = getApiUrl({ endpoint: GeneralEndpoints.screen });\r\n      if (!url) return;\r\n\r\n      fetchAndProcessCurrentSensorsData(url)\r\n        .then((data) => {\r\n          setData(data)\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n\r\n      // Create an interval that fetch new data every 5 minute\r\n      const fetchInterval = 5 * 60 * 1000; // 5min\r\n      const intervalId = setInterval(() => {\r\n        fetchAndProcessCurrentSensorsData(url)\r\n          .then((data) => {\r\n            setData(data)\r\n          })\r\n          .catch((error) => console.log(error))\r\n      },\r\n        fetchInterval);\r\n      // Clean up the interval when the component unmounts\r\n      return () => {\r\n        clearInterval(intervalId);\r\n      };\r\n    } else {\r\n      navigate(`${UniqueRoutes.login}?${UniqueRoutes.redirectQuery}=${locationPath}`);\r\n    }\r\n  }, [user]);\r\n\r\n  const AirQualityComparison = () => {\r\n    // Only display air quality comparison if every sensor is currently active\r\n    if (!Object.values(data).every((sensorData) => sensorData.current?.sensor_status === SensorStatus.active)) return null;\r\n\r\n    let outdoorsAQI, indoorsAQI;\r\n    // Don't display comparison if outdoor air is good\r\n    for (let i = 0; i < Object.values(data).length; i++) {\r\n      const sensorData = Object.values(data)[i];\r\n      if (sensorData.sensor?.location_type === \"outdoors\") {\r\n        outdoorsAQI = sensorData.current.aqi;\r\n        if (outdoorsAQI <= AQIdatabase[0].aqiUS.high) return null;\r\n      }\r\n      else indoorsAQI = sensorData.current.aqi;\r\n    }\r\n\r\n    const ratio = outdoorsAQI / indoorsAQI;\r\n    let comparison;\r\n    if (ratio >= 2) comparison = `${parseFloat(ratio).toFixed(1)} times`;\r\n    else if (ratio > 1.2) comparison = `${Math.round(100 * ((outdoorsAQI - indoorsAQI) / indoorsAQI))}%`;\r\n    else return null;\r\n\r\n    return (\r\n      <ListItem>\r\n        <ListItemText primary={\r\n          <>Indoors air is\r\n            <Typography\r\n              component=\"span\"\r\n              color={`${AQIdatabase[0].color[themePreference]} !important`}\r\n            >\r\n              {` ${comparison} `}\r\n            </Typography>\r\n            better than outdoors</>\r\n        } />\r\n      </ListItem>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      alignContent=\"stretch\"\r\n      alignItems=\"stretch\"\r\n      height=\"100vh\"\r\n      sx={{\r\n        overflow: 'hidden',\r\n        background: \"white\",\r\n        '& *': {\r\n          fontWeight: '500 !important'\r\n        },\r\n        '& .condensedFont': {\r\n          fontFamily: 'IBM Plex Sans Condensed, sans-serif !important',\r\n          '& *': {\r\n            fontFamily: 'IBM Plex Sans Condensed, sans-serif !important'\r\n          }\r\n        },\r\n        '& .flashingRed': {\r\n          '& .MuiTypography-root ': {\r\n            color: `${AQIdatabase[3].color.Light} !important`,\r\n            opacity: 0.8\r\n          },\r\n          color: `${AQIdatabase[3].color.Light} !important`,\r\n          animation: 'flashingRed 3s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\r\n          '@keyframes flashingRed': {\r\n            '0%': {\r\n              opacity: 1\r\n            },\r\n            '50%': {\r\n              opacity: 0.5\r\n            },\r\n            '100%': {\r\n              opacity: 1\r\n            }\r\n          }\r\n        }\r\n      }}\r\n    >\r\n      <Grid\r\n        item\r\n        xs={6}\r\n        sx={{\r\n          py: 3,\r\n          px: 2,\r\n          order: isLayoutReversed ? 1 : 0,\r\n          background: '#212529'\r\n        }}\r\n      >\r\n        <Stack\r\n          direction=\"column\"\r\n          justifyContent=\"space-between\"\r\n          height=\"100%\"\r\n          textAlign=\"center\"\r\n        >\r\n          <Box>\r\n            <Typography variant=\"h3\" fontWeight=\"500\" color=\"white\">\r\n              AIR QUALITY INDEX\r\n            </Typography>\r\n            <Typography variant=\"h4\" className='condensedFont' color={CustomThemes.universal.palette.inactiveSensor}>\r\n              Particulate Matter PM2.5 & PM10\r\n            </Typography>\r\n          </Box>\r\n\r\n          <Grid\r\n            container\r\n            justifyContent=\"space-around\"\r\n          >\r\n            <CurrentAQIGrid\r\n              currentSensorsData={data}\r\n              temperatureUnitPreference={temperatureUnitPreference}\r\n              isScreen={true}\r\n              size={CurrentAQIGridSize.large}\r\n            />\r\n          </Grid>\r\n\r\n          <List className='condensedFont'\r\n            sx={{\r\n              listStyleType: 'disclosure-closed',\r\n              '& .MuiTypography-root': {\r\n                fontSize: '1.5rem',\r\n              },\r\n              '& .MuiListItem-root': {\r\n                display: 'list-item',\r\n                ml: 3,\r\n                p: 0,\r\n                pr: 3,\r\n              },\r\n              '& .MuiTypography-root, .MuiListItem-root': {\r\n                color: CustomThemes.universal.palette.inactiveSensor\r\n              }\r\n            }}>\r\n            <AirQualityComparison />\r\n            {\r\n              Object.entries(data).map(([key, sensorData]) => (\r\n                sensorData.current?.healthSuggestion &&\r\n                <ListItem\r\n                  key={key}\r\n                  className={sensorData.current?.aqi >= AQIdatabase[2].aqiUS.low && 'flashingRed'}\r\n                >\r\n                  <ListItemText\r\n                    primary={sensorData.current?.healthSuggestion}\r\n                  />\r\n                </ListItem>\r\n              ))\r\n            }\r\n          </List>\r\n        </Stack>\r\n      </Grid>\r\n\r\n      <Grid item xs={6} sx={{ order: isLayoutReversed ? 0 : 1 }}>\r\n        <Box\r\n          sx={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            right: !isLayoutReversed && 0,\r\n            left: isLayoutReversed && 0,\r\n            width: '5vw',\r\n            height: '5vw',\r\n            m: 1\r\n          }}\r\n        >\r\n          <CITIESlogoLinkToHome />\r\n        </Box>\r\n        <Grid\r\n          container\r\n          alignContent=\"space-between\"\r\n          justifyContent=\"center\"\r\n          height=\"100%\"\r\n          textAlign=\"center\"\r\n        >\r\n          <Grid item xs={12} sx={{ pt: 3, px: 2 }}>\r\n            <Typography variant=\"h3\" fontWeight=\"500\" sx={{ color: 'black' }}>\r\n              CITIESair\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <Box height=\"auto\" width=\"100%\">\r\n              <QRCode\r\n                size={256}\r\n                style={{ height: \"auto\", maxWidth: \"100%\", width: \"100%\" }}\r\n                value={\r\n                  `${getDomainName(document.location.href)}?source=${getUrlAfterScreen(document.location.href)}`\r\n                } viewBox={`0 0 256 256`}\r\n              />\r\n            </Box>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            height=\"70%\"\r\n            className='condensedFont'\r\n            sx={{ '& *': { fontWeight: '600 !important' } }}\r\n          >\r\n            <RecentHistoricalGraph data={data} />\r\n          </Grid>\r\n        </Grid>\r\n\r\n      </Grid>\r\n    </Grid >\r\n  );\r\n};\r\n\r\nexport default Screen;\r\n"],"names":["props","data","graphContainer","useRef","layerBackground","layerTexts","layerXaxisWrapper","layerLines","svg","width","height","xAxis","yAxis","maxAQItoDisplay","margin","lineGenerator","d3","x","d","timestamp","y","aqi","val","curve","tension","useEffect","current","clientWidth","clientHeight","selectAll","remove","attr","Object","entries","forEach","_ref","_sensorData$historica","key","sensorData","historical","Date","Array","isArray","max","Math","ceil","category","AQIdatabase","aqiUS","low","high","Infinity","xAxisMax","xAxisMin","setHours","getHours","domain","rangeRound","range","font_size","floor","marginText","i","length","upper","lower","aqiRange","append","color","Light","text","formatHour","concat","call","tickSize","ticks","every","tickFormat","CustomThemes","universal","palette","inactiveSensor","select","_ref2","_sensorData$sensor","_sensorData$historica2","_sensorData$historica3","datum","sensor","location_type","mostRecentData","_mostRecentData$aqi","_sensorData$current","_sensorData$current2","_sensorData$current3","_sensorData$sensor2","categoryIndex","ThemePreferences","light","markerWrapper","sensor_status","SensorStatus","active","dotRadius","capitalizeFirstCharacter","location_short","locationLabels","document","getElementsByClassName","locationLabel_1","locationLabel_2","overlapped","areDOMOverlapped","getBoundingClientRect","setAttribute","_jsx","Box","sx","animation","transform","opacity","filter","children","_jsxs","id","ref","title","temperatureUnitPreference","themePreference","useContext","PreferenceContext","user","UserContext","navigate","useNavigate","locationPath","useLocation","pathname","isLayoutReversed","setIsLayoutReversed","useState","setData","returnIsLayoutReversed","getMonth","intervalId","setInterval","clearInterval","checkedAuthentication","authenticated","keys","url","getApiUrl","endpoint","GeneralEndpoints","screen","fetchAndProcessCurrentSensorsData","then","catch","error","console","log","UniqueRoutes","login","redirectQuery","AirQualityComparison","values","outdoorsAQI","indoorsAQI","ratio","comparison","parseFloat","toFixed","round","ListItem","ListItemText","primary","_Fragment","Typography","component","Grid","container","alignContent","alignItems","overflow","background","fontWeight","fontFamily","item","xs","py","px","order","Stack","direction","justifyContent","textAlign","variant","className","CurrentAQIGrid","currentSensorsData","isScreen","size","CurrentAQIGridSize","large","List","listStyleType","fontSize","display","ml","p","pr","map","_sensorData$current4","healthSuggestion","position","top","right","left","m","CITIESlogoLinkToHome","pt","QRCode","style","maxWidth","value","getDomainName","location","href","getUrlAfterScreen","viewBox","RecentHistoricalGraph"],"sourceRoot":""}