{"version":3,"file":"static/js/61.94967eec.chunk.js","mappings":"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","sources":["Components/CurrentAQIGrid.jsx","Components/UppercaseTitle.jsx","Pages/Project/ExpandableSection.jsx","Pages/Screen/ScreenUtils.jsx","Utils/AirQualityIndexCalculator.jsx","Utils/AirQualityIndexHelper.jsx","Utils/ApiUtils.jsx"],"sourcesContent":["// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect } from 'react';\n\nimport { Box, Grid, Typography } from '@mui/material';\nimport ThermostatIcon from '@mui/icons-material/Thermostat';\nimport WaterDropIcon from '@mui/icons-material/WaterDrop';\nimport ErrorIcon from '@mui/icons-material/Error';\n\nimport { returnSensorStatus, SensorStatus, getFormattedElapsedTimeFromNow } from '../Pages/Screen/ScreenUtils';\nimport { TemperatureUnits, getFormattedTemperature, calculateHeatIndex } from \"../Pages/Screen/TemperatureUtils\";\n\nimport AQIdatabase from '../Utils/AirQualityIndexHelper';\n\nimport CustomThemes from '../Themes/CustomThemes';\n\nconst CurrentAQIGrid = (props) => {\n  const { currentSensorsData, temperatureUnitPreference, isScreen = true, orderOfItems } = props;\n\n  const getGridItemSize = (numOfItems) => {\n    return {\n      xs: Math.max(12 / numOfItems, 6),\n      sm: Math.max(12 / numOfItems, 4),\n      lg: isScreen ? (12 / numOfItems) : Math.min(5, Math.max(12 / numOfItems, 3))\n    }\n  }\n\n  if (!currentSensorsData) return null;\n\n  return (\n    <Grid\n      container\n      justifyContent=\"center\"\n      sx={{\n        '& .MuiSvgIcon-root': {\n          verticalAlign: 'sub',\n          fontSize: isScreen ? null : '1rem'\n        },\n        '& *': {\n          fontWeight: '500'\n        },\n        '& .condensedFont': {\n          fontFamily: 'IBM Plex Sans Condensed, sans-serif !important',\n          '& *': {\n            fontFamily: 'IBM Plex Sans Condensed, sans-serif !important'\n          }\n        }\n      }}\n    >\n      {\n        Object.entries(currentSensorsData).map(([key, sensorData], index) => (\n          <Grid\n            item\n            order={orderOfItems && orderOfItems[index]}\n            key={key}\n            {...getGridItemSize(Object.keys(currentSensorsData).length)}\n            sx={\n              sensorData.current?.sensor_status !== SensorStatus.active &&\n              { '& *': { color: `${CustomThemes.universal.palette.inactiveSensor}` } }\n            }\n          >\n            <Box sx={{ '& *': { color: sensorData.current?.color } }}>\n              <Typography variant={isScreen ? \"h4\" : 'h5'} fontWeight=\"500\" className='condensedFont'>\n                {sensorData.sensor?.location_long || sensorData.sensor?.location_short || 'No Location Name'}\n              </Typography>\n              <Typography variant={isScreen ? \"h1\" : 'h2'} fontWeight=\"500\" lineHeight={isScreen ? 0.8 : 0.9}>\n                {sensorData.current?.aqi || '--'}\n              </Typography>\n              <Typography variant={isScreen ? \"h4\" : 'h5'} fontWeight=\"500\" className='condensedFont'>\n                {sensorData.current?.category || '--'}\n              </Typography>\n            </Box>\n\n            <Box sx={{\n              '& *': {\n                color:\n                  isScreen ? (\n                    sensorData.current?.sensor_status === SensorStatus.active ?\n                      '#c8dcff' : CustomThemes.universal.palette.inactiveSensor\n                  )\n                    : 'text.secondary'\n              }, mt: isScreen ? 2 : 1\n            }} className='condensedFont'>\n              <Typography variant={isScreen ? \"h6\" : 'body1'}>\n                <ThermostatIcon />\n                {\n                  getFormattedTemperature({\n                    rawTemp: sensorData.current?.temperature,\n                    currentUnit: TemperatureUnits.celsius,\n                    returnUnit: temperatureUnitPreference\n                  })\n                }\n                &nbsp;&nbsp;-&nbsp;\n                <WaterDropIcon sx={{ transform: 'scaleX(0.9)' }} />\n                {sensorData.current?.rel_humidity ? Math.round(sensorData.current?.rel_humidity) : \"--\"}%\n              </Typography>\n              {\n                // Show heat index for selected location types\n                ['outdoors', 'indoors_gym'].includes(sensorData.sensor?.location_type) &&\n                <Typography variant={isScreen ? \"body1\" : 'body2'} sx={{ fontWeight: '300 !important' }}>\n                  {calculateHeatIndex({\n                    rawTemp: sensorData.current?.temperature,\n                    currentUnit: TemperatureUnits.celsius,\n                    rel_humidity: sensorData.current?.rel_humidity,\n                    returnUnit: temperatureUnitPreference\n                  })}\n                </Typography>\n              }\n              {\n                displayLastUpdateAndSensorStatus({ sensorData, isScreen })\n              }\n            </Box>\n\n            {\n              // Display outdoor-indoor comparison if both sensors are active\n              sensorData.sensor_status !== SensorStatus.active &&\n              <Typography variant={isScreen ? \"h6\" : 'body1'} className=\"condensedFont\">\n                {returnSensorStatus(sensorData)}\n              </Typography>\n            }\n          </Grid>\n        ))\n      }\n    </Grid>\n  );\n};\n\nconst displayLastUpdateAndSensorStatus = ({ sensorData, isScreen }) => {\n  if (isScreen && sensorData.current.sensor_status === SensorStatus.active) return null;\n  else\n    return (\n      <Typography\n        variant={isScreen ? 'h6' : 'caption'}\n        sx={{\n          mt: 0,\n          fontWeight: isScreen && '500 !important'\n        }}\n      >\n        {\n          sensorData.current?.sensor_status !== SensorStatus.active\n          &&\n          <>\n            <ErrorIcon\n              sx={{\n                '& *': {\n                  color: `${AQIdatabase[3].lightThemeColor} !important`\n                },\n                mr: 0.5\n              }} />\n            Offline.&nbsp;\n          </>\n        }\n        Last update:\n        {(sensorData.current?.timestamp || sensorData.sensor?.last_seen)\n          ? ` ${getFormattedElapsedTimeFromNow(sensorData.current?.timestamp || sensorData.sensor?.last_seen)} ago`\n          : '--'}\n      </Typography>\n    )\n}\n\nexport default CurrentAQIGrid;\n","import Typography from '@mui/material/Typography';\n\nexport default function UppercaseTitle({ text }) {\n  return (\n    <Typography\n      variant=\"h4\"\n      color=\"text.primary\"\n      sx={{\n        fontWeight: 'medium',\n        display: 'inline-block',\n        textTransform: 'uppercase',\n        pb: 3,\n        lineHeight: 1\n      }}\n    >\n      {text}\n    </Typography>\n  );\n}\n","// disable eslint for this file\n/* eslint-disable */\nimport { useState } from 'react';\nimport { styled } from '@mui/material/styles';\n\nimport MuiAccordion from '@mui/material/Accordion';\nimport MuiAccordionSummary from '@mui/material/AccordionSummary';\nimport MuiAccordionDetails from '@mui/material/AccordionDetails';\nimport { Box, Typography, Tooltip } from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n\nimport * as Tracking from '../../Utils/Tracking';\n\nconst StyledAccordion = styled(MuiAccordion)(({ theme, expanded }) => ({\n  color: theme.palette.text.secondary,\n  backgroundImage: 'none',\n  backgroundColor: expanded ? theme.palette.background.default : 'transparent',\n  boxShadow: expanded ? theme.shadows : 'none',\n  transition: 'none',\n}));\n\nconst StyledAccordionSummary = styled(MuiAccordionSummary)(({ theme, expanded }) => ({\n  marginTop: expanded ? theme.spacing(3) : 0,\n  flexDirection: 'row-reverse',\n  paddingLeft: expanded ? theme.spacing(1) : 0,\n  '& .MuiTypography-root': {\n    color: theme.palette.text.primary,\n    textDecoration: 'underline',\n    transition: 'none',\n    '&:hover': {\n      color: theme.palette.primary.main,\n    },\n  },\n}));\n\nconst ExpandableSection = ({ title, content }) => {\n  const [expanded, setExpanded] = useState(undefined);\n\n  const handleAccordionChange = (panel) => (event, isExpanded) => {\n    setExpanded(isExpanded ? panel : undefined);\n\n    Tracking.sendEventAnalytics(isExpanded ? Tracking.Events.expandSampleData : Tracking.Events.collapseSampleData);\n  };\n\n  return (\n    <Box>\n      <StyledAccordion\n        expanded={expanded === \"panel1\"}\n        onChange={handleAccordionChange(\"panel1\")}\n        transitionDuration={0}\n      >\n        <StyledAccordionSummary expanded={expanded} expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1a-content\" id=\"panel1a-header\">\n          <Tooltip title={expanded ? \"Click to collapse\" : \"Click to expand\"} enterDelay={0} leaveDelay={200}>\n            <Typography component=\"a\" variant=\"body1\">\n              {title}\n            </Typography>\n          </Tooltip>\n        </StyledAccordionSummary>\n        <MuiAccordionDetails>\n          {content}\n        </MuiAccordionDetails>\n      </StyledAccordion>\n    </Box>\n  );\n}\n\nexport default ExpandableSection;","// ---------- Calculate time difference and return appropriate format\nexport const getFormattedElapsedTimeFromNow = (dateString) => {\n  const inputDate = new Date(dateString);\n  const currentDate = new Date();\n  const timeDifference = currentDate - inputDate;\n\n  // Calculate time differences in seconds, minutes, hours, and days\n  const seconds = Math.floor(timeDifference / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  // Determine the most prominent time unit\n  if (days > 0) {\n    return `${days}d`;\n  } else if (hours > 0) {\n    return `${hours}h`;\n  } else if (minutes > 0) {\n    return `${minutes}m`;\n  } else {\n    return `${seconds}s`;\n  }\n}\n\n// ---------- Sensor status\nexport const SensorStatus = {\n  active: \"active\",\n  temporaryOffline: \"temporaryOffline\",\n  offline: \"offline\"\n};\n\nconst SensorStatusCriteria = [\n  {\n    name: SensorStatus.active,\n    cutoffInHours: {\n      low: 0,\n      high: 2\n    }\n  },\n  {\n    name: SensorStatus.temporaryOffline,\n    cutoffInHours: {\n      low: 3,\n      high: 6\n    }\n  },\n  {\n    name: SensorStatus.offline,\n    cutoffInHours: {\n      low: 7,\n      high: Infinity\n    }\n  }\n];\n\nexport const calculateSensorStatus = (lastSeenInHours) => {\n  for (let i = 0; i < SensorStatusCriteria.length; i++) {\n    const category = SensorStatusCriteria[i];\n    if (category.cutoffInHours.low <= lastSeenInHours && lastSeenInHours <= category.cutoffInHours.high) {\n      return category.name;\n    }\n  }\n}\n\nexport const returnSensorStatus = (sensorData) => {\n  switch (sensorData.sensor_status) {\n    case SensorStatus.active:\n      return null;\n    case SensorStatus.temporaryOffline:\n      return `Last seen: ${sensorData.lastSeen}h ago`;\n    case SensorStatus.offline:\n      return \"Sensor offline\";\n    default:\n      return null;\n  }\n}\n\n// ----- Misc\nexport const capitalizeFirstCharacter = (inputString) => {\n  if (inputString) return inputString.charAt(0).toUpperCase() + inputString.slice(1);\n  else return null;\n};\n\nexport const getDomainName = (url) => {\n  return new URL(url).hostname;\n}\n\nexport const getUrlAfterScreen = (url) => {\n  const screenString = 'screen';\n  const urlComponents = url.split(screenString);\n  return `${screenString}${urlComponents.pop()}`;\n}\n\nexport const removeLastDirectoryFromURL = (url) => {\n  const urlComponents = url.split('/');\n  // Remove the last component (directory)\n  urlComponents.pop();\n  // Reconstruct the URL with the last directory removed\n  return urlComponents.join('/') + '/';\n}\n\nexport const areDOMOverlapped = (rect1, rect2) => {\n  if (!(rect1.bottom < rect2.top || rect1.top > rect2.bottom)) {\n    if (rect1.top < rect2.top) return -1;\n    else return 1;\n  }\n  else return 0;\n}\n","import AQIdatabase from \"./AirQualityIndexHelper\";\n\n// Helper function to categorize AQI\nfunction linearPieceWise(aqiHigh, aqiLow, concenHigh, concenLow, val) {\n  return parseInt(\n    ((aqiHigh - aqiLow) / (concenHigh - concenLow)) * (val - concenLow) + aqiLow\n  );\n}\n// Returns AQI number value\nfunction convertToAQI(val) {\n  if (val == null)\n    return {\n      aqi: null,\n      aqi_category_index: null\n    };\n\n  for (let i = 0; i < AQIdatabase.length; i++) {\n    const category = AQIdatabase[i];\n    if (val >= category.rawPM2_5.low && val <= category.rawPM2_5.high) {\n      return {\n        aqi: linearPieceWise(category.aqiUS.high, category.aqiUS.low, category.rawPM2_5.high, category.rawPM2_5.low, val),\n        aqi_category_index: category.id\n      }\n    }\n  };\n}\n\nexport default convertToAQI;","import CustomThemes from '../Themes/CustomThemes';\n\nconst AQIdatabase = [\n  {\n    id: 0,\n    category: 'Good',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[0],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[0],\n    aqiUS: {\n      low: 0,\n      high: 50\n    },\n    rawPM2_5: {\n      low: 0.0,\n      high: 12.0\n    },\n    description: 'Air quality is satisfactory, and air pollution poses little or no risk',\n    healthSuggestions: {\n      outdoors: 'Enjoy outdoor activities, the air is great!',\n      indoors_generic: 'Enjoy clean indoor air',\n      indoors_dining_hall: 'Enjoy clean dining hall air',\n      indoors_gym: 'Enjoy clean air for physical activities indoors',\n      indoors_vulnerable: 'Enjoy clean indoor air'\n    }\n  },\n  {\n    id: 1,\n    category: 'Moderate',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[1],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[1],\n    aqiUS: {\n      low: 51,\n      high: 100\n    },\n    rawPM2_5: {\n      low: 12.1,\n      high: 35.4\n    },\n    description: 'Air quality is acceptable. However, there may be a risk for some people, particularly those who are unusually sensitive to air pollution',\n    healthSuggestions: {\n      outdoors: 'Children and individuals with respiratory issues might need to reduce prolonged outdoor exertion',\n      indoors_generic: 'Indoor air is acceptable, but not great',\n      indoors_dining_hall: 'Indoor air is acceptable, but not great<br>Avoid Grill area',\n      indoors_gym: 'Indoor air is acceptable, but not great',\n      indoors_vulnerable: 'Indoor air is acceptable, but not great'\n    }\n  },\n  {\n    id: 2,\n    category: 'Unhealthy for Sensitive Groups',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[2],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[2],\n    aqiUS: {\n      low: 101,\n      high: 150\n    },\n    rawPM2_5: {\n      low: 35.5,\n      high: 55.4\n    },\n    description: 'Members of sensitive groups may experience health effects. The general public is less likely to be affected',\n    healthSuggestions: {\n      outdoors: 'Children and individuals with respiratory issues should limit outdoor exertion',\n      indoors_dining_hall: 'Consider take-aways<br>Avoid Grill area',\n      indoors_gym: 'Individuals with respiratory issues should lower the intensity of indoor exercises',\n      indoors_vulnerable: 'Monitor closely individuals with respiratory issues for any symptom'\n    }\n  },\n  {\n    id: 3,\n    category: 'Unhealthy',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[3],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[3],\n    aqiUS: {\n      low: 151,\n      high: 200\n    },\n    rawPM2_5: {\n      low: 55.5,\n      high: 150.4\n    },\n    description: 'Some members of the general public may experience health effects; members of sensitive groups may experience more serious health effects',\n    healthSuggestions: {\n      outdoors: 'Everyone should limit outdoor activities<br>Wear masks when going outside',\n      indoors_dining_hall:\n        'Consider take-aways<br>Avoid Grill area<br>Come back at off-peak hours',\n      indoors_gym: 'Everyone should lower the intensity of indoor exercises',\n      indoors_vulnerable: 'Monitor closely individuals with respiratory issues for any symptom'\n    }\n  },\n  {\n    id: 4,\n    category: 'Very Unhealthy',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[4],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[4],\n    aqiUS: {\n      low: 201,\n      high: 300\n    },\n    rawPM2_5: {\n      low: 150.5,\n      high: 250.4\n    },\n    description: 'Health alert: The risk of health effects is increased for everyone',\n    healthSuggestions: {\n      outdoors: 'Avoid outdoor activities at all cost<br>Wear N95 masks when going outside',\n      indoors_dining_hall:\n        'Consider take-aways<br>Avoid Grill area<br>Come back at off-peak hours',\n      indoors_gym: 'Indoor air quality is not suitable for any physical activities',\n      indoors_vulnerable: 'Monitor closely individuals with respiratory issues for any symptom'\n    }\n  },\n  {\n    id: 5,\n    category: 'Hazardous',\n    lightThemeColor: CustomThemes.light.palette.chart.optionsColors.aqi[5],\n    darkThemeColor: CustomThemes.dark.palette.chart.optionsColors.aqi[5],\n    aqiUS: {\n      low: 300,\n      high: 500\n    },\n    rawPM2_5: {\n      low: 250.5,\n      high: 550.5\n    },\n    description: 'Health warning of emergency conditions: everyone is more likely to be affected',\n    healthSuggestions: {\n      outdoors: 'Avoid outdoor activities at all cost<br>Wear N95 masks when going outside',\n      indoors_dining_hall:\n        'Consider take-aways<br>Avoid Grill area<br>Come back at off-peak hours',\n      indoors_gym: 'Indoor air quality is not suitable for any physical activities',\n      indoors_vulnerable: ''\n    }\n  },\n];\n\nexport default AQIdatabase;\n","import { fetchDataFromURL } from \"../Components/DatasetDownload/DatasetFetcher\";\nimport { calculateSensorStatus, SensorStatus } from \"../Pages/Screen/ScreenUtils\";\nimport convertToAQI from \"./AirQualityIndexCalculator\";\nimport AQIdatabase from \"./AirQualityIndexHelper\";\nimport parse from 'html-react-parser';\n\nexport const apiDomain = 'https://api.citiesair.com';\n\nexport const fetchAndprocessCurrentSensorsData = async (apiUrl) => {\n  try {\n    const data = await fetchDataFromURL(apiUrl, 'json', true);\n\n    if (!data) {\n      throw new Error('Returned data is empty');\n    }\n\n    try {\n      return processCurrentSensorsData(data);\n    } catch (error) {\n      // Handle the case where data is not an iterable object\n      console.error(\"Error: data is not iterable\", error);\n    }\n  }\n  catch (error) {\n    throw new Error(`Error fetching data: ${error.message}`);\n  }\n}\n\nexport const processCurrentSensorsData = (data) => {\n  Object.entries(data).map(([_, sensorData]) => {\n    // Calculate if the sensor is currently active or not\n    const now = new Date();\n    const currentTimestamp = new Date(sensorData.current?.timestamp);\n    const lastSeenInHours = Math.round((now - currentTimestamp) / 1000 / 3600);\n    if (sensorData.current) {\n      sensorData.current.lastSeenInHours = lastSeenInHours;\n      sensorData.current.sensor_status = calculateSensorStatus(lastSeenInHours);\n    }\n\n    // Calculate AQI from raw measurements\n    if (sensorData.current?.[\"pm2.5\"]) {\n      const aqiObject = convertToAQI(sensorData.current[\"pm2.5\"]);\n      if (aqiObject) {\n        const aqiCategory = AQIdatabase[aqiObject.aqi_category_index];\n        sensorData.current.aqi = aqiObject.aqi;\n        sensorData.current.category = aqiCategory.category;\n\n        // Only add color and healthSuggestion if the sensor is active\n        if (sensorData.current.sensor_status === SensorStatus.active) {\n          sensorData.current = {\n            ...sensorData.current,\n            color: aqiCategory.lightThemeColor,\n            healthSuggestion: aqiCategory.healthSuggestions[sensorData.sensor?.location_type] && parse(aqiCategory.healthSuggestions[sensorData.sensor?.location_type])\n          };\n        }\n      }\n    }\n  });\n  return data;\n}"],"names":["displayLastUpdateAndSensorStatus","sensorData","isScreen","current","sensor_status","SensorStatus","variant","sx","mt","fontWeight","color","AQIdatabase","mr","timestamp","sensor","last_seen","getFormattedElapsedTimeFromNow","props","currentSensorsData","temperatureUnitPreference","orderOfItems","container","justifyContent","verticalAlign","fontSize","fontFamily","Object","entries","map","index","numOfItems","key","item","order","keys","length","xs","Math","max","sm","lg","min","CustomThemes","className","location_long","location_short","lineHeight","aqi","category","getFormattedTemperature","rawTemp","temperature","currentUnit","TemperatureUnits","returnUnit","transform","rel_humidity","round","includes","location_type","calculateHeatIndex","returnSensorStatus","UppercaseTitle","text","display","textTransform","pb","StyledAccordion","styled","MuiAccordion","theme","expanded","palette","secondary","backgroundImage","backgroundColor","background","default","boxShadow","shadows","transition","StyledAccordionSummary","MuiAccordionSummary","marginTop","spacing","flexDirection","paddingLeft","primary","textDecoration","main","panel","title","content","useState","undefined","setExpanded","onChange","event","isExpanded","Tracking","transitionDuration","expandIcon","id","enterDelay","leaveDelay","component","dateString","inputDate","Date","timeDifference","seconds","floor","minutes","hours","days","active","temporaryOffline","offline","SensorStatusCriteria","name","cutoffInHours","low","high","Infinity","calculateSensorStatus","lastSeenInHours","i","lastSeen","capitalizeFirstCharacter","inputString","charAt","toUpperCase","slice","getDomainName","url","URL","hostname","getUrlAfterScreen","screenString","urlComponents","split","pop","areDOMOverlapped","rect1","rect2","bottom","top","linearPieceWise","aqiHigh","aqiLow","concenHigh","concenLow","val","parseInt","aqi_category_index","rawPM2_5","aqiUS","lightThemeColor","darkThemeColor","description","healthSuggestions","outdoors","indoors_generic","indoors_dining_hall","indoors_gym","indoors_vulnerable","fetchAndprocessCurrentSensorsData","apiUrl","fetchDataFromURL","data","Error","processCurrentSensorsData","console","error","message","now","currentTimestamp","aqiObject","convertToAQI","aqiCategory","healthSuggestion","parse"],"sourceRoot":""}